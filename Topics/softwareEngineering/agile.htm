<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/css/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	
<h2 >References</h2>
<div>
<a href="https://www.agilealliance.org/agile101/agile-glossary">Glossary</a>
</div>
<h2 >Agile project management</h2>
<div>
 is an iterative approach to delivering a project, 
 which focuses on continuous releases 
 that incorporate customer feedback. 
 The ability to adjust during each iteration promotes velocity and adaptability. 
</div>
 
<h2 >Roadmaps</h2>
<div>
A product roadmap outlines how a product or solution develops over time. 
A roadmap in agile development provides important context that empowers teams to reach both incremental and project-wide goals. 
Roadmaps are composed of initiatives, which are large areas of functionality, and include timelines that communicate when a feature will be available. 
As the work proceeds and teams learn more, it's accepted that the roadmap will change to reflect that new information - possibly in subtle or broad ways. 
The goal is to keep the roadmap focused on current conditions that impact the project and long-term goals in order to effectively work with stakeholders and respond to the competitive landscape. 

The following is a simple roadmap for a product team, with initiatives in the boxes and timelines indicated by the milestone-markers in red. 
Agile roadmap | Atlassian agile coach
</div>
<h2 >Requirements</h2>
<div>
Each initiative in the roadmap breaks down into a set of requirements. 
Agile requirements are lightweight descriptions of required functionality, rather than the 100-page documents associated with traditional projects. 
They evolve over time and capitalize on the team's shared understanding of the customer and the desired product. 
Agile requirements remain lean while everyone on the team develops a shared understanding via ongoing conversation and collaboration. 
Only when implementation is about to begin are they fleshed out with full details.
</div>
<h2 >Backlog</h2>
<div>
The backlog sets the priorities for the agile program. 
The team includes all work items in the backlog: 
new features, bugs, enhancements, technical or architectural tasks, etc. 
The product owner prioritizes the work on the backlog for the engineering team.
The development team then uses the prioritized backlog as its single source of truth for what work needs to be done.
</div>
<h2 >Agile metrics</h2>
<div>
Agile teams thrive on metrics. 
Work in progress (WIP) limits keep the team, and the business, focused on delivering the highest priority work. 
Graphs like burndown charts and control charts help the team predict their delivery cadence, and continuous flow diagrams help identify bottlenecks. 
These metrics and artifacts keep everyone focused on the big goals and boost confidence in the team's ability to deliver future work. 
</div>
<h2 >Agile runs on trust</h2>
<div>
Agile processes cannot function without a high level of trust amongst team members and therefore create trust. 
It requires candor to have difficult conversations regarding what's right for the program and the product. 
Because conversations happen at regular intervals, ideas and concerns are regularly expressed. 
That means team members need to be confident in each other's ability (and willingness) to execute on the decisions made during those conversations.
</div>
<h2 >workflow</h2>
	<div>
    Start simple, start now 
    work states:    To Do, In progress, code review(by tester),done( ready to merge into the main or release branch.).
</div>    
<h2>Stories</h2>
<div>
are short requirements or requests written from the perspective of an end user
</div>
<h2 >Epics</h2>
<div>
 are large bodies of work that can be broken down into a number of smaller tasks (called stories).
</div>
<h2 ><input type="button" value="-"
			style="font-size:20px;margin-right:5px;vertical-align: middle;"  
			onclick="toggle(this)" />Initiatives </h2>
<div>
			are collections of epics that drive toward a common goal.
</div>
<h2 >Estimation</h2>
<div>
 <h3>Story points vs. hours</h3>
  stiry points are relative estimates about the effort it might take to complete each item in the backlog(using points instead of date period). For example, an item that is assigned two story points is expected to be twice the effort as an item estimated as one poin

Story points are units of measure for expressing an estimate of the overall effort required to fully implement a any  piece of work. 
Teams assign story points relative to work complexity, the amount of work, and risk or uncertainty. Values are assigned to more effectively break down work into smaller pieces, so they can address uncertainty. Over time, this helps teams understand how much they can achieve in a period of time and builds consensus and commitment to the solution.
 
 <h3>Story points and planning poker </h3>
 <p>
 The team will take an item from the backlog, discuss it briefly, and each member will mentally formulate an estimate. Then everyone holds up a card with the number that reflects their estimate. If everyone is in agreement, great! If not, take some time (but not too much time–just couple minutes) to understand the rationale behind different estimates. Remember though, estimation should be a high level activity. If the team is too far into the weeds, take a breath, and up-level the discussion.
 

 </p>
 </div>
<h2 >Metrics</h2>
 <div>
 <h3>Sprint burndown </h3>
 A sprint burndown report then tracks the completion of work throughout the sprint. The x-axis represents time, and the y-axis refers to the amount of work left to complete, measured in either story points or hours. The goal is to have all the forecasted work completed by the end of the sprint.
 
 <h3>Epic and release burndown</h3>
 Epic and release (or version) burndown charts track the progress of development over a larger body of work than the sprint burndown, and guide development for both scrum and kanban teams.
 "Scope creep" is the injection of more requirements into a previously-defined project. 
 
 <h3>Velocity </h3>
 is the average amount of work a scrum team completes during a sprint, measured in either story points or hours, and is very useful for forecasting. 
 Velocity in Agile is a simple calculation measuring units of work completed in a given timeframe. Units of work can be measured in several ways, including engineer hours, user stories, or story points. The same applies to timeframe; it's typically measured in iterations, sprints, or weeks.
 
 <b>How do you calculate velocity in agile?</b>
 Simply add up the total of story points completed from each sprint, then divide by the number of sprints
 
<h3>Control chart</h3>

Control charts focus on the cycle time of individual issues–the total time from "in progress" to "done". 
</div>
<h2 >Agile manifesto</h2>
<p>
. Individuals and interactions over processes and tools
. Working software over comprehensive documentation
. Customer collaboration over contract negotiation
. Responding to change over following a plan

That is, while there is value in the items on
the right, we value the items on the left more.
</p>
<h2 ><input type="button" value="-"
			style="font-size:20px;margin-right:5px;vertical-align: middle;"  
			onclick="toggle(this)" />Agile principals</h2>
<p>
. Our highest priority is to satisfy the customer
through early and continuous delivery
of valuable software.

. Welcome changing requirements, even late in
development. Agile processes harness change for
the customer's competitive advantage.

. Deliver working software frequently, from a
couple of weeks to a couple of months, with a
preference to the shorter timescale.

. Business people and developers must work
together daily throughout the project.

. Build projects around motivated individuals.
Give them the environment and support they need,
and trust them to get the job done.

. The most efficient and effective method of
conveying information to and within a development
team is face-to-face conversation.

. Working software is the primary measure of progress.

. Agile processes promote sustainable development.
The sponsors, developers, and users should be able
to maintain a constant pace indefinitely.

. Continuous attention to technical excellence
and good design enhances agility.

. Simplicity--the art of maximizing the amount
of work not done--is essential.

. The best architectures, requirements, and designs
emerge from self-organizing teams.

. At regular intervals, the team reflects on how
to become more effective, then tunes and adjusts
its behavior accordingly.
</p>

</div>
</body>
