<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	
<h2 >References</h2>
<div>
<a href="https://www.agilealliance.org/agile101/agile-glossary">Glossary</a>
</div>
	
<h2 >Agile project management</h2>
<div><pre>
	Is an <b>iterative</b> approach 
	to delivering a project, 
	which focuses on <b>continuous releases</b> 
	that incorporate <b>customer feedback</b>.
	
	The ability to <b>adjust during each iteration</b>
	promotes velocity and adaptability. 
</pre></div>
 
<h2 >Roadmaps</h2>
<div><pre>
	A <b>product roadmap</b> outlines how a product or solution develops over time.
	A roadmap provides important context that empowers teams
	<b>to reach goals</b> both incremental and project-wide . 

	Roadmaps are composed of <
	b>initiatives</b>, which are large areas of functionality,
	and include <b>timelines</b> that communicate when a feature will be available. 

	As the work proceeds and teams learn more,
	it's accepted that the roadmap will change 
	to reflect that new information 
	- possibly in subtle or broad ways. 
	
	The goal is to keep the roadmap focused on 
	current conditions that impact the project 
	and long-term goals 
	in order to 
	effectively work with stakeholders 
	and respond to the competitive landscape. 
</pre></div>
	
<h2 >Requirements</h2>
<div>
<pre>
	Each initiative in the roadmap breaks down into <b>a set of requirements</b>.
	Agile requirements are lightweight descriptions of 
	required functionality, 
	rather than the 100-page documents associated with traditional projects. 

	They evolve over time 
	and capitalize on the team's shared understanding of 
	the customer and the desired product. 

	Agile requirements remain lean while 
	everyone on the team develops a shared understanding via ongoing conversation and collaboration. 

	Only when implementation is about to begin are they fleshed out with full details.
</pre></div>
	
<h2 >Backlog</h2>
<div>
<pre>
	The backlog <b>sets the priorities</b> for the agile program. 

	The team includes all work items in the backlog: 
		new features, 
		bugs, 
		enhancements, 
		technical 
		or architectural tasks, etc. 

		The product owner <b>prioritizes the work</b> on the backlog for the engineering team.

		The development team then uses the prioritized backlog as 
		its single source of truth for what work needs to be done.
</pre></div>
	
<h2 >Agile metrics</h2>
<div><pre>
	Agile teams thrive on metrics.
	
	<b>Work in progress (WIP)</b> limits keep the team, and the business, focused on delivering the highest priority work. 
	Graphs like <b>burndown charts</b> and control charts help the team predict their delivery cadence, 
	and <b>continuous flow diagrams</b> help identify bottlenecks.
	
	These metrics and artifacts keep everyone focused on the big goals 
	and boost confidence in the team's ability to deliver future work. 
</pre></div>
	
<h2 >Agile runs on trust</h2>
<div><pre>
	Agile processes cannot function without a high level of trust amongst team members and therefore create trust. 

	It requires candor to have difficult conversations regarding what's right for the program and the product. 
	
	Because conversations happen at regular intervals, ideas and concerns are regularly expressed. 

	That means team members need to be confident 
	in each other's ability (and willingness) to execute on the decisions made during those conversations.
</pre></div>
	
<h2 >workflow</h2>
<div><pre>
  Start simple, start now 

  work states:    
	To Do, 
	In progress, 
	code review , 
	done ( ready to merge into the main or release branch)
  </pre>
</div>    
	
<h2>Stories</h2>
<div><pre>
	are <b>short requirements</b> or requests 
	written from the perspective <b>of an end user</b>
</pre></div>
	
<h2 >Epics</h2>
<div>
	are <b>large bodies of work</b> that can be broken down into a number of smaller tasks (called stories).
</div>
	
<h2 >Initiatives </h2>
<div>
	are collections of epics that drive toward a common goal.
</div>
<h2 >Estimation</h2>
<div>
 <h3>Story points vs. hours</h3>
	<pre>
	<b>story points</b> are relative estimates about the effort it might take to complete each item in the backlog
   	(using points instead of date period).
   	
	For example, an item that is assigned two story points is expected to be twice the effort 
	as an item estimated as one point.

	Story points are units of measure for expressing an estimate of the overall effort 
	required to fully implement any  piece of work. 
	
	Teams assign story points relative to 
		work complexity, 
		the amount of work, 
		and risk or uncertainty.
		
	Values are assigned to more effectively break down work into smaller pieces,
	so they can address uncertainty.
	Over time, this helps teams understand how much they can achieve in a period of time and builds consensus and commitment to the solution.
 	</pre>
 <h3>Story points and planning poker </h3>
 <pre>
 The team will take an item from the backlog, discuss it briefly, 
	 and each member will mentally formulate an estimate. 
	 Then everyone holds up a card with the number that reflects their estimate. 
	 If everyone is in agreement, great! 
	 If not, take some time (but not too much time–just couple minutes)
	 to understand the rationale behind different estimates.
	 Remember though, estimation should be a high level activity.
	 If the team is too far into the weeds, take a breath, and up-level the discussion.
 </pre>
 </div>
	
<h2 >Metrics</h2>
 <div>
 <h3>Sprint burndown </h3>
 <pre>
 A sprint burndown report then tracks the completion of work throughout the sprint. 
 
 The x-axis represents time, and the y-axis refers to the amount of work left to complete,
 measured in either story points or hours. 
 
 The goal is to have all the forecasted work completed by the end of the sprint.
 </pre>
	 
 <h3>Epic and release burndown</h3>
<pre>
	 Epic and release (or version) burndown charts 
	 track the progress of development over a larger body of work than the sprint burndown,
	 and guide development for both scrum and kanban teams.
 
 	"Scope creep" is the injection of more requirements into a previously-defined project. 
 </pre>
	 
 <h3>Velocity </h3>
 <pre>
 is the <b>average amount of work</b> a scrum team completes during a sprint, 
 measured in either story points or hours, 
 and is very useful for forecasting. 
 
 Velocity in Agile is a simple calculation 
 measuring units of work completed in a given timeframe. 
 
 Units of work can be measured in several ways, including engineer hours, user stories, or story points. 
 The same applies to timeframe; it's typically measured in iterations, sprints, or weeks.
	 
 <b>How do you calculate velocity in agile?</b>
 Simply add up the total of story points completed from each sprint, 
 then divide by the number of sprints
 
<h3>Control chart</h3>
Control charts focus on the cycle time of individual issues–the total time from "in progress" to "done". 
</pre></div>
	
<h2 >Agile manifesto</h2>
<pre>
. Individuals and interactions over processes and tools
. Working software over comprehensive documentation
. Customer collaboration over contract negotiation
. Responding to change over following a plan

That is, while there is value in the items on
the right, we value the items on the left more.
</pre>
<h2 >Agile principals</h2>
<pre>
. Our <b>highest priority is</b>
  to satisfy the customer
  through early and continuous delivery
  of valuable software.

. Welcome <b>changing requirements</b>, 
 even late in development. 
 Agile processes harness change for the customer's competitive advantage.

. <b>Deliver working software frequently</b>, 
  from a couple of weeks to a couple of months,
  with a preference to the shorter timescale.

. Business people and developers must work together daily throughout the project.

. Build projects around motivated individuals.
  Give them the environment and support they need, 
  and <b>trust them to get the job done</b>.

. The most efficient and effective method of
conveying information to and within a development
team is face-to-face conversation.

. Working software is the primary measure of progress.

. Agile processes promote sustainable development.
  The sponsors, developers, and users 
  should be able to maintain a constant pace indefinitely.

. Continuous attention to technical excellence
  and good design enhances agility.

. Simplicity
  --the art of maximizing the amount of work not done--
  is essential.

. The best architectures, requirements, and designs
  emerge from self-organizing teams.

. At regular intervals, the team reflects on 
   how to become more effective, 
   then tunes and adjusts its behavior accordingly.
</pre>

</div>
</body>
