<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	
<h2><input type="button" value="-"
			style="font-size:20px;margin-right:5px;vertical-align: middle;"  
			onclick="toggle(this)" />References</h2>
<div>
<a href='https://www.youtube.com/watch?v=-yFXVwhGP0s&list=PLaFzfwmPR7_Ifxq-udm66fhReFeGOe2x_'>Devops zero to hero</a>
</div>
<h2><input type="button" value="-"
        class="toggleButton"  onclick="toggle(this)" />What is DevOps Culture? </h2>
<p>
a DevOps culture involves <b>closer collaboration and a shared responsibility</b> between development and operations for the products they create and maintain
At the heart of DevOps culture is increased transparency, communication, and collaboration between teams that traditionally worked in siloes. 

DevOps entails<b> shared responsibilities</b>. Development and operations staff should both be responsible for the success or failure of a product. 

Developers are expected to do more than just build and hand off to operations — 
they are expected to share the responsibility of overseeing a product through the entire course of its lifetime, adopting a "you build it, you run it" mentality. 

<b>Autonomous teams </b> are another important aspect of DevOps. 
 For the development and operations teams to collaborate effectively, they need to make decisions and implement changes without a cumbersome and lengthy approval process.
 This involves handing over trust to teams and establishing an environment where there is no fear of failure.
 These teams should have the right processes and tools in place to make decisions faster and easier, for each level of risk to the customer. 

 A DevOps team culture values <b>fast feedback</b> that can help with continuous improvement of a unified development and operations team. 
 <b>Automation</b> is essential to DevOps culture, since it allows great collaboration and frees up resources.
  Automating and integrating the processes between software development and IT teams helps them to build, test, and release software faster and more reliably.

  
<h3>The ability to make mistakes</h3>
<p>
Many organizations, teams, and individuals put extraordinary pressure on themselves and each other to never make mistakes. If failure is not an option, an individual or team is less likely to attempt a novel approach to solve a problem or develop innovative features.  

This mindset is reflected in the past obsession with measuring "Mean Time Between Failures" (MTBF) over "Mean Time to Recovery" (MTTR). MTBF uses tools like "root cause analysis" to identify the source of failures and attempt to prevent them from happening again. MTTR reflects a view of software applications as complex systems that are apt to fail in unpredictable ways and focuses on quick recovery when they do fail.

A “blameless retrospective” is a common feature in DevOps culture. Outcomes can be improved when a team meets at the end of a sprint or project to discuss what went well and what could be improved, in an open and safe environment.
</p>
<h3>A new set of processes </h3>
<p>
<b>Continuous integration</b> is the process of automating the integration of code changes from multiple contributors in a software project. This extends beyond development teams to the rest of the organization. For example, product teams coordinate when to sequentially launch features and fixes and which team members will be responsible.  
  
<b>Continuous delivery</b> is an organizational methodology that brings together engineering and non-engineering teams like design, product, and marketing to deliver a product. Environments without CD encourage “over the wall” behavior where developers focus on the QA team as the primary user experience. It means the “trunk” branch of your repository is in a “deployable” state at all times. 

</p>


<h2>Best practices for implementing DevOps </h2>

<h3>Agile project management</h3>
<p>
Agile is an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Agile teams focus on delivering work in smaller increments, instead of waiting for a single massive release date. Requirements, plans, and results are evaluated continuously, allowing teams to respond to feedback and pivot as necessary.

The following are key concepts for agile project management:

    Start with a workflow that includes four phases: to do, in progress, code review, and done. Read more about workflows.
    Teams need to break large-scale projects into smaller tasks and respond to changes in needs or scope as they make progress. Read more about how to use epics, stories, and themes to scope and structure work.
    How do you plan, track, and measure the incremental work? Scrum and kanban are core frameworks for teams practicing agile methodology.
</p>

<h3>​​​​​​​Shift left with CI/CD </h3>
<p>
    When teams “shift left”, they bring testing into their code development processes early. Instead of sending multiple changes to a separate test or QA team, a variety of tests are performed throughout the coding process so that developers can fix bugs or improve code quality while they work on the relevant section of the codebase. The practice of continuous integration and  continuous delivery (CI/CD), and deployment underpins the ability to shift left. Read more about CI/CD.
</p>


<h3>​​​​​​​Build with the right tools</h3>

A DevOps toolchain requires the right tools for each phase of the DevOps lifecycle, with key capabilities to improve software quality and speed of delivery. Read more about how to choose DevOps tools and review functionality for each phase of the DevOps lifecycle.

<h3>​​​​​​​Implement automation</h3>

Continuous integration and delivery allows developers to merge code regularly into the main repository. Instead of manually checking code, CI/CD automates this process, from batching in a specified window to frequent commits. In addition to CI/CD, automated testing is essential to successful DevOps practices. Automated tests might include end-to-end testing, unit tests, integration tests, and performance tests. Read more about incorporating automation into your software development processes. Read more about automation. 
<h3>Monitor the DevOps pipeline and applications</h3>

    It’s important to monitor the DevOps pipeline so a broken build or failed test doesn’t cause unnecessary delays.
    
</div>
<a href="https://www.atlassian.com/devops/what-is-devops/devops-engineer">More..</a>
</body>
