<pre>
SOLID

  - Single-Responsibility Principle : 
  A class should have one and only one reason to change, meaning that a class should have only one job.

  - Open-Closed Principle : 
  Objects or entities should be open for extension but closed for modification. 

  - Liskov Substitution Principle : 
   Let q(x) be a property provable about objects of x of type T. 
   Then q(y) should be provable for objects y of type S where S is a subtype of T. 

  - Interface Segregation Principle : 
   A client should never be forced to implement an interface that it doesn’t use, 
   or clients shouldn’t be forced to depend on methods they do not use. 

  - Dependency Inversion Principle : 
   Entities must depend on abstractions, not on concretions. 
   It states that the high-level module must not depend on the low-level module, but they should depend on abstractions.

Design patterns
  - Structural patterns deal with structure of classes and objects.
    they are 7: Adapter , Bridge , Composite , Decorator , Facade , Flyweight , proxy 

  - Creational patterns provide instantiation mechanisms instead of using constructors.
    They are 6: Factory Method , Abstract Factory , Singleton Pattern, Prototype , Builder , Object Pool 
  
  - Behavioral patterns : Chain of Responsibility Pattern,Command ,Interpreter ,Iterator ,Mediator ,Memento ,Observer ,State ,Strategy ,Template ,Visitor ,Null Object

Algorithms
  -Time complexity : 
    The number of times a statement is executed.
    O(n) : n operation
    O(log n) : time complexity of binary search is O(log n) 
    O(2^n) : Exponential Time Complexity: brute force algo 
    
</pre>
