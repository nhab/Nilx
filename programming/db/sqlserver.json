options=[
    {
        GrpTitle:"performance tuning",
        items:[
            {title:"clustCred and non-clustered Indexes.",
            body:`There can be only one clustered index per table.
    However, you can create multiple non-clustered indexes on a single table.
    Clustered indexes only sort tables. 
    Therefore, they do not consume extra storage.
    Non-clustered indexes are stored in a separate place from 
    the actual table claiming more storage space.
    Clustered indexes are faster than non-clustered indexes
    since they donâ€™t involve any extra lookup step.
    `
            }
        ]
    },

    {
        GrpTitle:"keywords and operators",
        items:[
            {title:"MINUS operator",
            body:`The SQL MINUS operator is used to return all rows in the first SELECT statement
                that are not returned by the second SELECT statement. `
            }
        ]
        },
        {GrpTitle:"Temporary Table",
            items:[
                {title:"Creating A Temporary Table Example -method 1",
                code:
                `SELECT name, age, gender
    INTO #MaleStudents
    FROM student
    WHERE gender = 'Male'
                `
                },
                {title:"Creating A Temporary Table Example -method 2",
                code:`CREATE TABLE #MaleStudents
    (
        name VARCHAR(50),
        age int,
        gender VARCHAR (50)
    
    )
    
    INSERT INTO #MaleStudents
    SELECT name, age, gender
    FROM student
    WHERE gender = 'Male'
    `
                },
                {
                title:"Global Temporary Tables",
    body:`They are accessible to the other connections.
    The name of the global temporary table starts with a double hash symbol (##). `
                }
            ]
     },
    {GrpTitle:"Common Table Expressions",
     items:[
	      {title:"What are Common Table Expressions (CTEs)?",
	       body:`A Common Table Expression (CTE) is the result set of a query which exists temporarily and
for use only within the context of a larger query. 
(Much like a derived table, the result of a CTE is not stored and exists only for the duration of the query)

Example use cases include:

- Needing to reference a derived table multiple times in a single query
- An alternative to creating a view in the database
- Performing the same calculation multiple times over across multiple query components`,
	       code:`Example:

-- define CTE:
WITH Cost_by_Month AS
(SELECT campaign_id AS campaign,
       TO_CHAR(created_date, 'YYYY-MM') AS month,
       SUM(cost) AS monthly_cost
FROM marketing
WHERE created_date BETWEEN NOW() - INTERVAL '3 MONTH' AND NOW()
GROUP BY 1, 2
ORDER BY 1, 2)

-- use CTE in subsequent query:
SELECT campaign, avg(monthly_cost) as "Avg Monthly Cost"
FROM Cost_by_Month
GROUP BY campaign
ORDER BY campaign`
	      }
     ]
    }
]