<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	
<h2>Resorces</h2>
    <p>
    <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/?view=aspnetcore-6.0&tabs=windows">Asp.net core fundamentals</a>
    <a href='https://www.youtube.com/watch?v=CP-zbZA5LAc&list=PLaFzfwmPR7_LTXu0Vz9Zz_Y0OMMC7ArHZ'>asp.net core</a>
        <a href="https://www.w3schools.com/asp/razor_syntax.asp">Asp.net Resor tutorial on w2school</a>
        <a href='https://github.com/dodyg/practical-aspnetcore?WT.mc_id=-blog-scottha'>Samples</a>
        <a href="https://docs.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-6.0">Asp.net core</a>
        <a href="https://blazorschool.com/tutorial">blazor</a>
        <a href='https://blazor-university.com/components/component-events/'>Read more about blazor</a>
        <a href="https://www.chubbydeveloper.com/signalr-net-core/">signalR</a>
    </p>

	<h2><input type="button" value="-"
			style="font-size:20px;margin-right:5px;vertical-align: middle;"  
			onclick="toggle(this)" />Asp.net core parts </h2>
    <p>
        Razor          : server-side web UI development
        Blazor         : Client-side web UI development
        MVC
        Web API        : Restfull http services
        gRPC           : Contract-first services using Protocol Buffers
        SignalR        : Bidirectional communication between servers and connected clients
        working with db: Razor Pages or MVC with Entity Framework Core
        Middleware     : is a software component that hooks into the request pipeline to handle web requests and generate responses.
        Kestrel        : Web Server for ASP.NET Core
    </p>

     <h2><input type="button" value="-"
        style="font-size:20px;margin-right:5px;vertical-align: middle;"  
        onclick="toggle(this)" />Razor</h2>
    <div>
        . is a simple programming syntax for embedding server code in web pages.
        . is a HTML pages with additional Razor code.
        . <b>how it works:</b> When the server reads the page, it runs the Razor code first, before it sends the HTML page to the browser. The code that is executed on the server can perform tasks that cannot be done in the browser, for example accessing a server database. Server code can create dynamic HTML content on the fly, before it is sent to the browser. Seen from the browser, the HTML generated by server code is no different than static HTML content.
        . <b>Working With Objects:</b> The "DateTime" object is a typical built-in ASP.NET object, but objects can also be self-defined, a web page, a text box, a file, a database record, etc.
            Objects may have methods they can perform. A database record might have a "Save" method, an image object might have a "Rotate" method, an email object might have a "Send" method, and so on.
            Example :<code>< td>@DateTime.Now.Second< /td></code>
        . <b>If and Else Conditions :</b> 
        <code>
            @{
                var txt = "";
                if(DateTime.Now.Hour > 12)
                  {txt = "Good Evening";}
                else
                  {txt = "Good Morning";}
                }
                < html>
                < body>
                < p>The message is @txt< /p>
                < /body>
                < /html>
        </code>
        .<b>Reading User Input</b>Input is read by the <b>Request[] function</b>, and posting (input) is tested by the <b>IsPost</b> condition.for example:
        <code>
            @{
                var totalMessage = "";
                if(IsPost)
                    {
                    var num1 = Request["text1"];
                    var num2 = Request["text2"];
                    var total = num1.AsInt() + num2.AsInt();
                    totalMessage = "Total = " + total;
                    }
                }
                < html>
                < body style="background-color: beige; font-family: Verdana, Arial;">
                < form action="" method="post">
                < p>< label for="text1">First Number:< /label>< br>
                < input type="text" name="text1" / >< /p>
                < p>< label for="text2">Second Number:< /label>< br>
                < input type="text" name="text2" / >< /p>
                < p>< input type="submit" value=" Add " / >< /p>
                < /form>
                < p>@totalMessage< /p>
                < /body>
                < /html>
        </code>
        . <b>for loops</b>
        <code>
            @for(var i = 10; i < 21; i++)
                {< p>Line @i< /p>}
        </code>
        .<b>For Each Loops</b>
        <code>
            < ul>
                @foreach (var x in Request.ServerVariables)
                    {< li>@x< /li>}
            < /ul>
        </code>
        .<b>While Loops</b>
        <code>
            <p>
                @{
                    var i = 0;
                    while (i < 5)
                        {
                        i += 1;
                        < p>Line @i< /p>
                        }
                    }
            </p>
        </code>
        <b>Razor full Example</b>
        <code>
            < !-- Single statement block -->
            @{ var myMessage = "Hello World"; }
    
            < !-- Inline expression or variable -->
            < p>The value of myMessage is: @myMessage< /p>
    
            < !-- Multi-statement block -- >
            @{
            var greeting = "Welcome to our site!";
            var weekDay = DateTime.Now.DayOfWeek;
            var greetingMessage = greeting + " Here in Huston it is: " + weekDay;
            }
            < p>The greeting is: @greetingMessage< /p>       
        </code>
        <b>Main Razor Syntax Rules: </b>
        <code>
            . Razor code blocks are enclosed in @{ ... }
            . Inline expressions (variables and functions) start with @
            . Code statements end with semicolon
            . Variables are declared with the var keyword
            . Strings are enclosed with quotation marks
            . C# code is case sensitive
            . C# files have the extension .cshtml             
        </code>
    </div>

    <h2><input type="button" value="-"
        style="font-size:20px;margin-right:5px;vertical-align: middle;"  
        onclick="toggle(this)" /> Blazor</h2>
    <p>
        <b>What is blazor?</b>
        . Blazor is a Single Page Application development framework. 
        . The name Blazor is a combination/mutation of the words Browser and Razor (the .NET HTML view generating engine).
        . The implication being that instead of having to execute Razor views on the server in order to present HTML to the browser,
          Blazor is capable of executing these views on the client. 
        . Blazor also supports executing SPAs on the server.
        . Blazor is not like Silverlight, Microsoft’s previous attempt at hosting in-browser applications and it does not require any plugin in browser.
        . Blazor either runs server-side, in which case it executes on a server and the browser acts like a dumb terminal, or it runs in the browser itself by utilising WebAssembly.
        . Because WebAssembly is a web standard, it is supported on all major browsers, which means also client-side Blazor apps will run inside a browser on Windows/Linux/Mac/Android and iOS.

        <b>What is WebAssembly?</b>
        . WebAssembly (abbreviated “Wasm”) is an instruction set designed to run on any host capable of interpreting those instructions, or compiling them to native machine code and executing them.
        . Wasm is an instruction set that is formatted in a specific binary format. 
        . Any host (hardware or software) that adheres to this specification is therefore capable of reading binaries and executing them – either interpreted, or by compiling directly to machine language specific to the device.
        . Wasm is akin to the common instruction set (Common Intermediate Language) that .NET source code compiles to. Just like .NET, Wasm can be generated from higher languages such as C#.
        . c# or an language code --compiles to--> intermediate binary format --- executed by --> native machine code on host
        .<b>Blazor hosting models:</b>
            1.Web Assembly:
                . can be deployed as static files.Despite this, Blazor Wasm apps will not run directly from the local file system due to browser security restrictions.
                . Blazor Wasm can work off-line. When the network connection to the server is lost.
                . It can also quite easily run as a Progressive Web App, which means the client can choose to install our app onto their device and run it whenever they wish without any network access at all.

            2.server-side Blazor:
                . Blazor server-side pre-renders HTML content before it is sent to the client’s browser. This makes it search-engine friendly, and there is no perceivable start-up time.
                . Blazor server-side sets up an in-memory session for the current client and uses SignalR to communicate between the .NET running on the server and the client’s browser. 
                   All memory and CPU usage comes at a cost to the server, for all users.
                   It also means that the client is tied to the server that first served it, so doesn’t work with load-balancing.
                . How it works:
                Once the initial page has been rendered and sent to the browser, the blazor.server.js file hooks into any relevant user interaction events in the browser so it can mediate between the user and the server. 
                For example, if a rendered element has an @onclick event registered, blazor.server.js will hook into its JavaScript onclick event and then use its SignalR connection to send that event to the server and execute the relevant .NET code.
                <code>
                    < p>
                        Current count = @CurrentCount
                      < /p>
                      < button @onclick=IncrementCount>Click me< /button>
                      @code
                      {
                        private int CurrentCount;
                        public void Increment()
                        {
                          CurrentCount++;
                        }
                      } 
                </code>
        <b>Blazor Mobile Bindings</b> allows developers to build native mobile apps using a combination of Blazor and a Razor variant of Xamarin.Forms (XAML).
        <b>Creating a new Blazor project </b>
        <code>
            Visual Studio -> Create a new project. -> Blazor WebAssembly App. -> Enter a project name -> Check the ASP.NET Core hosted check box.
        </code>
        <b>Creating a Blazor page </b>
            <code>Solution Explorer window -> MyFirstBlazorApp.Client project -> right-click Pages folder ->  Add->Razor Page -> name it :Counter1.razor
            </code> 
            Start your new razor page with the following:
            <code>
                @page "/counter"

                < h1>Counter< /h1>
                < p>The counter value is @currentCount< /p>
                < button class="btn btn-primary" @onclick=IncrementCounter>Increment counter< /button>
                
                @code {
                  private int currentCount = 42;
                
                  private void IncrementCounter()
                  {
                    currentCount++;
                  }
                }
            </code>
            . The first line identifies the URL required to render the content of this page. 
            . The @code section of the page is where we write our properties / methods, event handlers, or whatever else we need. 
        <b>Blazor Layouts</b>
            . A Blazor layout is similar to the ASP Webforms concept of a Master Page, and the same as a Razor layout in ASP MVC.
            . Any content you intend to act as a layout template for pages must descend from the LayoutComponentBaseclass.
            . use @Body property whithin the templete,as a placeholder for the content you want to insert.for example:
            <code>
                @inherits LayoutComponentBase
                < div class="main">
                < header>
                    < h1>This is the header< /h1>
                < /header>
                < div class="content">
                    @Body
                < /div>
                < footer>
                    This is the footer
                < /footer>
                < /div>
            </code>
            . The above layout is not the entire HTML page.
            . Blazor layouts work only within the part of the HTML that Blazor is defined within the <b>wwwroot\index.html</b> page, in a default Blazor application this is everything within the <app> element.
        <b>Specifying a default layout for the app</b>
        . The most generic way to specify a layout is to edit the/Pages/_Imports.razor file and edit the single line of code to identify a different layout.
            <code>@layout MainLayout</code>
        . Obviously you can alter the /Shared/MainLayout.razor file if you just wish to alter the appearance of the existing layout.
        .If your app has separate areas to it, for example an “Admin” area, it is possible to specify a default layout to use for all pages within that area simply by grouping them within their own child-folder that has its own _Imports.razor file.
        .<b>Specifying a layout explicitly for an individual page</b> using the @layout directive
        <code>
            @page "/admin/users"
            @layout MainLayout
            < h2>Users< /h2> 
        </code>
    </p>

<h2>Blazor Components</h2>
<p>
    . All rendered Blazor views descend from the ComponentBase class, this includes Layouts, Pages, and also Components.
    . A Blazor page is essentially a component with a @page directive that specifies the URL the browser must navigate to in order for it to be rendered. 
    <b>Creating a component</b>
    Once you’ve created the new Components folder, create a file within it named MyFirstComponent.razor and enter the following mark-up.
    <code>
        < div>
            < h2>This is my first component< /h2>
        < /div>            
    </code>
    Now edit the Index.razor file:
    <code>
        < CreatingAComponent.Client.Components.MyFirstComponent/ >
    </code>
    or edit /_Imports.razor and add @using CreatingAComponent.Client.Components. 
    <b>One-way binding</b>
    alter the contents of /Components/MyFirstComponent.razor:
    <code>
        < div>
            CurrentCounterValue in MyFirstComponent is @CurrentCounterValue
            < /div>
            @code {
            private int CurrentCounterValue = 42;
            }              
    </code>
    <b>Receiving values via Parameters</b>
    create a new component named MySecondComponent:
    <code>
        < div>
            CurrentCounterValue in MySecondComponent is @CurrentCounterValue
        < /div>
        @code {
            [Parameter]
            public int CurrentCounterValue { get; set; }
        }   
    </code>
    Now you can use the secondComponent in this way:
    <code>< MySecondComponent CurrentCounterValue=@currentCount/ ></code>

    <b>Literals: </b>Any value passed to an HTML attribute (not prepended with @) is considered a literal value.
    <b>Expressions:</b>  example:<code>< input size=@(InputSize * 3) / ></code>
    <b>Directives:</b>Directives are built-in macros that alter the transpiled C# code that is generated from Razor mark-up.
    Directives are used by preceding the identifier with the @ symbol, 
    the identifier being what we’d typically expect to be either the name of an HTML attribute or the name of a component’s property. 
    .Currently, unlike other frameworks such as Angular, Blazor does not allow developers to create their own directives.
    <a href="https://blazorschool.com/tutorial/blazor-server/dotnet6/directives-389160">List of directives</a>
</p>

<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" /> Blazor Component events</h2>
<p>
    . The <b>EventCallback< T ></T></b> class is a special Blazor class that can be exposed as a Parameter so that components can easily notify consumers when something of interest has occurred.
    <b>Adding an event to the Counter component</b>
    <code>[Parameter]
        public EventCallback<int> OnMultipleOfThree { get; set; }    
    </code>
    and in IncrementCount method:
    <code>
        private async Task IncrementCount()
        {
            currentCount++;
            if (currentCount % 3 == 0)
                await OnMultipleOfThree.InvokeAsync(currentCount);
        }
    </code>
    <b>Subscribing to EventCallback< T ></b>
    <code>
        @page "/"
        Last multiple of three = @LastMultipleOfThree
        < Counter OnMultipleOfThree=@ UpdateLastMultipleOfThreeValue />
        @code
        {
            int LastMultipleOfThree = 0;
            private void UpdateLastMultipleOfThreeValue(int value)
            {
                LastMultipleOfThree = value;
            }
        } 
    </code>
</p> 
<h2><input type="button" value="-" style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" /> Blazor ,more..</h2>
<p>
    <b><a href='https://blazor-university.com/components/component-events/browser-dom-events/'>Browser DOM events list</a> </b>
    <b><a href='https://blazor-university.com/components/two-way-binding/'>Two-way binding</a></b>
    <b><a href='https://blazor-university.com/routing/'>routing</a></b>
    <b><a href='https://blazor-university.com/forms/'>Forms</a></b>
    <b><a href='https://blazor-university.com/component-libraries/'>Component libraries</a></b>
    <b><a href='https://blazor-university.com/javascript-interop/'>JavaScript interop</a></b>
    <b><a href='https://blazor-university.com/dependency-injection/'>Dependency injection</a></b>                
</p>

<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" /> MVC</h2>
<p>
<a href="https://www.yogihosting.com/aspnet-core-first-application/"></a>
</p>

<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" /> Web api</h2>
<p>
    <a href="https://www.c-sharpcorner.com/article/asp-net-core-5-0-web-api/">asp-net-core-5-0-web-api</a>
</p>

<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" /> gRPC</h2>
<p>
    <a href="https://www.yogihosting.com/grpc-aspnet-core/">grpc</a>
    https://blog.jetbrains.com/dotnet/2021/07/19/getting-started-with-asp-net-core-and-grpc/
</p>

<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" /> signalR</h2>   
<p>
    SignalR .Net Core is a popular open-source framework that helps developers to building real-time web applications. It allows the server to send asynchronous messages to connected clients. The first version was released by Microsoft in 2013 with the ASP.NET framework. The latest framework is based on the .Net Core eco system. In the article I will cover all the basics that will allow you to integrate this framework in your application.

    <b>What is SignalR?</b>
    SignalR is a framework that allows server to send instant content and notifications to the connected client applications. It is useful when the client requires heavy updates from server frequently like voting applications, gaming, social applications etc. It provides an API to create remote procedure calls in client server applications. The RPC calls call can be consumed by a variety of client types and languages. .
    
    SignalR has gained the popularity after the recent advancement in .NET core framework. This article will help you in creating a hub and implementing a client to establish the communication between the client and a server.
    
    <b>Features</b>
    Handles the connections between client and server automatically
    Can send the messages to all the connected clients simultaneously
    Allows the user to send and receive messages from the restricted group of clients only
    Helps in managing the increased traffic
    Supports more than one technique to support the communication between a client and server
    Choses the best technique atomically depending on the capabilities of server and a client
    <b>What are Transports?</b>
    Transports are used to handle the real time communications between server and a client. It handles the best transport method based on the capabilities of an application shared between two of them. Let us walk through the each type of Transports in brief detail:
    <b>Long Polling</b>
    In this type of transport, a new pipeline is opened up, typically called as AJAX call for the server to communicate for the possible future requests by the client. Whenever the sever wants to send a message to the client, it automatically uses the recent opened up Pipe to communicate with the client, and when the communication is completed, the connection is closed. For the subsequent communications, a client will have to reestablish the connection. In an ideal situation, when the server is continuously sending data, it will keep on reestablishing the connection but this process can bring an overhead on the sever.
    
    <b>Web Sockets</b>
    Web Sockets typically works on one to one connection between the client and the server. In this type of transport, the communication is made on the existing pipe, which is opened for the first time. In order to deploy web socket application on IIS, you need to have version 8 or greater as it cannot work on version 7 or older.
    
    <b>Server Sent Events (SSE)</b>
    In Server Sent Events, a server creates an object called as Event Source, which is a pipe for the client and every time a server needs to send a data, it uses the same pipe. It is supported on all the modern browsers except Internet Explorer.
    
    <b>Forever Frame (FF)</b>
    Forever Frame is only available on Internet Explorer only. In this type, an Iframe is created on the same page when the connection is established between the server and the client. The server will keep on using the same connection as the connection is always opened and never closed by the client.
    
    <b>What are Hubs?</b>
    Hubs provides a medium to communicate between a client and server in an application. It allows each other to send and receive data from each other. You can define methods on server side and client side called by each other and SignalR handles the execution of methods on the server sent by the client and vice versa. It allows you to pass messages by using the text based protocol JSON or the binary one i.e. MessagePack. MessagePack is generally smaller as compared to JSON.
    
    <b>How to create a SignalR Hub?</b>
    You can create a hub that can handle a communication between server and client. You must download SignalR module using a node package manager and copy signalr.js in your project.
    
    Let us take a .NET Core project and add a MyChatHub class, inherited from the SignalR Hub class. In this class, you need to create a method “SendMessage” and call the “ReceiveMessage” method of the connected client.
    <code>

    
    using Microsoft.AspNetCore.SignalR;
    using System.Threading.Tasks;
    
    namespace MyChatApp
    {
        public class MyChatHub : Hub
        {
            public async Task SendMessage(string userName, string chatMessage) 
            {
                await Clients.All.SendAsync("ReceiveMessage", userName, chatMessage);  
            }
        }
    } 
    </code>
    You can configure the hub class in the Startup class of the .Net project:
    <code>
    using Microsoft.AspNetCore.Builder;
    using Microsoft.AspNetCore.Hosting;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;
    using MyChatApp.Hubs;
    
    namespace MyChatApp
    {
        public class Startup
        {
            public Startup(IConfiguration configuration)
            {
                Configuration = configuration;
            }
    
            public IConfiguration Configuration { get; }
    
            // Use this method to add services to the container.
            public void ConfigureServices(IServiceCollection services)
            {
                services.AddRazorPages();
                services.AddSignalR();
            }
    
            //Use this method to configure the HTTP request pipeline.
            public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
            {
                if (env.IsDevelopment())
                {
                    app.UseDeveloperExceptionPage();
                }
                else
                {
                    app.UseExceptionHandler("/ErrorPage");
                    app.UseHsts();
                }
    
                app.UseHttpsRedirection();
                app.UseStaticFiles();
                app.UseRouting();
                app.UseAuthorization();
                app.UseEndpoints(endpoints =>
                {
                    endpoints.MapRazorPages();
                    endpoints.MapHub("/chatHub");
                });
            }
        }
    }    
    </code>
    
    Your main class will look like this:
    <code>
    namespace MyChatApp
    {
        public class Program
        {
            // This is the entry point when the application runs, it is called first 
            public static void Main(string[] args)
            {
                CreateHostBuilder(args).Build().Run();
            }
    
            public static IHostBuilder CreateHostBuilder(string[] args) =>
                Host.CreateDefaultBuilder(args)
                    .ConfigureWebHostDefaults(webBuilder =>
                    {
                        webBuilder.UseStartup();
                    });
        }
    }                    
    </code>

    In .NET Core SignalR application, you can use .NET client library to communicate with the server. Before implementing a client, you must have setup the hub class for the client and it must has a method which can be used from the JavaScript and the mapping of hub is also completed. In the Startup class of the .NET core project.
    
    Let us take the above example of MyChatHub class, in which you have a method SendMessage which will call the RecieveMessage method of the connected client. Therefore, you need to create a js file in your wwwroot/js folder and create that method in it.
    <code>
    const connection = new signalR.HubConnectionBuilder()  
        .withUrl("/myChatHub")  
        .build();  
        
    //This method will receive the message and add to our list  
    connection.on("ReceiveMessage", (userName, chatMessage) => {  
        const msg = message.replace(/&/g, "&").replace(/</g, "<").replace(/>/g, ">");  
        const encodedMsg = user + " :: " + msg;  
        const li = document.createElement("li");  
        li.textContent = encodedMsg;  
        document.getElementById("messagesList").appendChild(li);  
    });  
        
    connection.start().catch(err => console.error(err.toString()));  
        
    //Send the message  
    document.getElementById("sendMessage").addEventListener("click", event => {  
        const user = document.getElementById("userName").value;  
        const message = document.getElementById("userMessage").value;  
        connection.invoke("SendMessage", user, message).catch(err => console.error(err.toString()));  
        event.preventDefault();  
    });                      
    </code>
    
    Once the js code is written, you need to add the following code to the view:
    <code>
        < !DOCTYPE html>
        < html>
            < head>
                    < meta charset="utf-8" />
                    < meta name="viewport" content="width=device-width, initial-scale=1.0" />
                    < title>My Real Time Chat App < /title> 
            < /head>
        < body>
            < div class="container"> 
                < div class="row"> 
                    < div class="col-md-12"> 
                        < div class="col-md-6"> 
                            < div class="col-md-3">User< /div> 
                            < div class="col-md-9">< input type="text" id="userName" />< /div> 
                        < /div> 
                    < /div> 
                < div class="col-md-12"> 
                    < div class="col-md-6"> 
                        < div class="col-md-3">Message< /div> 
                                < div class="col-md-9"> 
                                    < input type="text" id="userMessage" /> 
                                    < input type="button" id="sendMessage" value="Send Message" /> 
                                < /div> 
                        < /div> 
                    < /div> 
            < /div> 
            < div class="row"> 
                    < div class="col-12"> 
                        < hr /> 
                    < /div> 
                < /div> 
                < div class="row"> 
                    < div class="col-6"> < /div> 
                    < div class="col-6"> 
                        < ul id="messagesList">< /ul> 
                    < /div> 
                < /div> 
    < /div> 
    < scrip t src="~/lib/signalr/signalr.js" &gt; &lt; // script > 
    < scri pt src="~/js/mychat.js" &gt; &lt; //script > 
    < //body>
    < //html>
    </code>

    <b>How to add Authentication and Authorization?</b>
    
    
    If you are creating a web application that requires authenticated users to access it, 
    then you need to add .NET Core authentication module to the application. 
    All the connections will be available to the authentic users.
    
    Here is the code of Startup class that configures the .NET core authentication in SignalR application:
    <code>
    public void Configure(IApplicationBuilder app)
    {
        // Your custom code here 
        
        app.UseStaticFiles();
        app.UseRouting();
        app.UseAuthentication();
        app.UseAuthorization();
    
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapHub("/chat");
            endpoints.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}");
        });
    }
    </code>
    <b> Authorization</b>
    
    In .NET Core SignalR application, all the methods are exposed to unauthenticated users. In order to apply the authentication filters, you can use [Authorize] attribute to the hub in an application.
    
    You can simply use the following code to achieve the authorization:
    <code>
    [Authorize]
    public class ChatHub: Hub
    {
            // Your code here
    }
</code>
    You can create a custom authorization policy and pass the policyname as an argument to the constructor of the attribute to apply it on the hub. The filter will ensure that the users that are matching with the policy will have access to it.
    <code> 
    [Authorize("AppAuthorizationPolicy")]
    public class ChatHub : Hub
    {
    }
</code>
    If you wish to apply policy to the restricted method, you can apply it on the individual method and the other methods will not be affected by the policy. Let us suppose you want to apply filter of admin users on a single method i.e. only admin users can have an access to the confidential information.
    <code>
    [Authorize]
    public class ChatHub : Hub
    {
        public async Task Send(string message)
        {
            // Your code here to send a message to all the users 
        }
    
        [Authorize("Admins")]
        public void ShowAllUsers(string departmentID)
        {
            // You code here to show the list of users from the chat room which is only visible to admin users
        }
    } 
</code>              
</p>   

<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" />Middleware</h2>
<div>
<b> What is Middleware</b>
Middleware is a software component that hooks into the request pipeline to handle web requests and generate responses.
Each middleware Process and manipulates the request as it is received from the previous middleware.
It may decide to call the next middleware in the pipeline or send the response back to the previous middleware ( terminating the pipeline )
</div>

<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" />Kestrel</h2>
<div>
<b>What is Kestrel?</b>
 is open-source, cross-platform, event-driven, asynchronous I/O based HTTP server.
 It is developed to host ASP.NET Core applications on any platform.
  It is included by default in the ASP.NET Core applications.
<b>Why Kestrel?</b>
The older ASP.NET applications are tightly coupled to the Internet Information Services or IIS.
The IIS is a complete web server with all the features that you require out of a Web Server.
 Over the period it has grown into a matured web server and along the way, it has added a lot of weight and bloat. 
 It has become one of the best Web servers around and at the same time, it is one of the slowest.
 ASP.NET being tightly coupled with IIS carried the burden of the IIS
 The newly designed ASP.NET Core applications are now completely decoupled from the IIS. 
 This decoupling makes ASP.NET Core run on any platform making it truly cross-platform
 But, it still needs to have the ability to listen to HTTP requests and send the response back to the Client. 
 That is where Kestrel comes in
 <b>Using Kestrel</b>
 The Kestrel runs in in-process in the ASP.NET Core Applications. 
 Hence, It runs independently of the environment in which it lives. 
 The kestrel Web server is available in the namespace Microsoft.AspNetCore.Server.Kestrel
 The Main method of the program,invokes CreateDefaultBuilder, which is responsible to create the web application host.
 It calls the UseKestrel method to registers the Kestrel as the server that will be used to host our application.
 <b>using kestrel Self Hosting</b>
 Under Sef Hosting model the ASP.NET Core applications directly listen to the HTTP Requests from the internet as shown in the image below.
 The following image shows how to use dotnet run cli command to start the kestrel web server. 
 To run all you need to do is to go to the project folder, where .csproj file is found and run the following command

 dotnet run
  
 The kestrel starts and listens on port 5000/5001.
<b>using kestrel Behind another Webserver</b>
Kestrel is not a fully-featured web server. But that is what makes it fast.

It is not advisable to run Kestrel as a standalone web server in the Production environment. 
It is recommended to run it behind a Fully Featured Web server like IIS, Nginx, Apache, etc. 
In such a scenario, the Web server acts as a reverse proxy server

The reverse proxy server takes the HTTP request from the internet and passes it to the kestrel server just the way it is received.

The IIS can take the HTTP request and perform some useful processing like 
logging, request filtering, URL rewrites before passing the request to Kestrel.
</div>

</body>
