<head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1' />
    <link rel='stylesheet' href='https://cdn.statically.io/gh/nhab/Blocks/20b5d959/blocks.css'>
    <script src='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js'></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/dark.min.css">
    <script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtonsToH(7);ReplaceLtGt();hljs.highlightAll();'>
<button onclick="toggleAll(this);" >-</button>
   

<h2>References</h2>
<div>
    <a href="https://www.grapecity.com/blogs/how-to-add-blazor-ui-controls-to-your-web-application">creating and using components</a>
    <a href="https://blog.logrocket.com/testing-in-blazor-a-tutorial/">tutorial</a>
    <a href="https://www.pragimtech.com/blog/blazor/create-asp.net-core-rest-api/">pragimtech</a>
</div>
<h2>What is ?</h2>
<div>
<p>
- Blazor is a Single Page Application framework for building interactive client-side web UI 
using C# instead of JavaScript,
sharing server-side and client-side app logic written in .NET.

It integrates with modern hosting platforms, such as Docker, 
and building hybrid desktop and mobile apps.  
- The name Blazor is a combination/mutation of the words Browser and Razor (the .NET HTML view generating engine).
<b>What is WebAssembly ?</b>
- An improvement to JavaScript
- A new language: 
WebAssembly code defines an AST (Abstract Syntax Tree) represented in a binary format. 
You can author and debug in a text format so it’s readable.
- Compile Target: 
A way for other languages to get first-class binary support across the entire web platform stack.

<b>Blazor hosting models</b>
Blazor currently has two hosting models:
  1- server-side Blazor 
    Blazor server-side pre-renders HTML content before it is sent to the client's browser. 
  2- Web Assembly : 
    Web Assembly runs on the client, inside the browser, so it can be deployed as static files. 
    it can be run as a Progressive Web App
</p>  
</div>
<h2>Blazor project structure</h2>
<div>
    <p><
    Program.cs 
    
    App.razor : the root component of the application
    
    wwwroot/index.html:is the root page in a Blazor WebAssembly project and is implemented as an html page.
    
    Startup.cs
        This file is present only in the Blazor Server project. 
        As the name implies it contains the applications's startup logic. 
         MainLayout component (MainLayout.razor)
   
    NavMenu component (NavMenu.razor)
    
    _Imports.razor
        This is like the _ViewImports.cshtml file in an asp.net core MVC project. 
        This file contains the common namespaces so we do not have to include them in every razor component.
    
    wwwroot   : contains the static files like images, stylesheets etc. 
    
    Pages       :
        This folder contains the _Host razor page and the routable components that make up the Blazor app.
        The components have the .razor extension.

        Index component (Index.razor) – Rendered when we navigate to the root application URL.
        Counter component (Counter.razor) – Rendered when we navigate to the path /counter.
        FetchData component (FetchData.razor) – Rendered when we navigate to the path /fetchdata.
        Error component (Error.razor) – Rendered when an unhandled exception occurs in the blazor app.
    
        Shared folder :it contains the shared components  
    
    Pages/_Host.cshtml
        This is the root page of the application and is specified by calling MapFallbackToPage("/_Host") method. 
        It is implemented as a razor page.
    
    appsettings.json (Blazor Server)
        Just like an asp.net core mvc project, a blazor project also uses this file to store the Configuration settings.  
    </p>
</div>

<h2>Creating a Blazor Server Application</h2>
 <div>
<p>
 1-<b>create boierplate project:</b>
Visual Studio -> Create a new project -> Type 'Blazor' and choose Blazor Server App.

2-Thw created project contains 2 Blazor <b>components</b> named:
 Counterand 
 FetchData
</p>
<h3>Blazor Component and how to create</h3>
<p>
A Blazor component is a self-contained part of UI 
typically defined in a .razor file using Razor syntax.

It defines UI event handlers, binds to input data, and maintains its state and rendering logic. 

To add a component to the project, 
right-click on the Pages folder > choose Add > Razor Component.
In the Add New Item dialog> provide the name EmployeeCard > click Add .the default code would be:
 </p>
 <pre><code>
    <h3>EmployeeCard</h3>
    @code{
    }
 </code></pre>
 <p>
 The generated code has 2 parts:
  - The upper part of the Blazor component represents the HTML template. 
  A single div tag with the component's name represents the template in this case. 

  -In the lower part of the Blazor component, we have a @code directive,
   which wraps the C# code for our Blazor component.

The Blazor Server App includes Bootstrap by default, 
so we will use the Bootstrap card and 
other HTML tags, i.e., img, H5, H6, etc., to define the component. 
The markup below defines the EmployeeCard component template:
</p>
<pre><code>
    < div class="card m-2">
        < div class="card-body">
            < div class="card-text text-center">
                < img class="card-img-top" src="@ThumbnailUrl" alt="Card image cap">
                < p>< /p>
                < h5>@Name< /h5>
            < /div>
            < div>
                < h6 class="card-text">< b>Name< /b>  : < small>John Maer< /small>< /h6>
                < h6 class="card-text">< b>Title< /b>: < small>Assistant Manager< /small> < /h6>
                < h6 class="card-text">< b>HireDate< /b>: < small>3/24/2015< /small>< /h6>
            < /div>
        < /div>
    < /div> 
</code></pre>
<p>
<b>Step 2: Define Parameters to Reuse the Blazor Component</b>
Parameters are defined as variables using the C# code in the @code section of the template.
 They are passed to the HTML elements using the @ symbol as depicted in the code below. 
 These parameters are placeholders for the actual values passed when consuming the component and binding it to data.
</p>
<pre><code>
@code {

    [Parameter]
    public string Name { get; set; }
    
    [Parameter]
    public string Title { get; set; }
    
    [Parameter]
    public string ThumbnailUrl { get; set; }
    
    [Parameter]
    public DateTime HireDate { get; set; }
    
}    
</code></pre>
<p>
we can replace these parameter instead of constant values in htm template part of the file.
<b>Step 3: Fetch and Display Employee Details</b>

The template is now ready to display the employee details. 
We can either add the component to a new razor component or 
add the route directives to the component itself to consume the EmpoyeeCard component. 
In this case, we will add a new Razor component by right-clicking on the Pages folder 
and choosing Add → Razor Component. 

Name the new component to be EmployeeCardDemo and add the route attribute to navigate to this page 
and view the EmployeeCard component in action.

We can add a Blazor component within another component,
 using an HTML tag with the component's name. 

In our case, < EmployeeCard>< /EmployeeCard> can be used to place our Blazor component within the EmployeeCardDemo Blazor Component.

Next, we have not hard-coded any values in the component template.
 Instead, we have used parameters as placeholders for actual values; 
 hence using the template will generate an empty component on the page.
When using the component to display the employee details, we must assign values to the parameters.
To accomplish the same, we will be fetching data from an XML file to create a list of employee details. 
We will then create a component for each employee and assign the employee details from the list to display each employee's details.

The code below showcases adding the route attributes to the new razor component (EmployeeCardDemo.razor),
 fetching the XML data to create an employee details list, and creating multiple components for displaying details of each employee:
</p>
<pre><code>
@page "/employeecarddemo"
 
< div class="container">
    < div class="row">
        @foreach (var employee in employeeList)
        {
            < div class="col-lg-4 mb-2">
                < EmployeeCard ThumbnailUrl=@employee.ThumbnailUrl Name=@employee.Name Title=@employee.Title HireDate=@employee.HireDate>< /EmployeeCard>
            < /div>
        }
    < /div>
< /div>
 
@code {
    private List< Employee> employeeList;
 
    protected override async Task OnInitializedAsync()
    {
        XmlRepository repository = new XmlRepository();
        employeeList = repository.GetEmployees();
    }
}
</code></pre>
The code snippet below depicts the implementation of XmlRepository class used to fetch data from XML files:
<pre><code>
public class XmlRepository
{
    private static List<Employee> _employeeList = new List<Employee>();
    private static List<Department> _departmentList = new List<Department>();
 
    public XmlRepository()
    {
        var assembly = typeof(XmlRepository).GetTypeInfo().Assembly;
 
        //TODO: add culture
        var stream = assembly.GetManifestResourceStream("BlazorDemo.Data.employees.xml");
 
        using (var reader = new System.IO.StreamReader(stream))
        {
            var serializer = new XmlSerializer(typeof(List<Employee>));
            _employeeList = (List<Employee>)serializer.Deserialize(reader);
        }
 
        var dstream = assembly.GetManifestResourceStream("BlazorDemo.Data.departments.xml");
 
        using (var reader = new System.IO.StreamReader(dstream))
        {
            var serializer = new XmlSerializer(typeof(List<Department>));
            _departmentList = (List<Department>)serializer.Deserialize(reader);
        }
    }
 
    public List<Employee> GetEmployees()
    {
        return _employeeList;
    }
 
    public List<Department> GetDepartments()
    {
        return _departmentList;
    }
 
    public Department GetDepartment(int index)
    {
        int realIndex = index - 1;
        if (_departmentList.Count > 0 && _departmentList.Count > realIndex)
            return _departmentList[realIndex];
        else
            return null;
    }
}
 
public class Employee
{
    public string Name { get; set; }
    public string Title { get; set; }
    public DateTime HireDate { get; set; }
    public double Status { get; set; }
    public string ThumbnailImage { get; set; }
    public string ThumbnailUrl
    {
        get
        {
            return "Employees/" + ThumbnailImage;
        }
    }
    public int DepartmentId { get; set; }
    public bool FullTime { get; set; }
}
 
public class Department
{
    public int Id { get; set; }
    public string Name { get; set; }
}
</code></pre>
Finally let's add the razor component route to NavMenu.razor (Shared → NavMenu.razor) file:
<pre><code>
<div class="nav-item px-3">
    <NavLink class="nav-link" href="employeecarddemo">
        <span class="oi oi-list-rich" aria-hidden="true"></span> Employee Card Demo
    </NavLink>
</div>     
</code></pre>
  
Step 4: Execute the Application to Observe the Results
</div>

 <h2>Adding Blazor Controls from NuGet</h2>
<div>
<p>
After understanding how to create and consume Blazor Components from scratch,
we will now see how we can work with advanced Blazor controls provided by third-party vendors,
 i.e., pre-defined Blazor components.

From the NuGet Package Manager menu, choose Manage NuGet Packages for Solution, 
search for C1.blazor.Grid which is ComponentOne Blazor grid control.  
</p>  

<h2>Blazor component example</h2>
<div>
    <pre><code>
        @page "/counter"
        <h1>Counter</h1>
        <p>Current count: @currentCount</p>
        <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
        @code 
        {
            private int currentCount = 0;
            private void IncrementCount()
            {
                currentCount++;
            }
        }       
    </code></pre>
    <p>
    <b>Nesting razor component</b> 
    A component can also be nested inside another component using HTML syntax.
     For example, use < Counter /> to nest the Counter component in the Index component.
    <b>split component HTML and C# code </b>
        Partial files approach
        Base class approach
    <b>Examples</b> 
    <b>Both the HTML markup and C# code are in a single file</b> 
</p>
    <pre><code>
        // Counter.razor
        @page "/counter"        
        < h1>Counter< /h1>       
        < p>Current count: @currentCount< /p>      
        < button class="btn btn-primary" @onclick="IncrementCount">Click me< /button>      
        @code {
            private int currentCount = 0;
        
            private void IncrementCount()
            {
                currentCount++;
            }
        }   
    </code></pre>
    <b>Partial files approach</b>
    <pre><code>
    // Counter.razor
    @page "/counter"
    < h1>Counter< /h1>
    < p>Current count: @currentCount< /p>
    < button class="btn btn-primary" @onclick="IncrementCount">Click me< /button>

    // CounterBase.cs

    public class CounterBase : ComponentBase
    {
        protected int currentCount = 0;

        protected void IncrementCount()
        {
            currentCount++;
        }
    }


// EmployeeList.razor
@page "/"
@inherits EmployeeListBase

< h3>Employee List< /h3>

< div class="card-deck">
    @foreach (var employee in Employees)
    {
    < div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
        < div class="card-header">
            < h3>@employee.FirstName @employee.LastName< /h3>
        < /div>
        < img class="card-img-top imageThumbnail" src="@employee.PhotoPath" />
        < div class="card-footer text-center">
            < a href="#" class="btn btn-primary m-1">View< /a>

            < a href="#" class="btn btn-primary m-1">Edit< /a>

            < a href="#" class="btn btn-danger m-1">Delete< /a>
        < /div>
    < /div>
    }
< /div>
 </code></pre>


</div>
</div>


