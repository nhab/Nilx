<html>
<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/css/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	

<h2><input type="button" value="-"
			style="font-size:20px;margin-right:5px;vertical-align: middle;"  
			onclick="toggle(this)" />Refrences</h2>
<div>
    <a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/hands-on-labs/aspnet-mvc-4-fundamentals">Main</a>
</div>
<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)" />what is an ASP.NET MVC 4 project</h2>
<div>
  Model View Controller (MVC), an architectural pattern that separates an application into three main components.  
</div> 

<h2>Creating the ASP.NET MVC Web Application Project</h2>
<div>

in visual studio > New Project > ASP.NET MVC 4 Web Application > Change the Name to MvcMusicStore
> select the Basic template and make sure that the View engine selected is Razor. Click OK.
</div>
<h2>Adding a HomeController</h2>
<div>
    ASP.NET MVC framework maps URLs to classes that are referred to as controllers. Controllers process incoming requests,
     handle user input and interactions, execute appropriate application logic 
    and determine the response to send back to the client (display HTML, download a file, redirect to a different URL, etc.). 

    Right-click Controllers folder within the Solution Explorer > select Add and then Controller command >
    The Add Controller dialog appears. Name the controller HomeController and press Add.
    The file HomeController.cs is created in the Controllers folder.
    In order to have the HomeController return a string on its Index action, replace the Index method with the following code:
    <pre><code>
    public string Index()
    {
        return "Hello from Home";
    }
    </code></pre>
    now you can run the project amd see the "Hello from Home" message on the page.
</div>

<h2>Passing parameters to a Controller</h2>
<div>
    Add this code to the controller
    <pre><code>
        // GET: /Store/Browse?genre=Disco   
        public string Browse(string genre)
        {
          string message = HttpUtility.HtmlEncode("Store.Browse, Genre = " + genre);
        
          return message;
        }
    </code></pre>
</div>

<h2><b>Creating a View</b></h2>
<h2>Modifying the file _layout.cshtml</h2>
<div>
    The file ~/Views/Shared/_layout.cshtml allows you to setup a template for common HTML to use across the entire website:
    <pre><code>
        < !DOCTYPE html>
        < html>
        < head>
             < meta charset="utf-8" />
             < meta name="viewport" content="width=device-width" />
             < title>@ViewBag.Title< /title>
             @Styles.Render("~/Content/css")
             @Scripts.Render("~/bundles/modernizr")
        < /head>
        < body>
             @RenderBody()
        
             @Scripts.Render("~/bundles/jquery")
             @RenderSection("scripts", required: false)
        < /body>
        < /html>
    </code></pre>
    change it to:
    <pre><code>
        ...
        < body>
             < header>
                  < div class="content-wrapper">
                        < div class="float-left">
                             < p class="site-title">@Html.ActionLink("ASP.NET MVC Music Store", "Index", "Home")< /p>
                        < /div>
                        < div class="float-right">
                             < nav>
                                  < ul id="menu">
                                         li>@Html.ActionLink("Home", "Index", "Home")< /li>
                                        < li>@Html.ActionLink("Store", "Index", "Store")< /li>
                                  < /ul>
                             < /nav>
                        < /div>
                  < /div>
             < /header>
             < div id="body">
                  @RenderSection("featured", required: false)
                  < section class="content-wrapper main-content clear-fix">
                        @RenderBody()
                  < /section>
             < /div>
             ...
        < /body>
        < /html>     
    </code></pre>
</div>

<h2> Adding View Template</h2>
<div>
    To use a View template when browsing the site's home page, you will first need to indicate that instead of returning a string,
     the HomeController Index method will return a View. 
    <pre><code>
        public class HomeController : Controller
        {
            //
            // GET: /Home/
        
            public ActionResult Index()
            {
                return this.View();
            }
        }
    </code></pre>
    Now, you need to add an appropriate View template. To do this, right-click inside the Index action method and select Add View.
     This will bring up the Add View dialog.

     The generated View template is based on the _layout.cshtml template earlier defined. Update the ViewBag.
     Title property to Home, and change the main content to This is the Home Page, as shown in the code below:
<pre><code>
    @{
        ViewBag.Title = "Home";
    }
    
    < h2>This is the Home Page< /h2>  
</code></pre>
</div>

<h2><b>Creating a View Model</b></h2>
<h2>Creating a ViewModel Class</h2>
<div>
1-Create a ViewModels folder in the solution.
2-under the folder,add the class: StoreIndexViewModel.cs
3-Add properties to the class:
<pre><code>
    public class StoreIndexViewModel
    {
        public int NumberOfGenres { get; set; }
    
        public List<string> Genres { get; set; }
    }
</code></pre>
</div>
<h2>Updating StoreController to use the StoreIndexViewModel</h2>
<div>
1-Open StoreController class.
2-Change the index method:
<pre><code>
    public ActionResult Index()
    {
        // Create a list of genres
        var genres = new List<string> {"Rock", "Jazz", "Country", "Pop", "Disco"};
    
        // Create our view model
        var viewModel = new StoreIndexViewModel { 
            NumberOfGenres = genres.Count(),
            Genres = genres
        };
    
        return this.View(viewModel);
    }
</code></pre>
</div>
<h2>Using the viewModel in a view</h2>
<div>
1-Create a new View template: To do that, right-click inside the Index method and select Add View.
2-Because the Add View Dialog was invoked from the StoreController, 
it will add the View template by default in a \Views\Store\Index.cshtml file. 
Check the Create a strongly-typed-view checkbox and then select StoreIndexViewModel as the Model class. 
Also, make sure that the View engine selected is Razor. Click Add.

The \Views\Store\Index.cshtml View template file is created and opened. 
Based on the information provided to the Add View dialog in the last step, 
the View template will expect a StoreIndexViewModel instance as the data to use to generate an HTML response.
 You will notice that the template inherits a ViewPage< musicstore.viewmodels.storeindexviewmodel > in C#.

3-In the Index.cshtml file, within the Store folder, replace its code with the following:
<pre><code>
@model MvcMusicStore.ViewModels.StoreIndexViewModel

@{
    ViewBag.Title = "Browse Genres";
}

< h2>Browse Genres< /h2>

< p>Select from @Model.NumberOfGenres genres< /p>
< ul>
    @foreach (string genreName in Model.Genres)
    {
        < li>
            @genreName
        < /li>
    }
< /ul>
</code></pre>
</div>
<h2>other things</h2>
<div>
	Converting razor page model into javascript object
	<pre><code>
		@model ...
@using Newtonsoft.Json

...

< script type="text/javascript">

    var data = @Html.Raw(JsonConvert.SerializeObject(this.Model));

< /script>
</code></pre></div>
