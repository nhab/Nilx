<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/nhab/assets/css/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
<button onclick='toggleAll(this);'>-</button>

<h2>Resources</h2>
<div>
    <a href="https://learn.microsoft.com/en-us/aspnet/core/performance/caching/distributed?view=aspnetcore-7.0">Distributed caching in ASP.NET Core</a>
    Additional resources
    Redis Cache on Azure
    SQL Database on Azure
    ASP.NET Core IDistributedCache Provider for NCache in Web Farms (NCache on GitHub)
    Cache in-memory in ASP.NET Core
    Detect changes with change tokens in ASP.NET Core
    Response caching in ASP.NET Core
    Response Caching Middleware in ASP.NET Core
    Cache Tag Helper in ASP.NET Core MVC
    Distributed Cache Tag Helper in ASP.NET Core
    Host ASP.NET Core in a web farm
</div>
<h2>What is?</h2>
<div>
- is a cache shared by multiple app servers, 
- typically maintained as an external service to the app servers that access it. 
     
- can improve the performance and scalability of an ASP.NET Core app, 
   especially when the app is hosted by a cloud service or a server farm.

- has several advantages over other caching scenarios 
   where cached data is stored on individual app servers.

- When cached data is distributed, the data:   
<pre>
    . Is coherent (consistent) across requests to multiple servers.
    . Survives server restarts and app deployments.
    . Doesn't use local memory.
</pre>

- Distributed cache configuration is implementation specific
    (i.e. SQL Server, Redis,and NCache on GitHub). 

- Regardless of which implementation is selected, 
    the app interacts with the cache using the <i>IDistributedCache</i> interface.
</div>
    
<h2>Prerequisites</h2>
  <div>
- Add a nuget package reference for the distributed cache provider used :
<pre>
    . For a <i>Redis</i> distributed cache, <i>Microsoft.Extensions.Caching.StackExchangeRedis</i>.
    . For <i>SQL Server</i>, <i>Microsoft.Extensions.Caching.SqlServer</i>.
    . For the <i>NCache</i> distributed cache, <i>NCache.Microsoft.Extensions.Caching.OpenSource</i> .   
</pre>
</div>

<h2>IDistributedCache interface</h2>
<div>
The IDistributedCache interface provides the following methods to manipulate items in the distributed cache implementation:
<pre>
    . <b>Get, GetAsync</b>:
      Accepts a string key and retrieves a cached item as a byte[] array if found in the cache.

    . <b>Set, SetAsync</b>: 
      Adds an item (as byte[] array) to the cache using a string key.

    . <b>Refresh, RefreshAsync</b>: 
      Refreshes an item in the cache based on its key, resetting its sliding expiration timeout (if any).

    . <b>Remove, RemoveAsync</b>: 
      Removes a cache item based on its string key.
</pre>

</div>

<h2>Establish distributed caching services</h2>
<div>
- Register an implementation of <b>IDistributedCache</b> in Program.cs.
- Framework-provided implementations described in this topic include:
<pre>
    Distributed Redis cache
    Distributed Memory Cache
    Distributed SQL Server cache
    Distributed NCache cache    
</pre>

</div>

<h2>Distributed Redis Cache</h2>
<div>
- We recommend production apps use the Distributed Redis Cache because it's the most performant.

- Redis is an open source in-memory data store, which is often used as a distributed cache.

- You can configure an Azure Redis Cache for an Azure-hosted ASP.NET Core app,
  and use an Azure Redis Cache for local development.

- An app configures the cache implementation using a <b>RedisCache</b> instance (AddStackExchangeRedisCache).
<pre>
1.Create an Azure Cache for Redis.

2.Copy the Primary connection string (<b>StackExchange.Redis</b>) to Configuration.

    <b>Local development:</b> Save the connection string with Secret Manager.
    <b>Azure: </b>Save the connection string in the App Service Configuration or another secure store.
</pre>
The following code enables the Azure Cache for Redis:
<pre><code>
 builder.Services.AddStackExchangeRedisCache(options =>
 {
     options.Configuration = builder.Configuration.GetConnectionString("MyRedisConStr");
     options.InstanceName = "SampleInstance";
 });   
</code></pre>
The preceding code assumes the Primary connection string (StackExchange.Redis) 
was saved in configuration with the key name MyRedisConStr.

</div>
 <h2>Distributed Memory Cache</h2>
 <div>

The Distributed Memory Cache (AddDistributedMemoryCache) is a framework-provided implementation of IDistributedCache that stores items in memory. 
The Distributed Memory Cache isn't an actual distributed cache. Cached items are stored by the app instance on the server where the app is running.

The Distributed Memory Cache is a useful implementation:
<pre>
    . In development and testing scenarios.
    . When a single server is used in production and memory consumption isn't an issue. 
    . Implementing the Distributed Memory Cache abstracts cached data storage.
        It allows for implementing a true distributed caching solution in the future
        if multiple nodes or fault tolerance become necessary.
        
The sample app makes use of the Distributed Memory Cache when
    the app is run in the Development environment in Program.cs:
</pre>
<pre><code>
builder.Services.AddDistributedMemoryCache();
</code></pre>
</div>     
     
<h2>Distributed SQL Server Cache</h2>
 <div>
The Distributed SQL Server Cache implementation (AddDistributedSqlServerCache)
allows the distributed cache to use a SQL Server database as its backing store.
 To create a SQL Server cached item table in a SQL Server instance, 
you can use the sql-cache tool.
 The tool creates a table with the name and schema that you specify.

Create a table in SQL Server by running the sql-cache create command. 
Provide the SQL Server instance (Data Source), database (Initial Catalog), 
     schema (for example, dbo), and table name (for example, TestCache):
<pre><code>
//.NET CLI

dotnet sql-cache create "Data Source=(localdb)/MSSQLLocalDB;Initial Catalog=DistCache;Integrated Security=True;" dbo TestCache

//Table and index were created successfully.
</code></pre>
    
- An app should manipulate cache values using an instance of IDistributedCache, not a SqlServerCache.

The sample app implements SqlServerCache in a non-Development environment in Program.cs:
<pre><code>
builder.Services.AddDistributedSqlServerCache(options =>
{
    options.ConnectionString = builder.Configuration.GetConnectionString(
        "DistCache_ConnectionString");
    options.SchemaName = "dbo";
    options.TableName = "TestCache";
});
 </code></pre>
- A ConnectionString (and optionally, SchemaName and TableName) 
     are typically stored outside of source control 
     (for example, stored by the Secret Manager or in appsettings.json/appsettings.{Environment}.json files).
  The connection string may contain credentials that should be kept out of source control systems.
    </div>
<h2>Other things</h2>
<div>

Distributed NCache Cache
NCache is an open source in-memory distributed cache developed natively in .NET and .NET Core. NCache works both locally and configured as a distributed cache cluster for an ASP.NET Core app running in Azure or on other hosting platforms.

To install and configure NCache on your local machine, see Getting Started Guide for Windows (.NET and .NET Core).

To configure NCache:

Install NCache open source NuGet.
Configure the cache cluster in client.ncconf.
Add the following code to Program.cs:
C#

Copy
builder.Services.AddNCacheDistributedCache(configuration =>
{
    configuration.CacheName = "democache";
    configuration.EnableLogs = true;
    configuration.ExceptionsEnabled = true;
});
Use the distributed cache
To use the IDistributedCache interface, request an instance of IDistributedCache in the app. The instance is provided by dependency injection (DI).

When the sample app starts, IDistributedCache is injected into Program.cs. The current time is cached using IHostApplicationLifetime (for more information, see Generic Host: IHostApplicationLifetime):

C#

Copy
app.Lifetime.ApplicationStarted.Register(() =>
{
    var currentTimeUTC = DateTime.UtcNow.ToString();
    byte[] encodedCurrentTimeUTC = System.Text.Encoding.UTF8.GetBytes(currentTimeUTC);
    var options = new DistributedCacheEntryOptions()
        .SetSlidingExpiration(TimeSpan.FromSeconds(20));
    app.Services.GetService<IDistributedCache>()
                              .Set("cachedTimeUTC", encodedCurrentTimeUTC, options);
});
The sample app injects IDistributedCache into the IndexModel for use by the Index page.

Each time the Index page is loaded, the cache is checked for the cached time in OnGetAsync. If the cached time hasn't expired, the time is displayed. If 20 seconds have elapsed since the last time the cached time was accessed (the last time this page was loaded), the page displays Cached Time Expired.

Immediately update the cached time to the current time by selecting the Reset Cached Time button. The button triggers the OnPostResetCachedTime handler method.

C#

Copy
public class IndexModel : PageModel
{
    private readonly IDistributedCache _cache;

    public IndexModel(IDistributedCache cache)
    {
        _cache = cache;
    }

    public string? CachedTimeUTC { get; set; }
    public string? ASP_Environment { get; set; }

    public async Task OnGetAsync()
    {
        CachedTimeUTC = "Cached Time Expired";
        var encodedCachedTimeUTC = await _cache.GetAsync("cachedTimeUTC");

        if (encodedCachedTimeUTC != null)
        {
            CachedTimeUTC = Encoding.UTF8.GetString(encodedCachedTimeUTC);
        }

        ASP_Environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
        if (String.IsNullOrEmpty(ASP_Environment))
        {
            ASP_Environment = "Null, so Production";
        }
    }

    public async Task<IActionResult> OnPostResetCachedTime()
    {
        var currentTimeUTC = DateTime.UtcNow.ToString();
        byte[] encodedCurrentTimeUTC = Encoding.UTF8.GetBytes(currentTimeUTC);
        var options = new DistributedCacheEntryOptions()
            .SetSlidingExpiration(TimeSpan.FromSeconds(20));
        await _cache.SetAsync("cachedTimeUTC", encodedCurrentTimeUTC, options);

        return RedirectToPage();
    }
}
There's no need to use a Singleton or Scoped lifetime for IDistributedCache instances with the built-in implementations.

You can also create an IDistributedCache instance wherever you might need one instead of using DI, but creating an instance in code can make your code harder to test and violates the Explicit Dependencies Principle.

Recommendations
When deciding which implementation of IDistributedCache is best for your app, consider the following:

Existing infrastructure
Performance requirements
Cost
Team experience
Caching solutions usually rely on in-memory storage to provide fast retrieval of cached data, but memory is a limited resource and costly to expand. Only store commonly used data in a cache.

For most apps, a Redis cache provides higher throughput and lower latency than a SQL Server cache. However, benchmarking is recommended to determine the performance characteristics of caching strategies.

When SQL Server is used as a distributed cache backing store, use of the same database for the cache and the app's ordinary data storage and retrieval can negatively impact the performance of both. We recommend using a dedicated SQL Server instance for the distributed cache backing store.
</div>
