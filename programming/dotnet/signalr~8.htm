<html>
<head> 
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="stylesheet" href="/nhab/assets/css/blocks.css">	
	<script src='/nhab/assets/js/blocks.js'></script>
	<link rel="stylesheet" href="/nhab/libs/highlight/androidstudio2.css">
    <script src="/nhab/libs/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad()</script>
</head>
<body>
<button onclick="toggleAll(this);" >-</button>
<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
        onclick="toggle(this)" />References</h2>
<div>
<a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-6.0&tabs=visual-studio">Get started with ASP.NET Core SignalR</a>
</div>
<h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
        onclick="toggle(this)" />What is SignalR</h2>
<div>
- Using SignalR, server-side code, that can change the content of a web page without needing to referesh the page.
- SignalR provides an API for creating server-to-client remote procedure calls (RPC) 
that call JavaScript code in the client browsers (and other client platforms) from server-side .NET code. 
- SignalR also includes an API for connection management (for instance, connect and disconnect events), and grouping connections.
- SignalR can be used to add any sort of "real-time" web functionality to your ASP.NET application. 
</div>

<h2><h2><input type="button" value="-"
    style="font-size:20px;margin-right:5px;vertical-align: middle;"  
        onclick="toggle(this)" />SignalR Hub</h2>
<div>
SignalR uses hubs to communicate between clients & servers. 
Hub is a component that is hosted in your ASP.NET Core Application. 
Hub sends messages to & receives messages from the client using a remote procedure call using underlying transport. 
Essentially SignalR Hub is a central point in the ASP.NET Core and 
this hub is responsible for routing all the communication messages in the ASP.NET Core C# application

A combination of hub & remote procedure calls enables real-time web applications using SignalR in ASP.NET Core.
Hub in ASP.NET Core application is a class derived from the hub base class.    
</div>

<h2>Getting started</h2>
<div>
To develop SignalR Application, we need 2 things in our Application. 
<p>
   - HUB Class  ( Server side )
   - SignalR Clients ( Client side )    
</p>
For .NET,  we have 2 clients that is (jQuery client and  have ASP.NET client).

To work with signalR:

<b>Creating SignalR Server Application:</b>
1 - Open vs and Create a new Web Project in Console Application.
2 - go to the Tool and install SignalR from NuGet Package.
    You will find references and a Hub class also in the project.
3 - Now, we can call the SignalR Hub methods from .NET client. 
    we can create a method in the hub and consume this method in the .NET client.
<pre><code>
    using System;  
    using System.Collections.Generic;  
    using System.Linq;  
    using System.Text;  
    using System.Threading.Tasks;  
    using Microsoft.AspNet.SignalR;  
    using Microsoft.AspNet.SignalR.Hubs;  
      
    namespace SignalRHost  
    {  
        [HubName("MyHub")]  
        public class MyHub:Hub  
        {  
            public string getdetails( string s)  
            {  
                return "Hi" + s;  
            }  
        }  
    }  
</code></pre>
4 - we need to host the signalR Hub. 
    It will add a startup.cs class or you can add a startup class and configure the SignalR hub.
5 - To enable SignalR in your Application, create a class called Startup with the code given below.
<pre><code>
using System;  
using System.Threading.Tasks;  
using Microsoft.Owin;  
using Owin;  
    
[assembly: OwinStartup(typeof(SignalRHost.Startup))]  
    
namespace SignalRHost  
{  
    public class Startup  
    {  
        public void Configuration(IAppBuilder app)  
        {  
            app.MapSignalR();  
            // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=316888  
        }  
    }  
}      
</code></pre>
Now, open the main method of the console Application and write the code given below to host the Hub.
<pre><code>
using System;  
using System.Collections.Generic;  
using System.Linq;  
using System.Text;  
using System.Threading.Tasks;  
using Microsoft.AspNet.SignalR;  
using Microsoft.AspNet.SignalR.Hubs;  
using Microsoft.AspNet.SignalR.Client;  
using Microsoft.Owin.Hosting;  
    
namespace SignalRHost  
{  
    class Program  
    {  
        static void Main(string[] args)  
        {  
            string url = "http://localhost:8077";  
            using (WebApp.Start(url))  
            {  
                Console.WriteLine("Server running on {0}", url);  
                Console.ReadLine();  
            }  
            System.Console.Read();  
        }  
    }  
}      
</code></pre>

6 - In this way, we can host our Application, using self Hosting. 
Now, SignalR Service is available in "http://localhost:8077".

<b>Creating consumer client Application:</b>
Now, let's create another Web client Application and try to consume the Hub Method. 
Create another application and add signalR .NET client, as shown below.

7 - Now, there are simple 5 steps to consume the method hosted in the Hub:
    - Establish a connection with the URL, where the Hub is hosted.
    - Create a proxy of the Hub.
    - Open the connection.
    - Using the proxy object, call the method, which you want to invoke.
    - Save the result and display in the client Application.
<pre><code>
using Microsoft.AspNet.SignalR.Client;  
using System;  
using System.Collections.Generic;  
using System.Linq;  
using System.Web;  
using System.Web.UI;  
using System.Web.UI.WebControls;  
    
namespace SignalRChat  
{  
    public partial class chat : System.Web.UI.Page  
    {  
        public  HubConnection hubConnection = null;  
        public  IHubProxy HubProxy=null;  
        protected void Page_Load(object sender, EventArgs e)  
        {  
        }  
    
        protected void Button_Click(object sender, EventArgs e)  
        {  
            hubConnection = new HubConnection("http://localhost:8077/");  
                
            HubProxy = hubConnection.CreateHubProxy("MyHub");  
            hubConnection.Start();  
            Execute();  
    
            var p = HubProxy.Invoke<string>("getdetails", "Debendra").Result;  
            ClientScript.RegisterStartupScript(this.GetType(), "myalert", "alert('" + p + "');", true);  
        }  
    
        private void Execute()  
        {  
            hubConnection.Start().ContinueWith(task =>  
            {  
                if (task.IsFaulted)  
                {  
                    Console.WriteLine("There was an error opening the connection:{0}",  task.Exception.GetBaseException());  
                    return;  
                }  
                else  
                    Console.WriteLine("Connected to Server.The ConnectionID is:" + hubConnection.ConnectionId);  
            }).Wait();  
        }  
    }  
}  
</code></pre>
</div>

</body>