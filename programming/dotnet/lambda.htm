<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	

<h2>Lambda expression</h2>
<div>
	- Are how anonymous functions are created. 
	- Are anonymous functions that contain expressions or sequence of operators.
	- All lambda expressions use the lambda operator =>, that can be read as  “becomes”. 
	- The left side of the operator specifies the input parameters 
	- The right side holds an expression or a code block that works with the entry parameters. 
</div>
<h2>Example Expressions</h2>
<pre><code>
	Parameter => expression
	Parameter-list => expression
	Count => count + 2;
	Sum => sum + 2;
	n => n % 2 == 0
</code></pre>
<h2>Example code</h2>
<pre><code class="language-csharp">
	List<int> list = new List<int>() { 1, 2, 3, 4, 5, 6 };  
	List<int> evenNumbers = list.FindAll(x => (x % 2) == 0);  
  
  	foreach (var num in evenNumbers)  
	{  
	            Console.Write("{0} ", num);  
	 }  
</code></pre>
<h2>Example code 2</h2>
<pre><code>
	List<Dog> dogs = new List<Dog>() 
	{   
	            new Dog { Name = "Rex", Age = 4 },  
	            new Dog { Name = "Sean", Age = 0 },  
	            new Dog { Name = "Stacy", Age = 3 }  
	};  
	var names = dogs.Select(x => x.Name);  
	foreach (var name in names)  
	             Console.WriteLine(name);  
</code></pre>
<h2>Example code of Using Lambda Expressions with Anonymous Types</h2>
<pre><code>
	using System;  
	using System.Collections.Generic;  
	using System.Linq;  
	class Dog  
	{  
	   public string Name { get; set; }  
	   public int Age { get; set; }   
	}    
	class demo{  
	   static void Main()  
	   {  
	      List<Dog> dogs = new List<Dog>() {   
	         new Dog { Name = "Rex", Age = 4 },  
	         new Dog { Name = "Sean", Age = 0 },  
	         new Dog { Name = "Stacy", Age = 3 }  
	      };  
	      var newDogsList = dogs.Select(x => new { Age = x.Age, FirstLetter = x.Name[0] });  
	      foreach (var item in newDogsList)  
	      {   
	         Console.WriteLine(item);  
	      }   
	      Console.Read();  
	   }  
	} 

Sorting using a lambda expression 
	var sortedDogs = dogs.OrderByDescending(x => x.Age);  
	foreach (var dog in sortedDogs)   
	{  
	   Console.WriteLine(string.Format("Dog {0} is {1} years old.", dog.Name, dog.Age));  
	}  
</code></pre>
