<!DOCTYPE html>
<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/css/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	
<h2>Fundamentals of Logging in .NET Core</h2>
<div>
<h3>.NET Extensions</h3>
.NET Extensions are sets of APIs for commonly used programming patterns and utilities which are not provided in the core of .net,
such as dependency injection, logging, and app configuration.
All the extensions are included under the <cli>Microsoft.Extensions </cli> namespace.
You can find all built-in and third party extensions at <cli>nuget.org/packages.</cli>

<h3>The Logging API</h3>
The Logging API is included in the <cli>Microsoft.Extensions.Logging</cli> package. 
The Logging API does not work as standalone. 
It works with one or more logging providers that store or display logs to a particular medium such as Console, Debug, TraceListeners etc.

So, there are two important building blocks for implementing logging in a .NET Core based application:
<cl>
Logging API
Logging Providers
</cl>
The most important interfaces are:
<cl>
    ILogger    
    ILoggerFactory
    ILoggerProvider interfaces
</cl>    
The most important classs is :    
<cl>LoggerFactory </cl>
</div>
<h2>various logging framework</h2>    
<div>
    elmah.io,  NLog, Serilog, Loggr, Log4Net, and others
</div>
<h2>Console Logging Provider</h2>
<div>
- The <cli> Microsoft.Extensions.Logging.Console</cli> package includes logging classes which send log output to the console.
- The <cli> ConsoleLogger </cli> implements ILogger
- The <cli> ConsoleLoggingProvider</cli> implements ILoggingProvider
- The <cli> ConsoleLoggerExtensions</cil> class includes extension method AddConsole(), which adds a console logger to the LoggerFactory.
- To add it to your project :
<cl>
PM> Install-Package Microsoft.Extensions.Logging
PM> Install-Package Microsoft.Extensions.Logging.Console
</cl>
<h3>Example of Logging in .NET Core Console App</h3>
<cl>
static void Main(string[] args)
{
    ILoggerFactory loggerFactory = new LoggerFactory().AddConsole(); // or ILoggerFactory loggerFactory = new LoggerFactory([]{ new ConsoleLoggerProvider((_, __) => true,true)});               
    ILogger logger = loggerFactory.CreateLogger<Program>();
    logger.LogInformation("This is log message.");
}
// As you see at example,the LoggerFactory can contain one or more logging providers, 
// which can be used to log to multiple mediums concurrently. 
// The constructor of the LoggerFactory accepts an array of different logger provider objects as new[] { }.
// We don't want to filter any information so the lambda expression would always return true (_, __) => true    
// To add a console logger provider to the LoggerFactory, just call the LoggerFactory.AddConsole() extension method with the same parameters
</cl>
</cl>
Output:
<cl>
    info: DotnetCoreConsoleApp.Program[0]
    This is log message.
</cl>
</div>
<h2>Log Levels</h2>
<div>
    Log levels indicate the importance or severity of log messages. Built-in log providers include extension methods to indicate log levels.

    The following table lists log levels in .NET Core.
    <table style="border-size:1;">

        <tr>            <td>Log Level</td><td>Severity</td><td>Extension Method	</td><td>Description</td>	</tr>	
         <tr>          <td>Trace</td><td>0</td><td>LogTrace()</td><td>Logs messages only for tracing purposes for the developers.</td>		</tr>
           <tr>         <td>Debug</td><td>1</td><td>LogDebug()</td><td>Logs messages for short-term debugging purposes.</td>	</tr>		
        <tr>           <td>Information</td><td>2</td><td>LogInformation()</td><td>	Logs messages for the flow of the application.</td>	</tr>	
        <tr>           <td>Warning</td><td>3</td><td>LogWarning()</td><td>Logs messages for abnormal or unexpected events in the application flow.</td></tr>			
      <tr>             <td>Error</td><td>4</td><td>LogError()</td><td>	Logs error messages.</td>		</tr>
       <tr>            <td>Critical</td><td>5</td><td>LogCritical()</td><td>	Logs failures messages that require immediate attention.</td>		</tr>
        </tr>
    </table>
Example:
<cl>
static void Main(string[] args)
{
    ILoggerFactory loggerFactory = new LoggerFactory().AddConsole((_, __) => true);
    ILogger logger = loggerFactory.CreateLogger<Program>();

    logger.LogInformation("Logging information.");
    logger.LogCritical("Logging critical information.");
    logger.LogDebug("Logging debug information.");
    logger.LogError("Logging error information.");
    logger.LogTrace("Logging trace");
    logger.LogWarning("Logging warning.");
}  
</cl>    
</div>
<h2>Using logging in .net</h2>
<div>
create your project and add logging functionality:
<cl>
public static void Main(string[] args)
{
    CreateWebHostBuilder(args).Build().Run();
}
public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
    WebHost.CreateDefaultBuilder(args)
    .ConfigureLogging(logBuilder =>
    {
        logBuilder.ClearProviders(); // removes all providers from LoggerFactory
        logBuilder.AddConsole();  
        logBuilder.AddTraceSource("Information, ActivityTracing"); // Add Trace listener provider
    })
    .UseStartup<Startup>();
</cl>
<h3>Store Logs in a Text File</h3>
Startup.cs example:
<cl>
public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) 
{
    // other code remove for clarity 
    loggerFactory.AddFile("Logs/mylog-{Date}.txt");
}    
</cl>
<h3>Create Logs in the Controller</h3>
<cl>
public class HomeController : Controller
{
    private readonly ILogger _logger;

    public HomeController(ILogger<HomeController> logger){
        _logger = logger;
    }
    //or :
    // public HomeController(ILoggerFactory logFactory) 
    //{
    //    _logger = logFactory.CreateLogger<HomeController>();
    //}
    
    public IActionResult Index()
    {
        _logger.LogInformation("Log message in the Index() method");

        return View();
    }

    public IActionResult About()
    {
        _logger.LogInformation("Log message in the About() method");
        
        return View();
    }    
}
</cl>
</div>
