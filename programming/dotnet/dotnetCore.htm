<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.statically.io/gh/nhab/Blocks/20b5d959/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	
<h2 style="display:flex">Resorces</h2>
<p>
</p>

<h2><input type="button" value="-" style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)"/>Entity Framework (EF) Core</h2>
<div>
<pre>
<code>
public class SchoolContext : DbContext
 {
      public DbSet Students { get; set; }
      public DbSet Courses { get; set; }
      protected override void OnConfiguring( DbContextOptionsBuilder optionsBuilder)     
      {
        optionsBuilder.UseSqlServer(@"Server=.\SQLEXPRESS;Database=SchoolDB;Trusted_Connection=True;");
      }
}
</code>
</pre>

Using:
<pre>
<code>
    using (var context = new SchoolContext()) {

        var std = new Student()
        {
             Name = "Bill"
        };

        context.Students.Add(std);
        context.SaveChanges();
    }
</code>
</pre>
</div>

<h2><input type="button" value="-" style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)"/>Identity Core:</h2>
<div>
<pre>
<code>
    private async Task CreateUserRoles(IServiceProvider serviceProvider) 
        { 
            var RoleManager = serviceProvider.GetRequiredService<RoleManager<IdentityRole>>(); 
            var UserManager = serviceProvider.GetRequiredService<UserManager<ApplicationUser>>(); 
 
            IdentityResult roleResult; 
            //Adding Admin Role 
            var roleCheck = await RoleManager.RoleExistsAsync("Admin"); 
            if (!roleCheck) 
            { 
                //create the roles and seed them to the database 
                roleResult = await RoleManager.CreateAsync(new IdentityRole("Admin")); 
            } 
 //Assign Admin role to the main User here we have given our newly registered  
 //login id for Admin management 
            ApplicationUser user = await UserManager.FindByEmailAsync("syedshanumcain@gmail.com"); 
            var User = new ApplicationUser();  
            await UserManager.AddToRoleAsync(user, "Admin"); 
        }
 
</code>
</pre>
</div>
<h2><input type="button" value="-" style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)"/>MVC Core </h2>
<div>
<pre>
<code>
    <b></b>Routing:
  routes.MapRoute(name: "Default", template: "{controller=Home}/{action=Index}/{id?}");

  <b></b>Model binding :
 public async Task<IActionResult> Login(LoginViewModel model, string returnUrl = null) { ... }

    <b></b>Model validation :
  [Required]
  [DataType(DataType.Password)]
  public string Password { get; set; }

  <b></b>Dependency injection :  
   @inject SomeService ServiceName
   < !DOCTYPE html >
   < html lang="en" >
   < head >
       < title >@ServiceName.GetTitle< /title >
   < /head >
   < body >
       < h1 >@ServiceName.GetTitle< /h1 >
   < /body >
   < /html >

<b></b>Filters:
  [Authorize]
  public class AccountController : Controller
  {...}

  <b></b>Areas:
  For instance, an e-commerce app with multiple business units,
  such as checkout, billing, and search etc. 
  Each of these units have their own logical component views, controllers
  , and models.

  <b></b>Web APIs:
  To build services and more.

  <b></b>Testability:
 like unit testing, Integration tests

 <b>Razor view engine:</b>

   <ul>
     @for (int i = 0; i < 5; i++) {
       <li>List item @i</li>
     }
   </ul>

Strongly typed views:
  @model IEnumerable<Product>
  <ul>
      @foreach (Product p in Model)
      {
          <li>@p.Name</li>
      }
  </ul>

Tag Helpers
   to define custom tags (for example, <environment>) 
   or to modify the behavior of existing tags :
   Please <a asp-controller="Account" asp-action="Login">Click here to Log in</a>

   View Components:
 They're similar to partial views, but with associated logic:
 <vc:priority-list max-priority="2" is-done="false">
 </vc:priority-list>
</code>
</pre>
</div>

<h2><input type="button" value="-" style="font-size:20px;margin-right:5px;vertical-align: middle;"  
    onclick="toggle(this)"/>Razor</h2>
<div>
<pre>
<code>
    @page "{id:int}"
@model RazorPagesContacts.Pages.EditModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Edit Customer";
}

&lth1>Edit Customer - @Model.Customer.Id&lt/h1>
&ltform method="post">
    &ltdiv asp-validation-summary="All">&lt/div>
    &ltinput asp-for="Customer.Id" type="hidden" />
    &ltdiv>
        &ltlabel asp-for="Customer.Name">&lt/label>
        &ltdiv>
            &ltinput asp-for="Customer.Name" />
            &ltspan asp-validation-for="Customer.Name" >&lt/span>
        &lt/div>
    &lt/div>
 
    &ltdiv>
        &ltbutton type="submit">Save&lt/button>
    &lt/div>
&lt/form>

</code>
</pre>
</div>
</body>
</html>
