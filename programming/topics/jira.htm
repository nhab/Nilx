<html>
<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/css/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	
	
<h2>References</h2>
<div>
	tutorialspoint.com/jira
</div>
	
<h2>Project</h2>
<pre>
	
- A JIRA project is a collection of issues
- jira menu> projects > create project:
   1.1.software project types:basic ,scrum,kanban
   1.2.Business Project Template</b>
          Templates to manage simple tasks and complex tasks like workflow.
   2.select work flow
</pre>
	
<h2>Task Details</h2>
<div>

Tasks can be defined at the individual level to track the progress.
Status of every task, comment, attachment and due dates are stored in one place.
</div>
	
<h2>Notifications</h2>
<div>
Use @mention to get the attention of a specific team member at Comments/Description.
User will instantly notify if something is assigned or if any feedback is required.
</div>
	
<h2>Reports</h2>
<div>
JIRA reports to track progress over a specific timeframe, deadlines, individual’s contribution, etc.
</div>
	
<h2>Jira issue types</h2>
<div>
 new feature, task,sub-task, bug,epic,improvement,story, etc.
</div>
	
<h2>Issue types schemes</h2>
<div>
- Default Issue Type Scheme: In default issue type scheme all newly created issues will be added automatically to this scheme
- Agile Scrum Issue Type Scheme: Issues and project associated with Agile Scrum will use this scheme
</div>

<h2>Jira Components</h2> 
<pre>
- are sub-sections of a project;
- they are used to group issues within a project into smaller parts.
- Components add some structures to the projects, breaking it up into
	features, 
	teams, 
	modules, 
	subprojects and more.
	
- Using components you can generate reports, collect statistics, and display it on dashboards and so on.
</pre>

<h2>JIRA Screen</h2>
<pre>
- When issue is created in JIRA, it will be arranged and represented into different fields, 
	this display of field in JIRA is known as a screen.
	
- This field can be transitioned and edited through workflow. 
- For each issue, you can assign the screen type as shown in the screen-shot. 
- To add or associate an issue operation with a screen you have to go in main menu 
	and click on Issues then click on Screen Schemes 
	and then click on “Associate an issue operation with a screen” 
	and add the screen according to the requirement. 
	Now in this Jira tutorials, we will learn about Jira Issue Attributes.
</pre>

<h2>Jira Issue Attributes</h2>
<pre>
Issue Attributes encompasses
Statuses
Resolutions
Priorities
Statuses: 
	Different statuses are used to indicate the progress of a project like 
		To do, 
		InProgress,
		Open,
		Closed,
		ReOpened, 
		and Resolved. 

resolution:
	it again tells about the progress of issue like
		Fixed, 
		Won’t fix, 
		Duplicate, 
		Incomplete, 
		Cannot reproduce,
 		Done
priorities of the issue: 
	whether an issue is
		critical, 
		major, 
		minor,
		blocker
		and Trivial.
</pre>

<h2>Issue Security Schemes</h2>
<div>

This function in JIRA allows you to control who can view the issues.
It consists of a number of security levels which can have users or groups assigned to them. 
You can specify the level of security for the issues while creating or editing an issue.

Similarly, there is a Default Permission Scheme any new project that are created will be assigned to this scheme. 
Permission Schemes allow you to create a set of permissions and apply this set of permission to any project.
</div>
	
<h2>System Administration</h2>
<div>
Some of the useful features that JIRA admin provides to users are:
</div>
	
<h2>Audit Log</h2>
<div>
Under Audit Log, you can view all the details about the issue created, and the changes made in the issues.
</div>
	
<h2>Issue Linking</h2>
<div>
This will show whether your issues link with any other issue that is already present 
or created in the project also you can de-activate Issue linking from the panel itself
</div>
	
<h2>Mail in JIRA</h2>
<div>
Using Mail system in admin you can mail issues to an account on a POP or IMAP mail server 
	or messages written to the file system generated by an external mail service.
</div>
	
<h2>Events</h2>
<div>
An event describes the status, the default template and the notification scheme and workflow transition post function associations for the event.
	The events are classified in two a System event (JIRA defined events) and Custom event (User defined events).
	</div>
	
<h2>Watch list</h2>
<div>
JIRA allows you to watch a particular issue, which tells you about the notifications of any updates relating to that issue.
	To watch an issue, click on the word “watch” in the issue window, and if you want to see who is watching your issues,
	you have to click on the number in brackets.
	</div>
	
<h2>Issue Collectors</h2>
<div>
In the form of JIRA issues, an issue collector allows you to gather feedback on any website. 
	In administration if you click on Issue collectors an option will open asking Add Issue Collector.
	Once you have configured the look and feel of an Issue Collector, embed the generated JavaScript in any website for feedback.
	</div>
	
<h2>Development Tools</h2>
<div>
You can also connect your Software development tools to JIRA tool using this admin function.
	You have to enter the URL of the application to connect with JIRA.
	</div>
	
<h2>WorkFlows</h2>
<div>
A JIRA workflow is a set of statuses and transitions that an issue goes through during its lifecycle. 
	JIRA workflow encompasses five main stages once the issue is created.

Open Issue
Resolved Issue
InProgress Issue
ReOpened Issue
Close Issue

While workflow in JIRA comprises of Statuses, assignee, resolution, conditions, validators, post-function’s and properties

Statuses: It represents the positions of the issues within a workflow
Transitions: Transitions are the bridges between statuses, the way a particular issue moves from one status to another
Assignee: The assignee dictates the responsible party for any given issue and determines how the task would be executed
Resolution: It explains why an issue transitions from an open status to a closed one
Conditions: Conditions control who can perform a transition
Validators: It can ensure that the transition can happen given the state of the issue
Properties: JIRA recognizes some properties on transitions
</div>
<h2>epic vs story</h2>
<div>
    Stories, also called “user stories,” are short requirements or requests written from the perspective of an end user. 
	Epics are large bodies of work that can be broken down into a number of smaller tasks (called stories).
</div>

<h2>Filters</h2>
<div>
You can also set filters other than default filters to filter the issues. 
	The filters that you can use are date, component, priority, resolution and so on.
</div>
	
<h2>Agile Board</h2>
<div>
It allows the team to see the progress of sprints. 
	This is the work mode, where you can see the board itself broken down into different statuses.
	</div>
<h2>Backlog</h2>
<div>
This is where team will plan sprints and estimate stories that will go into each sprint
</div>

</body>
</html>
