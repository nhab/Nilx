<head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1' />
    <link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.css'>
    <script src='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
    <script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
    <style>
        ul {
            padding: 20px;
        }

        ul li {
            background: #ebedf0;
            color: darkblue;
            margin: 5px;
        }
    </style>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
    <button onclick='toggleAll(this);'>-</button>

<h1>WiX TOOLSET</h1>
    
<h2>References</h2>
<div>
<p>
    <a href="https://wixtoolset.org/docs/intro/">Main</a>
    <a href="https://github.com/wixtoolset/">on github</a>
<p><a href="https://www.pdfdrive.com/wix-36-a-developers-guide-to-windows-installer-xml-e159351823.html">WiX 3.6: A Developer's Guide to Windows Installer XML</a></p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/msi/roadmap-to-windows-installer-documentation">Windows Installer Documentation</a></p>
<p><a href="https://stackoverflow.com/questions/471424/wix-tricks-and-tips" data-card-appearance="inline">https://stackoverflow.com/questions/471424/wix-tricks-and-tips</a></p>
<p><a href="https://wixtoolset.org/docs/v3/howtos/">How tos</a></p>
</p>
</div>


<h2>Introduction to the Wix toolset</h2>
<div>
<h3>What is the Wix toolset?</h3>
<div>
<ul>
<li>Wix compiles <strong>simple XML elements in a .wxs file</strong> and builds <strong>Windows Installer packages)</strong>.</li>
<li>The wxs file, has a hieratical structure of element of types: installer/packages/folders/files/&hellip; .</li>
</ul>
</div>

<h3>Installing Wix</h3>
<div>
<ul>
<li>download from <a href="http://wixtoolset.org/,">http://wixtoolset.org/,</a>6. and <strong>the .NET 4.0</strong> platform.</li>
</ul>
</div>

<h3>Visual Studio package</h3>
<div>
<ul>
<li>VS provides WiX project templates (and IntelliSense )
<ul>
<li>To start creating your own MSI installer, select the <strong>Setup template Project</strong>, from<strong> Visual Studio&gt; New project .. &gt;Setup Projec</strong></li>
<li>This will create a project with a single .<strong>wxs </strong>(WiX source) file.</li>
</ul>
</li>
</ul>
</div>
</div>

<h2>Concepts</h2>
<div>
<h3><strong>XML files in general</strong></h3>
<div>
<ul>
<li>The document must begin and end with the same<strong> root element</strong></li>
<li>All elements must have a<strong> matching closing tag or be closed themselves</strong></li>
<li>XML tags are <strong>case sensitive</strong></li>
<li>XML<strong> attributes should be quoted</strong></li>
</ul>
</div>

<h3>GUID</h3>
<ul>
<li>GUID is a Unique combination of alphanumerical characters in 4 parts of 8charachters are separated by dash(-) .</li>
<li>WiX can accept a GUID with or without curly brackets around it,
<ul>
<li>as <strong>01234567-89ABCDEF-0123-456789ABCDEF </strong>or<strong> {01234567-89AB-CDEF-0123-456789ABCDEF}</strong></li>
</ul>
</li>
<li>Visual Studio 2010 provides a way to create a GUID.:
<ul>
<li>Menu &gt; Tools &gt;Create GUID&gt; copy a new GUID using Registry Format.</li>
</ul>
</li>
</ul>

<h3>Variables</h3>
<div>
<ul>
<li>We can define variables and use them. for example:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;?define ProductName = "ParameterTool" ?&gt;</p>
<ul>
<li>then we can use it</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Product Id="{244821B7-10EC-43E0-9A07-24A72273E490} Name="$(var.ProductName) "&gt;</p>
</div>

<h3>Minimal .wsx file</h3>
<ul>
<li>should have:
<ul>
<li>An <strong>XML declaration</strong></li>
<li>A <strong>Wix element </strong>that serves as the root element in your XML document</li>
<li>A<strong> Product element</strong> that is a child of the Wix element, but all other elements are children to it</li>
<li>A <strong>Package element </strong></li>
<li>A<strong> Media or MediaTemplate element</strong></li>
<li>At least one <strong>Directory element </strong>with at least one child Component element</li>
<li>A <strong>Feature element</strong></li>
</ul>
</li>
</ul>

<h3>Custom properties</h3>
<div>
<ul>
<li>Custom properties <strong>hold your install time data</strong>.</li>
<li>A <strong>Property element</strong> only needs two attributes: Id and Value</li>
<li><strong>Example</strong>: The following example<strong> creates a new property </strong>called myProperty and sets its value to the string my value.</li>
</ul>
<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Property Id="myProperty" Value="my value" /&gt;</p>
<ul>
<li>In the next example, we'll create a property called myProperty that has a value of 0.
<ul>
<li>A Condition element that follows checks the value to see if it's equal to 1.</li>
<li>Notice that I'm using the square bracket notation in the Message attribute to reference myProperty:</li>
<li>The Message attribute is used to show a modal window to the user. In this case, they'll see Value of myProperty is 0. Should be 1.</li>
</ul>
</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Property Id="myProperty" Value="0" /&gt;o&nbsp;&nbsp;&nbsp; &lt;Condition Message="Value of myProperty is [myProperty]. Should be 1"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;![CDATA[Installed OR myProperty = "1"]]&gt;o&nbsp;&nbsp;&nbsp; &lt;/Condition&gt;</p>
<ul>
<li>In XML, The data which can be interpreted as markup, is expressed using <strong>![CDATA[]] .</strong></li>
</ul>
<p>inside the bracket of CDATA, &lt; or &gt; characters can be used freely without interpreted as markup</p>
<ul>
<li>&ldquo;<strong>Installed&rdquo; is a predefined property</strong> and is true when the product is already installed locally</li>
</ul>
</div>

<h3>Implied properties</h3>
<div>
<ul>
<li>They are certain properties that<strong> don't need to be set with a Property element. </strong>They're set for you.</li>
<li>First, there are those that are created when you set attributes on the <strong>Product element</strong>.</li>
<li>So, for example, the following code snippet:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Product Id="3E786878-358D-43AD-82D1-1435ADF9F6EA"o&nbsp;&nbsp;&nbsp; 
    Name="Awesome Software"o&nbsp;&nbsp;&nbsp; Language="1033"o&nbsp;&nbsp;&nbsp; Version="1.0.0.0"o&nbsp;&nbsp;&nbsp; 
    Manufacturer="Awesome Company"o&nbsp;&nbsp;&nbsp; UpgradeCode="B414C827-8D81-4B4A-B3B6-o&nbsp;&nbsp;&nbsp; 338C06DE3A11"&gt;
</p>
<ul>
<li>creates the following properties:
<ul>
<li><strong>ProductCode, ProductName, ProductLanguage, ProductVersion, Manufacturer, UpgradeCode</strong></li>
</ul>
</li>
<li>You can use these properties just as you would those you create yourself.</li>
<li>They're available to you in all phases of the install.</li>
<li>They<strong> can be accessed in the attributes and inner text of other elements just like normal.</strong></li>
<li>Another set of implied properties are <strong>directories</strong>.</li>
</ul>
</div>

<h3>Cited properties</strong></h3>
<div>
<ul>
<li>Most of<strong> the properties that are built into Windows Installer</strong> aren't implied. You have to set them explicitly with a Property element</li>
<li>They're different from the properties that you'll create yourself, in that:
<ul>
<li><strong>the Id attribute must match the predefined name </strong></li>
<li>and they're generally used to toggle various Windows Installer settings.</li>
</ul>
</li>
<li>You can find them <a href="http://msdn.microsoft.com/en-us/library/aa370905%28v=VS.85%29.aspx">here</a>.</li>
<li>The following are a few <strong>examples </strong>of how these properties would be set:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Icon Id="myIcon" SourceFile="..\myIcon.ico" &gt;o&nbsp;&nbsp;&nbsp; &lt;Property Id="ARPPRODUCTICON" Value="myIcon" &gt;o&nbsp;&nbsp;&nbsp; &lt;Property Id="ARPCOMMENTS" Value="(c) Amazing Software" &gt;o&nbsp;&nbsp;&nbsp; &lt;Property Id="ARPNOREPAIR" Value="1" &gt;o&nbsp;&nbsp;&nbsp; &lt;Property Id="ARPCONTACT" Value="Nick Ramirez" &gt;o&nbsp;&nbsp;&nbsp; &lt;Property Id="ARPHELPLINK" Value="http:/www.MYURL.com/AmazingSoftware/support.html"&gt;o&nbsp;&nbsp;&nbsp; &lt;Property Id="ARPREADME" Value="http:/www.MYURL.com/AmazingSoftware/readme.html" /&gt;</p>
<ul>
<li>As you can see, <strong>setting a built-in property is just like setting your own custom properties </strong>except that the Id value must use the predefined name.</li>
<li>One other built-in property that you should know about is <strong>ALLUSERS</strong>.
<ul>
<li>You can set it to a 1, 2, or an empty string (""). A 1 means that the install will be performed in the per-machine context.</li>
<li>This means that its components will be installed to folders accessible to anyone that uses the system.</li>
<li>Setting ALLUSERS to an empty string tells the installer to use the per-user context, meaning that its components will be installed only for the current user.</li>
<li>A value of 2 means that the installer will sometimes be in the user context and sometimes in the machine context, epending on whether or not the user who initiated it has administrator rights.</li>
<li>However, even this rule varies based upon the operating system.</li>
<li>In general, you should set ALLUSERS to 1, the per-machine context. Setting it to the per-user context can only be done if you're certain that no registry keys or files will be installed to machine-level locations. This is rarely the case.</li>
<li>A value of 2 usually causes scenarios that are too complex to plan for. So, it's best to avoid it. The following example sets the ALLUSERS property to 1:</li>
</ul>
</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Property Id="ALLUSERS" Value="1" /&gt;</p>
<ul>
<li>The reason that this property is important is that during an upgrade, you'll want to find out if a previous version of the software is already installed.</li>
<li>For that, the ALLUSERS property must be set to the same value as it was originally.</li>
<li>Otherwise, the installer may look in the wrong place and fail to detect the software, even if it's there.</li>
<li>So, keep it consistent. Always set it to the same value, preferably 1.</li>
<li>One thing to note is that you can also set the <strong>InstallScope </strong>attribute on the Package element to either <strong>perMachine </strong>or <strong>perUser</strong>.</li>
<li>This will have the same effect as setting the ALLUSERS property directly.</li>
<li>If you do, you should remove any Property element that sets it.</li>
</ul>
</div>
</div>

<h2>WiX XML Elements</h2>
<div>
<h3>The Wix element and the XML declaration</h3>
<p>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"&gt;
    &lt;/Wix&gt;</p>
<ul>
<li>The <strong>xmlns</strong>, or XML namespace, just brings the core WiX elements into the local scope of your document</li>
</ul>
<h3>The Product element</h3>
<ul>
<li>This is where you define the characteristics of <strong>the software </strong>you're installing, using following attributes:
<ul>
<li><strong>name</strong></li>
<li><strong>language: is the id of the </strong><a href="http://msdn.microsoft.com/en-us/goglobal/bb964664.aspx"><strong>language </strong></a><strong>in messages. </strong></li>
<li><strong>version</strong>,</li>
<li><strong>manufacturer: </strong>Name of your company</li>
<li>: this GUID will identify your product across releases.
<ul>
<li>(It remains constant for a product , even among different product versions)</li>
</ul>
</li>
<li><strong>Id </strong>:represents a Unique GUID , the <strong>ProductCode </strong>of the software.
<ul>
<li>You can either hardcode The ID, like the below sample</li>
<li>or just put an asterisk, That WiX will pick a new GUID for you each time you compile the project.</li>
</ul>
</li>
<li>Example:</li>
</ul>
</li>
</ul>
<p>&lt;Wix ... &gt;
    &nbsp; &lt;Product Id="{244821B7-10EC-43E0-9A07-24A72273E490}"
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     Name="$(var.ProductName) $(var.ProductVersion)"
    &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    Language="1033"
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     Version="$(var.ProductAssemblyVersion)"
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     Manufacturer="$(var.Company)"
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     UpgradeCode="{28853BD5-2B30-4774-B721-CF28F87B7FAE}" &gt;
    &nbsp; &lt;/Product&gt;
       &lt;/Wix&gt;</p>
<ul>
<li>"1033" for language value stands for "English-United States"</li>
<li><strong>UpgradeCode</strong>: will identify your product across releases.
     It remains constant for a product line, even among different product versions</li>
</ul>
<h3>The Package element</h3>
<ul>
<li>The next step after defining the Product element, is to nest a Package elements inside it.</li>
<li><strong>The Package element </strong>describes the installer itself.</li>
<li>Package means the MSI file.</li>
<li>Example:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &nbsp;&lt;Wix ... &gt;
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Product ... &gt;
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Package InstallerVersion="301"
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compressed="yes"
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InstallScope="perMachine"
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Manufacturer="Awesome Company"
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description="Installs Awesome Software"
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Keywords="Practice,Installer,MSI"
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Comments="(c) 2012 Awesome Company" &gt;
    o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;Product&gt;
    o&nbsp;&nbsp;&nbsp; &lt;/Wix&gt;</p>
<ul>
<li><strong>Attributes</strong>:
<ul>
<li>Only<strong> Compressed attribute</strong> is really required. Setting Compressed to yes, <strong>Means to package all of the MSI's resources into CAB files. </strong>
<ul>
<li>Later, you'll define these CAB files with Media elements or a MediaTemplate element.</li>
</ul>
</li>
<li>The <strong>InstallScope attribute </strong>can be set to either :
<ul>
<li><strong>perMachine: </strong>means that your software will be installed in the "All Users" context, meaning that all users will be able to access your application. As such, the person performing the installation will need elevated privileges on a UAC enabled system such as Windows 7 to continue the installation.</li>
<li><strong>perUser:</strong> means that it will be installed only for the current user.</li>
</ul>
</li>
<li><strong>The "InstallPrivileges</strong>" attribute of the "Package" element can be set to "elevated" to require administrator privileges during installation.</li>
</ul>
</li>
</ul>
<p>Here is an example of how to use the "InstallPrivileges" attribute in the "Package" element:</p>
<pre><code>&lt;Package InstallerVersion="200" Compressed="yes" InstallPrivileges="elevated" InstallScope="perMachine"/&gt;</code></pre>
</p>
<h3>The MediaTemplate element</h3>
<ul>
<li>It <strong>decides whether to embed the content files inside the MSI or provide them visibly alongside it, in cab files.</strong>
<ul>
<li>Example:</li>
</ul>
</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Wix ...&gt;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&lt;Product ... &gt;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;Package ... /&gt;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;MediaTemplate EmbedCab="yes" &gt;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &lt;Product&gt;o&nbsp;&nbsp;&nbsp; &lt;/Wix&gt;</p>
<ul>
<li>The <strong>EmbedCab attribute</strong> sets whether the CAB files will be embedded inside the MSI, or not embed.</li>
<li><strong>MaximumCabinetSizeForLargeFileSplitting attribute:</strong>
<ul>
<li>Maximum size of cabinet files in megabytes for large files. .</li>
<li>This attribute is used for packaging files that are larger than MaximumUncompressedMediaSize into smaller cabinets.</li>
<li>If cabinet size exceed this value, then setting this attribute will cause the file to be split into multiple cabinets of this maximum size.</li>
<li>For simply controlling cabinet size without file splitting use MaximumUncompressedMediaSize attribute.</li>
<li>Setting this attribute will disable smart cabbing feature for this Fragment / Product. Setting WIX_MCSLFS environment variable can be used to override this value.</li>
<li>Minimum allowed value of this attribute is 20 MB. Maximum allowed value and the Default value of this attribute is 2048 MB (2 GB).</li>
</ul>
</li>
<li><strong>MaximumUncompressedMediaSize :</strong>
<ul>
<li>Size of uncompressed files in each cabinet, in megabytes.</li>
<li>WIX_MUMS environment variable can be used to override this value.</li>
<li>Default value is 200 MB<strong>.</strong></li>
</ul>
</li>
<li><strong>VolumeLabel:</strong>
<ul>
<li>The label attributed to the volume.</li>
<li>This is the volume label returned by the GetVolumeInformation function.</li>
<li>If the SourceDir property refers to a removable (floppy or CD-ROM) volume,</li>
</ul>
</li>
</ul>
<p>then this volume label is used to verify that the proper disk is in the drive before attempting to install files.</p>
<ul>
<li>The entry in this column must match the volume label of the physical media.</li>
</ul>
<h3>The Media element</h3>
<ul>
<li>The Media element is an older element that was replaced by MediaTemplate and if you use one you can't use the other.
<ul>
<li>However, in some cases, the Media element is the only thing for the job.</li>
<li><strong>For each Media element</strong> that you add to your WiX markup, <strong>a new CAB file will be created.</strong></li>
<li>Example :</li>
</ul>
</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Wix ... &gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;Product ... &gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Package ... /&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Media Id="1"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cabinet="media1.cab"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EmbedCab="yes" &gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;Product&gt;o&nbsp;&nbsp;&nbsp; &lt;/Wix&gt;</p>
<ul>
<li>Each Media element gets a unique Id attribute to distinguish it in the MSI Media table.</li>
<li>The <strong>Cabinet attribute </strong>sets the name of the CAB file. You won't see this unless you set EmbedCab to no.</li>
<li>use the <strong>DiskPrompt </strong>and<strong> VolumeLabel attributes </strong>If you do choose to split the installation up into several physical disks (or even virtual ISO images) to label the prompts.</li>
<li>The <strong>Property </strong>element will be used as the text in the message box the end user sees, prompting them to insert the next disk.</li>
<li>The text in the DiskPrompt attribute is combined with the text in the property's value, switched with [1], to change the message for each subsequent disk.<br /> Make sure you give this property an Id value of DiskPrompt So that Windows will know when the correct disk is inserted,</li>
<li>the VolumeLabel attribute must match the "Volume Label" of the actual disk
<ul>
<li>Once you've built your project, include the MSI file and the first CAB file on the first disk. The second CAB file should then be written to a second disk.</li>
<li><strong>Adding a file to a media: </strong>
<ul>
<li>Although we haven't described the File element yet, it's used to add a file to the installation package.</li>
<li>To include one in a specific CAB file, add the DiskId attribute, and set to the Id attribute of the corresponding Media element.</li>
<li>The following example includes a text file called myFile.txt in the media2.cab file:</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;File Id="fileTXT"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;Name="myFile.txt"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;Source="myFile.txt"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;KeyPath="yes"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;DiskId="2" /&gt;</p>

<h3>The Directory element</h3>
<ul>
<li>The Directory element Shows <strong>where the product will be installed</strong> on the hard drive of the user.</li>
<li>When you want to install to<strong> C:\Program Files</strong>, you can use a shorthand of <strong>ProgramFilesFolder </strong></li>
<li>following are some of these built-in directory properties:</li>
</ul>
<table data-table-width="760" data-layout="default" data-local-id="c7cc492c-3873-4515-a337-c50edcd094e9">
<tbody>
<tr>
<td>
<p><strong>Directory property</strong></p>
</td>
<td>
<p>Actual path</p>
</td>
</tr>
<tr>
<td>
<p>AdminToolsFolder</p>
</td>
<td>
<p>Full path to the directory containing administrative tools</p>
</td>
</tr>
<tr>
<td>
<p>AppDataFolder</p>
</td>
<td>
<p>Full path to roaming folder for the current user</p>
</td>
</tr>
<tr>
<td>
<p>CommonAppDataFolder</p>
</td>
<td>
<p>Full path to application data for all users</p>
</td>
</tr>
<tr>
<td>
<p>CommonFiles64Folder</p>
</td>
<td>
<p>Full path to the 64-bit Common Files folder</p>
</td>
</tr>
<tr>
<td>
<p>CommonFilesFolder</p>
</td>
<td>
<p>Full path to the Common Files folder for current user</p>
</td>
</tr>
<tr>
<td>
<p>DesktopFolder</p>
</td>
<td>
<p>Full path to the Desktop folder</p>
</td>
</tr>
<tr>
<td>
<p>LocalAppDataFolder</p>
</td>
<td>
<p>Full path to folder containing local (non-roaming) applications</p>
</td>
</tr>
<tr>
<td>
<p>ProgramFiles64Folder</p>
</td>
<td>
<p>Full path to the 64-bit Program Files folder</p>
</td>
</tr>
<tr>
<td>
<p>ProgramFilesFolder</p>
</td>
<td>
<p>Full path to 32-bit Program Files folder</p>
</td>
</tr>
<tr>
<td>
<p>ProgramMenuFolder</p>
</td>
<td>
<p>Full path to Program Menu folder</p>
</td>
</tr>
<tr>
<td>
<p>StartMenuFolder</p>
</td>
<td>
<p>Full path to the Start Menu folder</p>
</td>
</tr>
<tr>
<td>
<p>StartupFolder</p>
</td>
<td>
<p>Full path to the Startup folder</p>
</td>
</tr>
<tr>
<td>
<p>WindowsFolder</p>
</td>
<td>
<p>Full path to the Windows folder</p>
</td>
</tr>
</tbody>
</table>
<p>The full listing is <a href="https://learn.microsoft.com/en-us/windows/win32/msi/property-reference?redirectedfrom=MSDN">here</a>.</p>
<ul>
<li>The easiest way to add your own directories is to nest them inside one of the predefined ones</li>
<li>For example, to create a new directory called Install Practice inside the Program Files folder, you could add it as a child to ProgramFilesFolder.</li>
<li>To define your directory structure in WiX, use Directory elements:</li>
</ul>
<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Wix ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;Product ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Package ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;MediaTemplate ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory Id="TARGETDIR"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name="SourceDir"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory Id="ProgramFilesFolder"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory Id="MyProgramDir"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name="Install Practice" &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Directory&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Directory&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;/Product&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Wix&gt;</p>
<ul>
<li>you must start your Directory elements hierarchy with a Directory element with an <strong>Id attribute of TARGETDIR </strong>and a<strong> Name value of SourceDir</strong>.</li>
<li>By default, Windows Installer sets TARGETDIR to the local hard drive with the freest space&mdash;in most cases, the C: drive.</li>
<li>You can set TARGETDIR to another drive letter during installation.
<ul>
<li>You might, for example, set it with a VolumeSelectCombo user interface control.</li>
</ul>
</li>
<li>When creating your own directory, you must provide the Name attribute. This sets the name of the new folder.</li>
</ul>
<h3><strong>The Component element</strong></h3>
<ul>
<li>Windows Installer expects every file to be wrapped up in a component before it's installed</li>
<li><em>File elements</em> inside<em> component elements, </em><strong><em>copy files into Target directory</em></strong><em> specified in Directory element.</em></li>
<li>During an installation, this information is stored away in the registry.
<ul>
<li>This lets Windows find every piece of your product during an uninstall so that your software can be completely removed.</li>
<li>It also uses it to replace missing files during a repair, which you can trigger by right-clicking on an MSI file and selecting Repair.</li>
</ul>
</li>
<li>Example :</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Directory Id="TARGETDIR" Name="SourceDir"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;Directory Id="ProgramFilesFolder"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory Id="MyProgramDir" Name="Install Practice"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Component Id="CMP_InstallMeTXT" Guid="E8A58B7B-F031-4548-9BDD7A6796C8460D"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;File Id="FILE_MyProgramDir_InstallMeTXT" Source="InstallMe.txt" KeyPath="yes" /&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Component&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/Directory&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;/Directory&gt;o&nbsp;&nbsp;&nbsp; &lt;/Directory&gt;</p>
<ul>
<li>Here, it's the InstallMe.txt file located in the current directory (which is the same directory as your WiX source file).</li>
</ul>
<ul>
<li>You can specify a relative or absolute path with the Source attribute.</li>
</ul>
<h3><strong>DirectoryRef element</strong></h3>
<ul>
<li>To add a component to a directory, Another approach for specifying directories is to use a DirectoryRef element .</li>
<li>Using this approach, separates the markup that defines your directories from the markup that adds files to those directories.</li>
<li>Example:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Directory Id="TARGETDIR" Name="SourceDir"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory Id="ProgramFilesFolder"&gt;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory Id="MyProgramDir"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name="Install Practice" &gt;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Directory&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;DirectoryRef Id="MyProgramDir"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Component ...&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;File ... /&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Component&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/DirectoryRef&gt;</p>
<h3><strong>The ComponentGroup element</strong></h3>
<ul>
<li>A third option is to group your components inside of a ComponentGroup and use its <strong>Directory attribute</strong> to set the target directory.
<ul>
<li>Example:</li>
</ul>
</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;ComponentGroup Id="ProductComponents"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Directory="MyProgramDir"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;Component ...&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;File ... &gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;Component&gt;&lt;/ComponentGroup&gt;</p>
<h3><strong>The File element</strong></h3>
<ul>
<li>The File element inside the component <strong>references the file that's going to be installed</strong></li>
<li>you should only place one file into each component.</li>
<li>Example:</li>
</ul>
<p>&lt;Component ... &gt;&nbsp; &lt;File Id="FILE_MyProgramDir_SomeAssemblyDLL"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name="Some Assembly.dll"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Source="SomeAssembly.dll"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KeyPath="yes"&gt;&lt;Component&gt;</p>
<ul>
<li>The File elements can represent everything from simple text files to complex DLLs and executables.</li>
<li><strong>Attributes</strong>
<ul>
<li>The mandatory <strong>&ldquo;source&rdquo; attribute </strong>defines the path to the file during compilation.</li>
<li><strong>Id, Name </strong>are optional</li>
<li><strong>KeyPath</strong> is to mark a file as important (and that it should be replaced if it goes missing)</li>
<li>Since you should only ever place one file inside a component, in almost all cases that file should be the KeyPath file.
<ul>
<li>If not set, the first file in the component will be the KeyPath file automatically.</li>
</ul>
</li>
<li><strong>Hidden</strong>: Set to yes to have the file's Hidden flag set. The file won't be visible unless the user sets the directory's options to show hidden files.</li>
<li><strong>ReadOnly</strong>: Set to yes to have the file's Read-only flag set. The user will be able to read the file, but not modify it unless they change the file's properties.</li>
<li><strong>Vital</strong>: Set to no to continue even if this file isn't installed successfully</li>
</ul>
</li>
</ul>
<h3><strong>The Feature element</strong></h3>
<ul>
<li><strong><em>Is used to group components that the user can decide to install all at once</em></strong><em>.</em></li>
<li>For <strong>example</strong>, it can have two features: Main Product and Optional Tools</li>
<li>Every component must be included in a feature</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Feature Id="MainProduct" Title="Main Product" Level="1"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;ComponentRef Id="CMP_MyAppEXE" /&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;ComponentRef Id="CMP_ReadMeTXT" /&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;ComponentRef Id="CMP_StartMenuShortcuts" &gt;o&nbsp;&nbsp;&nbsp; &lt;Feature&gt;o&nbsp;&nbsp;&nbsp; &nbsp;o&nbsp;&nbsp;&nbsp; &lt;Feature Id="OptionalTools" Title="Optional Tools" Level="1"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;ComponentRef Id="CMP_ToolsEXE" &gt;o&nbsp;&nbsp;&nbsp; &lt;Feature&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
<ul>
<li>Setting the Feature element's<strong> Level attribute</strong> to 1 means that that feature will be included in the installation by default,
<ul>
<li>The end user will still be able to remove it through the user interface or via the command line.</li>
<li>If, on the other hand, the Level is set to 0, that feature will be removed from the feature tree and the user won't be able to install it.</li>
</ul>
</li>
<li>If you wanted to, you could create a more complex tree with features nested inside features</li>
</ul>
<h3><strong>Start menu shortcuts</strong></h3>
<ul>
<li>we can use a DirectoryRef element to reference our new shortcuts folder, as in the following code snippet:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;DirectoryRef Id="MyShortcutsDir"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;Component Id="CMP_DocumentationShortcut"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Guid="33741C82-30BF-41AF-8246-44A5DCFCF953"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Shortcut Id="DocumentationStartMenuShortcut"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name="Awesome Software Documentation"&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description="Read Awesome Software Documentation"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Target="[MyProgramDir]InstallMe.txt" &gt;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;Component&gt;o&nbsp;&nbsp;&nbsp; &lt;/DirectoryRef&gt;</p>
<ul>
<li>The<strong><em> Target attribute</em></strong> defines the path on the end user's machine to the actual file being linked.</li>
<li>Two things that should accompany a shortcut are a <strong><em>RemoveFolder </em></strong>element and a <strong><em>RegistryValue </em></strong></li>
<li><strong><em>RemoveFolder </em></strong>ensures that the new Start menu subdirectory will be removed during an uninstall.
<ul>
<li>It uses an<strong> Id attribute </strong>to uniquely identify a row in the MSI RemoveFile table and an<strong> <em>On attribute</em></strong> to specify when to remove the folder.</li>
<li>You can set On to install, uninstall, or both.</li>
</ul>
</li>
<li>You can specify a <strong>Directory attribute </strong>as well to set to the Id attribute of a Directory element to remove.
<ul>
<li>Without one, though, the element will remove the directory defined by the parent DirectoryRef or ComponentGroup element.</li>
</ul>
</li>
<li>Each<strong> Shortcut element</strong> has a unique identifier set with the Id attribute.
<ul>
<li>The<strong> Name attribute</strong> defines the user-friendly name that gets displayed.</li>
<li><strong>Description</strong> is set to a string that describes the shortcut and will appear when the user moves their mouse over the shortcut link.</li>
<li>The <strong>Target attribute</strong> defines the path on the end user's machine to the actual file being linked to.</li>
<li>For that reason, you'll often want to use properties that update as they're changed, instead of hardcoded values.</li>
</ul>
</li>
<li><em>The </em><strong><em>RegistryValue element</em></strong> is needed simply because every component must have a KeyPath item.
<ul>
<li>Shortcuts aren't allowed to be KeyPath items as they aren't technically files.</li>
<li>By adding a RegistryValue, a new item is added to the registry and this is marked as KeyPath</li>
</ul>
</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;DirectoryRef Id="MyShortcutsDir"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&lt;Component Id="CMP_DocumentationShortcut" Guid="33741C82-30BF-41AF-8246-44A5DCFCF953"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Shortcut Id="DocumentationStartMenuShortcut" Name="Awesome Software Documentation" Description="Read Awesome Software Documentation"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Target="[MyProgramDir]InstallMe.txt" /&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;RemoveFolder Id="RemoveMyShortcutsDir"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;On="uninstall" /&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;RegistryValue Root="HKCU"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Key="Software\Microsoft\AwesomeSoftware"&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name="installed"&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type="integer"&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value="1"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyPath="yes" /&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;/Component&gt;o&nbsp;&nbsp;&nbsp; &lt;/DirectoryRef&gt;</p>
<ul>
<li>Another type of shortcut to add is one that uninstalls the product. For this, add a second Shortcut element to the same component</li>
</ul>
<h3><strong>The Fragment element</strong></h3>
<ul>
<li>You can split your elements up into multiple .wxs files for the better organization using fragment element</li>
<li>The Fragment element doesn't need any attributes. It's simply a container.</li>
<li>Example:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;Fragment&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ComponentGroup Id="MyComponentGroup"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Directory="INSTALLLOCATION"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Component Id="CMP_MyProgramEXE"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Guid="E8A58B7B-F031-4548-9BDD-7A6796C8460D"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;File Id="FILE_MyProgramEXE"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Source="MyProgram.exe"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyPath="yes" &gt;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Component&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Component Id="CMP_AnotherFileDLL"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Guid="E9D74961-DF9B-4130-8FBC-1669A6DD288E"&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;File Id="FILE_AnotherFileDLL"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Source="AnotherFile.dll"&nbsp;&nbsp; o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyPath="yes" &gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Component&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ComponentGroup&gt;o&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;/Fragment&gt;o&nbsp;&nbsp;&nbsp; &lt;/Wix&gt;</p>
<ul>
<li>Including different .wsx files in the main .wsx file:
<ul>
<li>Now, the markup for the components is contained within a separate file.<br /> We can use <em>ComponentGroup </em>to group them.<br /> To include this group in Product.wxs, reference it with a <strong><em>ComponentGroupRef </em></strong>element in one of your Feature elements, as shown:</li>
</ul>
</li>
</ul>
<p>&sect;&nbsp; &lt;Feature Id="ProductFeature"&nbsp;&nbsp;&nbsp;&nbsp; &sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Title="Main Product"&nbsp;&nbsp;&nbsp;&nbsp; &sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Level="1"&gt;&sect;&nbsp; &nbsp;&nbsp;&nbsp;&lt;ComponentGroupRef Id="MyComponentGroup" &gt;&lt;Feature&gt;</p>
<ul>
<li>Although the ComponentGroup element is optional, it allows us to reference our fragment back in our main source file.</li>
</ul>
<h3><strong>The CopyFile element</strong></h3>
<ul>
<li>The CopyFile element can copy a file that you're installing and place it in another directory.
<ul>
<li>To move the file<strong><em> Delete attribute</em></strong> of the <em>copyFile </em>element should be set to <strong><em>yes</em></strong>.</li>
<li>...</li>
</ul>
</li>
</ul>
<p>&lt;Directory Id="TARGETDIR" Name="SourceDir"&gt;&nbsp; &lt;Directory Id="ProgramFilesFolder"&gt;&nbsp;&nbsp;&nbsp; &lt;Directory Id="MyProgramDir" Name="Awesome Software"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Directory Id="CopiedFiles" Name="Copied Files" /&gt;&nbsp;&nbsp;&nbsp; &lt;/Directory&gt;&nbsp; &lt;/Directory&gt;&lt;/Directory&gt;&nbsp;&lt;DirectoryRef Id="MyProgramDir"&gt;&nbsp; &lt;Component Id="CMP_InstallMeTXT" Guid="E8A58B7B-F031-4548-9BDD7A6796C8460D"&gt;&nbsp;&nbsp;&nbsp; &lt;File Id="FILE_InstallMeTXT" Source="InstallMe.txt" KeyPath="yes"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CopyFile Id="Copy_InstallMeTXT" DestinationDirectory="CopiedFiles" DestinationName="InstallMeCOPY.txt" /&gt;&nbsp;&nbsp;&nbsp; &lt;/File&gt;&nbsp; &lt;/Component&gt;&lt;/DirectoryRef&gt;</p>
<ul>
<li>If you don't want to hardcode the destination directory, you can use the <strong>DestinationProperty attribute</strong> instead of <strong>DestinationDirectory </strong>to reference a directory at install time</li>
</ul>
<h3>Copying existing files</h3>
<ul>
<li>For this, you'll <strong>nest the CopyFile element inside its own Component element </strong>and not inside a File element.</li>
<li>Example</li>
</ul>
<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--Directory structure--&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Directory Id="TARGETDIR" Name="SourceDir"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;Directory Id="ProgramFilesFolder"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory Id="MyProgramDir" Name="Awesome Software"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Directory Id="CopiedFiles" Name="Copied Files" /&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/Directory&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;/Directory&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;Directory Id="DesktopFolder" /&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Directory&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--Components--&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DirectoryRef Id="MyProgramDir"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;Component Id="CMP_CopyTestTXT" Guid="E25E8584-D009-43bE-99E9-A46D58105DD0" KeyPath="yes"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;CopyFile Id="CopyTest" DestinationDirectory="CopiedFiles" DestinationName="TESTCopy.txt" SourceDirectory="DesktopFolder" SourceName="TEST.txt" /&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;/Component&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DirectoryRef&gt;</p>
<h3><strong>Adding assembly files to the GAC</strong></h3>
<ul>
<li>The Global Assembly Cache (GAC) is a central repository in Windows where you can store .NET assembly files so that they can be shared by multiple applications.</li>
<li>You can add a .NET assembly to it with WiX <strong>by setting the File element's Assembly attribute to &ldquo;.net</strong>.&rdquo;</li>
<li>The following example installs an assembly file to the GAC:</li>
</ul>
<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DirectoryRef Id="MyProgramDir"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;Component Id="CMP_MyAssembly" Guid="4D98D593-F4E0-479B-A7DA80BBB78B54CB"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;File Id="File_MyAssembly" Assembly=".net" Source="MyAssembly.dll" KeyPath="yes" &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;Component&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/DirectoryRef&gt;</p>
<h3>Installing 64-bit files</h3>
<ol>
<li>open Properties for the WiX project <strong>&gt; </strong>and, on the Tools Settings tab <strong>&gt; </strong>In the Compiler parameters &gt; add &ndash;arch x64</li>
<li>Next, change the <strong>Directory element</strong> that is referencing ProgramFilesFolder to instead reference<strong> ProgramFiles64Folder</strong>, given as follows:</li>
</ol>
<p>&lt;Directory Id="TARGETDIR" Name="SourceDir"&gt;&nbsp; &lt;Directory Id="ProgramFiles64Folder"&gt;&nbsp;&nbsp;&nbsp; &lt;Directory Id="INSTALLFOLDER" Name="My Software" &gt;&nbsp; &lt;Directory&gt;&lt;/Directory&gt;</p>
<h3><strong>The PermissionEx Element </strong></h3>
<h3>The <strong>User Element : </strong></h3>
<h3><br /> <strong>Setting file permissions</strong></h3>
<ul>
<li>To set the permissions for a file that you're installing,<strong> nest a PermissionEx element inside the corresponding File element</strong>
<ul>
<li>Example:</li>
</ul>
</li>
</ul>
<p>&lt;Component Id="CMP_InstallMeTXT"&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Guid="E8A58B7B-F031-4548-9BDD-7A6796C8460D"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!--Creates new user--&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;util:User Id="MyNewUser"&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateUser="yes"&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name="nickramirez"&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Password="password"&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PasswordNeverExpires="yes"&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RemoveOnUninstall="yes"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UpdateIfExists="yes" /&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;File Id="FILE_InstallMeTXT" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Source="InstallMe.txt" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;KeyPath="yes"&gt;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--Sets file permissions for user--&gt;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;util:PermissionEx User="Joewatson"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GenericAll="yes" /&gt;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/File&gt;&lt;/Component&gt;</p>
<ul>
<li>Reference<strong>dll </strong>in your project:
<ul>
<li>Go to Add Reference in Solution Explorer and select the WiXUtilExtension assembly.</li>
<li>Next, add the following namespace to your Wix element:</li>
</ul>
</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"o&nbsp;&nbsp;&nbsp; xmlns:util="http://schemas.microsoft.com/wix/UtilExtension"&gt;</p>
<h3><strong>AppSearch Element : </strong></h3>
<h3><br /> <strong>searching the computer</strong></h3>
<ul>
<li>Windows Installer lets you <strong>search the computer </strong>during an install for specific files, directories, and settings</li>
<li>The AppSearch action uses file signatures to search for existing versions of products.</li>
<li>The AppSearch action may use this information to determine where upgrades are to be installed.</li>
<li>The AppSearch action can also be used to set a property to the existing value of an registry or .ini file entry.</li>
<li>There are five types of searches:<br /> <strong>DirectorySearch</strong>: This searches for the existence or path of a directory<br /> <strong>FileSearch</strong>: This searches for a specific file<br /> <strong>ComponentSearch</strong>: This searches for a file by its component GUID<br /> <strong>RegistrySearch</strong>: This searches the Windows Registry for a key<br /> <strong>IniFileSearch</strong>: This searches inside INI files for configuration settings
<ul>
<li>Example:</li>
</ul>
</li>
</ul>
<p>&sect;&nbsp; &lt;Property Id="README_FILE"&gt;&sect;&nbsp; &lt;DirectorySearch Path="C:\Program Files(x86)\Notepad++"&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Depth="0"&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AssignToProperty="no"&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Id="NppSearch"&gt;&sect;&nbsp; &lt;FileSearch Name="readme.txt"Id="readmeFileSearch" &gt;&sect;&nbsp; &lt;DirectorySearch&gt;&sect;&nbsp; &lt;/Property&gt;</p>
<h3>How To: Check the Version Number of a File During Installation</h3>
<ul>
<li>Installers often need to look up the version number of a file on disk during the installation process.</li>
<li>The check is often used in advance of a conditional statement later in install,</li>
</ul>
<p>such as to block the user from installing if a file is missing, or to display custom installation UI depending on whether the file version is high enough.</p>
<ul>
<li>This how to demonstrates verifying the version of a file on disk, then using the resulting property to block the application's installation if the file version is lower than expected.</li>
</ul>
<h4>Step 1: Determine the version of the file</h4>
<p>File versions are determined using the <a href="https://wixtoolset.org/docs/v3/xsd/wix/property/">Property</a>, <a href="https://wixtoolset.org/docs/v3/xsd/wix/directorysearch/">DirectorySearch</a> and <a href="https://wixtoolset.org/docs/v3/xsd/wix/filesearch/">FileSearch</a> elements.</p>
<p>The following snippet looks for the user32.dll file in the machine's System32 directory and checks to see if it is at least version 6.0.6001.1751.</p>
<p>&lt;Property Id="USER32VERSION"&gt;&nbsp; &lt;DirectorySearch Id="SystemFolderDriverVersion" Path="[SystemFolder]"&gt;&nbsp;&nbsp;&nbsp; &lt;FileSearch Name="user32.dll" MinVersion="6.0.6001.1750"/&gt;&nbsp; &lt;/DirectorySearch&gt;&lt;/Property&gt;</p>
<ul>
<li>Searching for a file is accomplished by describing the directories to search, and then specifying the file to look up in that directory.</li>
<li>The Property element defines the Id for the results of the file search.</li>
<li>This Id is used later in the WiX project, for example in conditions.</li>
<li>The DirectorySearch element is used to build the directory hierarchy to search for the file.</li>
<li>In this case it is given a unique Id, and the path is set to the Windows Installer defined <a href="http://msdn.microsoft.com/library/aa372055.aspx">SystemFolder</a> property which points to the user's <strong>Windows\System32</strong></li>
<li>The FileSearch element specifies the name of the file to look for in the parent DirectorySearch folder.</li>
<li>The MinVersion attribute specifies the minimum version of the file to find.</li>
<li>If the file is found successfully the USER32VERSION property will be set to the full path to the user32.dll file.</li>
<li><strong>Important:</strong> When doing a locale-neutral search for a file, <strong>you must set the MinVersion property to one revision number lower than the actual version you want to search for</strong>.</li>
<li>In this example, while we want to find file version 6.0.6001.1751, the MinVersion is set to 6.0.6001.1750.</li>
<li>This is because of a quirk in how the Windows Installer matches file versions.</li>
<li><a href="http://msdn.microsoft.com/library/aa371853.aspx">More information</a> is available in the Windows Installer documentation.</li>
</ul>
<h3><strong>The Condition Element: </strong></h3>
<h3>Launch conditions</h3>
<ul>
<li>The MSI database for an installer has a table called <strong>LaunchCondition </strong>
<ul>
<li><strong>LaunchCondition </strong>table lists rules that the end user must comply with in order to install the software.</li>
<li>Each rule is called a launch condition.</li>
</ul>
</li>
<li>To add one, place a Condition element <strong>inside </strong>the <strong>Product element.</strong></li>
<li>The following example shows a launch condition that checks the value of a property. I</li>
</ul>
<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;?xml version="1.0" encoding="UTF-8"?&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Wix ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;Product ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&lt;Package ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;MediaTemplate ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Property Id="MyProperty" Value="3" &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Condition Message="MyProperty must be set to 2"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;![CDATA[Installed OR MyProperty = 2]]&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Condition&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;/Product&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/Wix&gt;</p>
<h3><br /> <strong>Feature conditions and component conditions </strong></h3>
<ul>
<li>they are child elements to Feature and Component elements, respectively</li>
<li>Both <strong>prevent a specific feature or component from being installed if a condition isn't satisfied.</strong></li>
<li>Example:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;Property Id="MyProperty" Value="some value" /&gt;o&nbsp;&nbsp;&nbsp; &lt;Feature Id="MainFeature"o&nbsp;&nbsp;&nbsp; Title="Main Feature"o&nbsp;&nbsp;&nbsp; Level="1"&gt;o&nbsp;&nbsp;&nbsp; &lt;ComponentRef Id="CMP_InstallMeTXT" /&gt;o&nbsp;&nbsp;&nbsp; &lt;Condition Level="2"&gt;o&nbsp;&nbsp;&nbsp; &lt;![CDATA[MyProperty = "some value"]]&gt;o&nbsp;&nbsp;&nbsp; &lt;/Condition&gt;o&nbsp;&nbsp;&nbsp; &lt;/Feature&gt;</p>
<h3>The UIREef Element:</h3>
<h3><br /> Adding a user interface</h3>
<ul>
<li>All WiX's<strong> built-in dialog sequences, are stored in an assembly called WixUIExtension.dll</strong></li>
<li>You can add a reference to this file with Visual Studio's Add a Reference screen.</li>
<li><strong>WixUI_Minimal</strong></li>
</ul>
<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;UIRef Id="WixUI_Minimal" /&gt;</p>
<ul>
<li>This will insert the Minimal dialog set into your installation sequence that shows a license agreement and an Install button.</li>
</ul>
</div>

<h2> Tools and concepts</h2>
<div>
<h3>Viewing the MSI database using Orca.exe</h3>
<ul>
<li>MSI file is really a sort of relational database and can be viewed using orca.exe</li>
<li>msi is part of <a href="http://msdn.microsoft.com/en-us/windows/bb980924.aspx">Windows SDK</a></li>
</ul>
<h3>Turning logging on during installation</h3>
<ul>
<li>If you get into trouble with your installer, it may help to run it with logging turned on.</li>
<li>To do so, install your package from a command prompt using msiexec with the arguments /l*v, and the name of a file to write the log to.</li>
<li>For example, if you had an installer called myInstaller.msi, you could use this command to write a log during the installation to a file called myLog.txt:</li>
</ul>
<p>msiexec i myInstaller.msi l*v myLog.txt</p>
<ul>
<li>It works for uninstalls too. Simply use the /x argument instead of /i.</li>
</ul>
<h3>Installation Sequence</h3>
<ul>
<li>there are two tables in the MSI database, <strong>InstallUISequence </strong>and <strong>InstallExecuteSequence</strong>, that contain the order of<strong> installation events</strong>
<ul>
<li>For example, AppSearch always happens before launch conditions.</li>
</ul>
</li>
</ul>
<h3>InstallUISequence</h3>
<ul>
<li>The InstallUISequence is both the name of a database table in the MSI package and a way of referring to the first half of the installation.</li>
<li>During this time, we can show a graphical user interface and execute tasks that don't alter the user's computer, such as using AppSearch and evaluating launch conditions</li>
</ul>
<h3>InstallExecuteSequence</h3>
<ul>
<li>During this phase, changes are made to the computer such as laying down files, updating the registry, and adding a new entry in Programs and Features.</li>
<li>This part of the installation is called the server-side</li>
<li>and the InstallUISequence table is called the client-side, which is a way of conceptualizing that the two are run in different sessions and with different privileges.</li>
<li>The client-side runs as the user who launched the MSI while the server-side is run as the <strong>LocalSystem </strong></li>
</ul>
<h3>Execute standard actions</h3>
<ul>
<li><strong>The InstallValidate action </strong>uses the total calculated by the costing phase to verify that there's enough disk space available, and whether any running processes have a lock on files</li>
<li><strong>The InstallInitialize action</strong> marks the beginning of the "deferred" stage of the Execute sequence</li>
<li><strong>The ProcessComponents action </strong>makes note of the components that are in your installer and stores their GUIDs in the registry.It tracks which file is the keypath for each component</li>
<li>During uninstallation, <strong>UnpublishFeatures </strong>removes component-to-feature mappings in the registry and discards information about which features were selected.</li>
<li>The <strong>RemoveRegistryValues action </strong>looks at the MSI's Registry and RemoveRegistry tables to find registry items to remove during an uninstall</li>
<li>The <strong>RemoveShortcuts action </strong>removes any shortcuts during uninstallation that your installer created.</li>
<li>During uninstallation, the <strong>RemoveFiles action</strong> deletes files and folders that were copied to the system</li>
<li>The <strong>InstallFiles action</strong> uses information from the Directory and File tables to copy files and folders into their appropriate locations.</li>
<li>During installation, <strong>CreateShortcuts </strong>adds shortcuts as specified in the Shortcut table.</li>
<li>You can use the WiX elements RegistryKey and RegistryValue to write to the registry. The <strong>WriteRegistryValues action</strong> does the work.</li>
<li>The <strong>RegisterUser action</strong> records to the registry who the user was who initiated the installation.</li>
<li>The<strong> RegisterProduct action</strong> registers your product with Programs and Features and stores a copy of the MSI package in the Windows Installer Cache, found at %WINDIR%\Installer</li>
<li>The<strong> InstallFinalize action</strong> marks the end of the rollback-protected stage called the deferred phase. I</li>
</ul>
<h3>Immediate versus deferred</h3>
<ul>
<li>There are reasons for <strong>separating the installation into two parts. </strong></li>
<li>The biggest is to have an obvious time during which the end user should expect changes to be made to the system.</li>
<li>During the UI phase , they can safely fill information into the UI's dialogs without the fear that their computer will be altered.</li>
<li>Typically, it isn't until they click a button labeled Install that changes begin to take effect.</li>
<li>Therefore, the standard actions only make system changes during the second half, during the Execute sequence.</li>
<li>By keeping all system changes in one area, Windows Installer is able to offer something else: rollback protection if an error occurs.</li>
<li>It works in the following way: no changes to the system are made when the Execute phase starts.</li>
<li>At first, the installer reads what actions are in the InstallExecuteSequence table and prepares itself by storing a script of what's to be done.</li>
<li>All actions between InstallInitialize and InstallFinalize are included.</li>
<li>This initial phase, when the script is prepared but the rollback protection hasn't started yet, is called the Execute sequence's immediate phase.</li>
<li>Once things actually start happening, it's called the deferred stage.</li>
<li>If an error occurs, the installer will use the script it created to roll back the actions that had taken place up to that point.</li>
<li>Only the deferred stage has rollback protection.</li>
<li>The UI sequence does not have this feature and so actions that alter the system should never take place there.</li>
</ul>
<h3>Custom actions</h3>
<ul>
<li>custom actions is making your own actions and scheduling them appropriately</li>
<li>Any custom action that changes the system, should happen during the deferred stage of the Execute sequence,
<ul>
<li>whether it involves changing files, setting up databases, or adjusting user rights,</li>
<li>Otherwise, you're free to place them where you like during either the UI or the Execute sequence.</li>
</ul>
</li>
<li>Custom actions are declared with the<strong> CustomAction element. </strong></li>
<li>Use its <strong>Execute attribute to define how it should run</strong>,</li>
<li>use its<strong> Return attribute</strong> to tell how its return status should be treated.</li>
<li>For example, this would declare a custom action called MyAction that runs during the deferred stage and is checked for success upon completion:</li>
</ul>
<p>&lt;CustomAction Id="MyAction" Execute="deferred"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Return="check" ... /&gt;</p>
<ul>
<li>There are 7 specific<strong> types of custom actions</strong> that add their own necessary attributes,Including:
<ul>
<li>Setting a Windows Installer property</li>
</ul>
</li>
</ul>
<p>&sect;&nbsp; &lt;CustomAction&sect;&nbsp; Id="rememberInstallDir"&sect;&nbsp; Property="ARPINSTALLLOCATION"&sect;&nbsp; Value="[INSTALLLOCATION]" /&gt;</p>
<ul>
<li>Setting the location of a directory</li>
</ul>
<p>&sect;&nbsp; &lt;CustomAction Id="SetAppDataDir"&sect;&nbsp; Directory="DataDir"&sect;&nbsp; Value="[CommonAppDataFolder]MyProduct"&sect;&nbsp; /&gt;</p>
<ul>
<li>Running embedded VBScript or JScript code</li>
</ul>
<p>&sect;&nbsp; &lt;CustomAction Id="testVBScript" Script="vbscript"&sect;&nbsp; Execute="immediate" &gt;&sect;&nbsp; &lt;![CDATA[&sect;&nbsp; msgbox "this is embedded code..."&sect;&nbsp; msgbox "MyProperty: " &amp;&sect;&nbsp; Session.Property("MyProperty")&sect;&nbsp; ]]&gt;&sect;&nbsp; &lt;/CustomAction&gt;&sect;&nbsp; &nbsp;&sect;&nbsp; &nbsp;&sect;&nbsp; &lt;InstallUISequence&gt;&sect;&nbsp; &lt;Custom Action="testVBScript"&sect;&nbsp; After="LaunchConditions" &gt;&sect;&nbsp; &lt;InstallUISequence&gt;</p>
<ul>
<li>Calling an external VBScript or JScript file
<ul>
<li>Let's say we have a file called myScript.vbs that contains a function called myFunction:</li>
</ul>
</li>
</ul>
<p>&sect;&nbsp; Function myFunction()&sect;&nbsp; &nbsp;&nbsp;If Session.Property("MY_PROPERTY") = "1" Then&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;msgbox "Property is 1. Returning success!"&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;myFunction = 1&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;Exit Function&sect;&nbsp; &nbsp;&nbsp;End If&sect;&nbsp; &nbsp;&nbsp;msgbox "Property not 1. Returning failure."&sect;&nbsp; &nbsp;&nbsp;myFunction = 3&sect;&nbsp; &nbsp;&nbsp;Exit Function&sect;&nbsp; End Function&sect;&nbsp; &lt;Binary Id="myScriptVBS" SourceFile=".\myScript.vbs"/&gt;&sect;&nbsp; &nbsp;&sect;&nbsp; &lt;CustomAction&sect;&nbsp; Id="myScript_CA"&sect;&nbsp; BinaryKey="myScriptVBS"&sect;&nbsp; VBScriptCall="myFunction"&sect;&nbsp; Execute="immediate"&sect;&nbsp; Return="check" /&gt;</p>
<ul>
<li>Calling a method from a dynamic-link library
<ul>
<li>Create a new C# Custom Action Project and you'll get a source file that references the Microsoft.Deployment.WindowsInstaller namespace.</li>
</ul>
</li>
</ul>
<p>&sect;&nbsp; myCustomActions.cs&sect;&nbsp; using System;&sect;&nbsp; using Microsoft.Deployment.WindowsInstaller;&sect;&nbsp; namespace myLibrary&sect;&nbsp; {&sect;&nbsp; &nbsp;&nbsp;public class CustomActions&sect;&nbsp; &nbsp;&nbsp;{&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;[CustomAction]&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;public static ActionResult MyFunction(Session session)&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;{&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string myProperty = session["myProperty"];&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ActionResult.Success;&sect;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;}&sect;&nbsp; &nbsp;&nbsp;}&sect;&nbsp; }</p>
<ul>
<li>In wsx file:</li>
</ul>
<p>&sect;&nbsp; &lt;Binary Id="myCustomActionsDLL"&sect;&nbsp; SourceFile=".\myCustomActions.CA.dll" /&gt;&sect;&nbsp; &nbsp;&sect;&nbsp; Then&sect;&nbsp; &lt;CustomAction&sect;&nbsp; Id="CA_myCustomAction"&sect;&nbsp; BinaryKey="myCustomActionsDLL"&sect;&nbsp; DllEntry="MyFunction"&sect;&nbsp; Execute="immediate"&sect;&nbsp; Return="check" /&gt;&sect;&nbsp; &nbsp;&sect;&nbsp; Then, schedule it to run:&sect;&nbsp; &nbsp;&sect;&nbsp; &lt;InstallUISequence&gt;&sect;&nbsp; &lt;Custom Action="CA_myCustomAction"&sect;&nbsp; After="CostFinalize" &gt;&sect;&nbsp; &lt;InstallUISequence&gt;</p>
<ul>
<ul>
<ul>
<li>&nbsp;</li>
</ul>
</ul>
</ul>
<ul>
<li>Deployment Tools Foundation (DTF). DTF is a library that allows you to write .NET code that can interact with the lower-level Windows Installer technology.</li>
<li>It provides a number of useful classes under the Microsoft.Deployment.WindowsInstaller namespace</li>
</ul>
<ul>
<li>Running an executable</li>
</ul>
<p>&sect;&nbsp; &lt;Binary&sect;&nbsp; Id="myProgramEXE"&sect;&nbsp; SourceFile="$(sys.SOURCEFILEDIR)myProgram.exe" &gt;&sect;&nbsp; &nbsp;&sect;&nbsp; &lt;CustomAction&sect;&nbsp; Id="myProgramEXE_CA"&sect;&nbsp; BinaryKey="myProgramEXE"&sect;&nbsp; Impersonate="yes"&sect;&nbsp; Execute="deferred"&sect;&nbsp; ExeCommand=""&sect;&nbsp; Return="check" &gt;</p>
<ul>
<li>Sending an error that stops the installation</li>
</ul>
<ul>
<li>To add our custom action to the Execute sequence, we'll use the <strong>InstallExecuteSequence </strong>element and the Custom element.</li>
</ul>
<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;?xml version="1.0" encoding="UTF-8"?&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;Product ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Package ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Media ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;CustomAction Id="MyAction" Execute="deferred"&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return="check" ... &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;InstallExecuteSequence&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Custom Action="MyAction"&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;After="InstallInitialize" &gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/InstallExecuteSequence&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;/Product&gt;&lt;/Wix&gt;</p>
<h3>Rollback custom actions</h3>
<p>&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CustomAction Id="systemChangingCA" Execute="deferred"&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Script="vbscript"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgbox "Imagine this changes the system in some&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; way"&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CustomAction&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CustomAction Id="myRollbackCA" Execute="rollback"&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Script="vbscript"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msgbox "Imagine this undoes the changes"&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CustomAction&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;CustomAction Id="causeError" Execute="deferred"&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Script="vbscript"&gt;&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Err.Raise 507&middot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/CustomAction&gt;</p>
<ul>
<li>We'll schedule these during the Execute sequence:</li>
</ul>
<p>o&nbsp;&nbsp;&nbsp; &lt;InstallExecuteSequence&gt;o&nbsp;&nbsp;&nbsp; &lt;Custom Action="myRollbackCA"o&nbsp;&nbsp;&nbsp; Before="systemChangingCA" &gt;o&nbsp;&nbsp;&nbsp; &lt;Custom Action="systemChangingCA"o&nbsp;&nbsp;&nbsp; After="InstallInitialize" &gt;o&nbsp;&nbsp;&nbsp; &lt;Custom Action="causeError"o&nbsp;&nbsp;&nbsp; After="systemChangingCA" &gt;o&nbsp;&nbsp;&nbsp; &lt;InstallExecuteSequence&gt;</p>

</div>
</div>


