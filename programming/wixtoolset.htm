<head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1' />
    <link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.css'>
    <script src='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
    <script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
    <button onclick='toggleAll(this);'>-</button>

<h1>WiX TOOLSET</h1>
    
<h2>References</h2>
<div>
<p>
    <a href="https://wixtoolset.org/docs/intro/">Main</a>
    <a href="https://github.com/wixtoolset/">on github</a>
</p>
</div>

<h2>Overview</h2>
<div>
<h3>what?</h3> 
<div>
<p>
The WiX Toolset creates Windows installation packages from XML source code.
It lets developers create <b>installers for Windows Installer</b> ( the Windows installation engine).
To check current version of windows Installer ( msiexec.exe) type:
    <code> msiexec /? </code>
    
    -<b>benifits of installers</b>:
        . All of your executable files can be packaged into one convenient bundle, 
        simplifying deployment Your software is automatically registered with Programs and Features

        . Windows takes care of uninstalling all of the components that make up your product 
            when the user chooses to do so

        . If files for your software are accidently removed, 
        they can be replaced by right-clicking on the MSI file and selecting Repair

        . You can create different versions of your installer
        and detect which version has been installed

        . You can create patches to update only specific areas of your application

        . If something goes wrong while installing your software, 
        the end user's computer can be rolled back to a previous state

        . You can create Wizard-style dialogs to guide the user through the installation

    - <b>Toolset</b>
    It was originally a <b>set of build tools</b> that build Windows Installer packages 
    using the same build concepts as the rest of your product:
    source code is compiled and then linked to create executables;
    in this case 
     &emsp;       .exe setup bundles, 
     &emsp;       .msi installation packages, 
     &emsp;       .msm merge modules, 
     &emsp;       and .msp patches. 
    
- WiX includes several extensions that offer functionality beyond that of Windows Installer.
    For example, 
    &emsp; WiX can install IIS web sites
    &emsp; , create SQL Server databases
    &emsp; , and register exceptions in the Windows Firewall
    &emsp; , among others.

    - With <b>burn.exe</b>, the WiX bootstrapper, 
    you can create setup bundles that install prerequisites 
    like the .NET Framework and other runtimes along with your own product. 
    Burn lets you download packages or combine them into a single downloadable .exe.
    
    - <b>Votive</b> :
    The WiX toolset provides files that update Visual Studio 
    to provide new WiX IntelliSense and project templates.
    There are 7 new project templates:
    <pre>
     &emsp; . Setup Project       : Creates a Windows Installer package from one or more WiX source files.
                It create a new .wxs (WiX source file) for you to add XML markup to
     &emsp; . Merge Module Project: Creates a merge module (MSM) file
     &emsp; . Setup Library Project: Creates a .wixlib library
     &emsp; . Bootstrapper Project : Creates a prerequisite bootstrapper
     &emsp; . C# Custom Action Project: Creates a .NET custom action in C#
     &emsp; . C++ Custom Action Project: Creates an unmanaged C++ custom action
     &emsp; . VB Custom Action Project: Creates a VB.NET custom action
     </pre>
 </p>
</div>

<h3>3 ways of using <b>WiX v4</b></h3>
<div>
   <p>
        1- Visual Studio
        <b>HeatWave Community Edition</b>is released by FireGiant to support WiX v4 SDK-style MSBuild projects in Visual Studio. 
        
        HeatWave supports:

        &emsp; . Conversion of WiX v3 projects and authoring
        &emsp; . Building of WiX v4 SDK-style projects
        &emsp; . Project and item templates
        &emsp; . Property pages to control how the project builds
        HeatWave Community Edition is available free of charge.

    2- Command-line .NET tool
        For example, 
        the build command lets you build MSI packages, bundles, and other package types.

        To install the <b>Wix.exe</b> .NET tool:  (The wix.exe tool requires the .NET SDK, version 6 or later)
        <cl>dotnet tool install --global wix --version 4.0.0</cl>
        
        To verify Wix.exe was successfully installed:
        <cl>wix --version</cl>

    3- MSBuild on the command line and CI/CD build systems( like GitHub Actions )
        SDK-style projects, have smart defaults that make for simple .wixproj project authoring.
        For example, here's a minimal .wixproj 
        that builds an MSI from the .wxs source files in the project directory:
    </p>
    <pre><code>
        <Project Sdk="WixToolset.Sdk/4.0.0">
        </Project>
    </code></pre>
</div>

</div>

<h2>In visual studio</h2>
<div>
<p>
download:
    http://www.wixtoolset.org
    https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm
    https://marketplace.visualstudio.com/items?itemName=WixToolset.WixToolsetVisualStudio2022Extension

Setup:
    After completing the installation, open Visual Studio and go to 
        File | New | Project | Windows Installer XML.

Create
    . Select the Setup Project template from the list of available project types. 
    . The version of .NET that's displayed has no bearing on the project
        since it's comprised of XML mark-up and not .NET code. 
    . Give the project a name and click on OK
    
    The project will initially include a file named <b>Product.wxs</b>  (WiX source), 
    which contains the skeleton markup you'll need to create an installer:
</p>
 <pre><code>
    <?xml version="1.0" encoding="UTF-8"?>
    <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
     <Product Id="*"
        Name="My Software"
        Language="1033"
        Version="1.0.0.0"
        Manufacturer="My Company"
        UpgradeCode="889e2707-5235-4d97-b178-cf0cb55d8ab8"
     >
        <Package InstallerVersion="200"
            Compressed="yes"
            InstallScope="perMachine"
            />
        <MajorUpgrade DowngradeErrorMessage="A newer version of
        [ProductName] is already installed." 
        />
        
        <MediaTemplate />

        <Feature Id="ProductFeature"
            Title="MyFirstWixProject" Level="1">
            <ComponentGroupRef Id="ProductComponents" />
        </Feature>
      </Product>
     
      <Fragment>
        <Directory Id="TARGETDIR" Name="SourceDir">
            <Directory Id="ProgramFilesFolder">
               <Directory Id="INSTALLFOLDER"
                Name="My Software" />
            </Directory>
        </Directory>
     </Fragment>
     <Fragment>
     <ComponentGroup Id="ProductComponents"
     Directory="INSTALLFOLDER">
     <!-- TODO: Remove the comments around this Component
     element and the ComponentRef below in order to add
     resources to this installer. -->
     <!-- <Component Id="ProductComponent"> -->
     <!-- TODO: Insert files, registry keys, and other
     resources here. -->
     <!-- </Component> -->
     </ComponentGroup>
     </Fragment>
    </Wix>
</code></pre>
<p>
 - WiX 3.9 supports Visual Studio 2013
 
- Even the most minimal installer must have the following XML elements:
   &emsp; .   An XML declaration
   &emsp; .   A Wix element that serves as the root element in your XML document
   &emsp; .   A Product element that is a child to the Wix element,
   &emsp;     but all other elements are children to it
   &emsp; .   A Package element
   &emsp; .   A Media or MediaTemplate element
   &emsp; .   At least one Directory element with at least one child Component element
   &emsp; .   A Feature element
</p>
</div>

<h2>Concepts</h2>
<div>
<h3>Burn bundles</h3>
<div>
 <p>
     - The <b>Bundle element</b> is the top-level element for a Burn bundle. 
    -  It contains child elements that let you specify 
   &emsp;&emsp; the chain of packages to be installed 
   &emsp;&emsp; ,the bootstrapper application that provides the user experience
   &emsp;&emsp; ,custom and built-in variables 
   &emsp;&emsp; ,system searches 
   &emsp;&emsp; ,and all the other goodies that let you define a bundle.
</P>
<pre><code>
    <Wix
    xmlns="http://wixtoolset.org/schemas/v4/wxs"
    xmlns:bal="http://wixtoolset.org/schemas/v4/wxs/bal">

    <Bundle
        Name="$(BundleName)"
        Version="$(Version)"
        UpgradeCode="$(UpgradeCode)"
        Compressed="no"
        SplashScreenSourceFile="splashscreen.bmp">

        <BootstrapperApplication>
            <bal:WixStandardBootstrapperApplication
                LicenseUrl=""
                Theme="hyperlinkLicense" />
        </BootstrapperApplication>

        <Chain>
            <PackageGroupRef Id="BundlePackages" />
        </Chain>
    </Bundle>
</Wix>
</code></pre>
    
<h3>Bundle package chains</h3>
<div>

    - Burn supports the following kinds of <b>packages</b>:
 <pre>
Package	        Description
-------------------------------------------------------
BundlePackage	Another Burn bundle .exe
ExePackage	    An executable .exe installer
MsiPackage	    A Windows Installer .msi package
MspPackage	    A Windows Installer .msp patch package
MsuPackage	    A Windows update .msu package
    </pre>
    <p>
- To include a package in a bundle's chain of packages:

    . Include the package element as a child of the Chain element.
    . Include the package element as a child of a PackageGroup element 
      and include that package group in the chain with a PackageGroupRef element as a child of the Chain element.
 </p>
 <pre><code>
    <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
        <Bundle>
            <Chain>
                <PackageGroupRef Id="BundlePackages" />
    
                <ExePackage
                    DetectCondition="DetectedSomethingVariable"
                    UninstallArguments="-uninstall"
                    SourceFile="EndOfChain.exe" />
            </Chain>
        </Bundle>
    
        <Fragment>
            <PackageGroup Id="BundlePackages">
                <PackageGroupRef Id="PrereqPackages" />
                <MsiPackage Id="PackageA" SourceFile="PackageA.msi" />
                <MsiPackage Id="PackageB" SourceFile="PackageB.msi" />
            </PackageGroup>
        </Fragment>
    
        <Fragment>
            <PackageGroup Id="PrereqPackages">
                <MsiPackage SourceFile="Prereqs.msi">
                    <MsiProperty Name="PREREQSONLY" Value="1" />
                </MsiPackage>
            </PackageGroup>
        </Fragment>
    </Wix>
</code></pre>
</div>
    
<h3>Bootstrapper applications</h3>
<div>
<p>
- Each bundle needs a bootstrapper application to implement the user experience,
  including business logic and UI. 
  
- WiX includes two BAs:
    .<b>WixStandardBootstrapperApplication (WixStdBA) </b> 
      provides a simple, wizard-like UI and typical BA behavior.
      
      The UI is provided by XML files that let you change the appearance 
      without needing to change the code of the BA. 
      
      WixStdBA is written in C++, so has no additional system requirements.
    .<b>WixInternalUIBootstrapperApplication (WixIUIBA) </b>
     provides typical BA behavior and defers the UI to the UI defined in the primary MSI package. 
     
     WixIUIBA is useful when you have a complex UI defined in an MSI package and don't want to convert it to a BA.

- Here's how you might add a built-in BA to a bundle:
</p>
<pre><code>
    <Wix
    xmlns="http://wixtoolset.org/schemas/v4/wxs"
    xmlns:bal="http://wixtoolset.org/schemas/v4/wxs/bal">

    <Bundle>

        <BootstrapperApplication>
            <bal:WixStandardBootstrapperApplication
                LicenseUrl=""
                Theme="hyperlinkLicense" />
        </BootstrapperApplication>
</code></pre>
<p>
- You can also create an entirely custom bootstrapper application,
 either in native code or managed code. 
 Here's how you might reference a custom native-code BA:
</p>
<pre><code>
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
    <Bundle>
        <BootstrapperApplication>
            <BootstrapperApplicationDll
                Id="MyStandardBootstrapperApplication"
                SourceFile="bobstdba.dll" />
            <PayloadGroupRef
                Id="MyStandardBootstrapperApplicationPayloads" />
        </BootstrapperApplication>
</code></pre>
- Here's how you might reference a custom managed-code BA written in .NET 6:
<pre><code>
<Wix
    xmlns="http://wixtoolset.org/schemas/v4/wxs"
    xmlns:bal="http://wixtoolset.org/schemas/v4/wxs/bal">

    <Bundle>
        <BootstrapperApplication>
            <Payload SourceFile="MyBA.EarliestCoreMBA.deps.json" />
            <Payload SourceFile="MyBA.EarliestCoreMBA.dll"
                bal:BAFactoryAssembly="yes" />
            <Payload SourceFile="MyBA.EarliestCoreMBA.runtimeconfig.json" />
            <Payload SourceFile="mbanative.dll" />
            <Payload SourceFile="WixToolset.Mba.Core.dll" />
            <bal:WixDotNetCoreBootstrapperApplicationHost />
        </BootstrapperApplication>
</code></pre>
</div>

<h3><a href="https://wixtoolset.org/docs/tools/burn/builtin-variables/">Burn built-in variables</a> </h3>
<div></div>

<h3><a href="https://wixtoolset.org/docs/tools/burn/searches/">Burn system searches</a></h3>
<div></div>

<h3><a href="https://wixtoolset.org/docs/tools/burn/wixstdba/">WixStandardBootstrapperApplication</a></h3>
<div></div>

<h3>The Product element</h3>
<div>
<p>
This is where you define the characteristics of the software you're installing:
its name, language, version, and manufacturer. 

The end user will be able to see these properties by 
right-clicking on your MSI file,
selecting Properties,
and viewing the Summary tab. 

Most of the time,
these values will stay the same from one build of your project to the next.

The exception is when you want to increment the software's version
to indicate that it's an upgrade of a previous installation. 

In that case, you need to only change the Version attribute, and sometimes the Id attribute.
</p>
<pre><code>
<Wix ... >
<Product Id="3E786878-358D-43AD-82D1-1435ADF9F6EA"
Name="Awesome Software"
Language="1033"
Version="1.0.0.0"
Manufacturer="Awesome Company"
UpgradeCode="B414C827-8D81-4B4A-B3B6-
338C06DE3A11">
</Product>
</Wix>
</code></pre>
</div>

</div>

<h3>The Package element</h3>
<div>
<p>
Once you've defined your Product element, the next step is to nest a
Package element inside. An example is shown as follows:
</p>
<pre><code>
<Wix ... >
<Product ... >
<Package InstallerVersion="301"
Compressed="yes"
InstallScope="perMachine"
Manufacturer="Awesome Company"
Description="Installs Awesome Software"
Keywords="Practice,Installer,MSI"
Comments="(c) 2012 Awesome Company" >
<Product>
</Wix>
</code></pre>
Of the attributes shown in this example, only Compressed is really required.

By setting Compressed to yes, 
you're telling the installer to package all of the MSI's resources into CAB files. 

Technically, an Id attribute is also required, but by omitting it you're letting WiX create one for you.
</div>

<h3>The MediaTemplate element</h3>
<p>
The files that you intend to install are compressed into CAB files and shipped along with the installer.

You decide whether to embed them inside the MSI or provide them visibly alongside it.

In WiX 3.6, a single MediaTemplate element handles all the details for you, 
intelligently splitting your files into the prescribed number of CAB files.

Add it after the Package element, as shown in the following code snippet
</p>
<pre><code>
<Wix …>
<Product … >
<Package … />
<MediaTemplate EmbedCab="yes" >
<Product>
</Wix>
</code></pre>
<p>
The EmbedCab attribute is optional
and sets whether the CAB files will be embedded inside the MSI,
the default being to not embed them. 

Either way, WiX will create up to 999 CAB files, 
each holding a maximum of 200 MB of data. 

You can change that limit with the MaximumUncompressedMediaSize attribute, 
set to a size in megabytes. 

If a single file is bigger than the maximum,
it will be placed into its own CAB file with enough space to accommodate it.

If you want to split your installation up into several physical disks—conjure up images 
of "Please insert disk 2"—you want to use the Media element instead.
</p>

<h3>The Media element</h3>
<p>
The Media element is an older element that was replaced by MediaTemplate
and if you use one you can't use the other. 

However, in some cases, the Media element is the only thing for the job. 

For each Media element that you add to your WiX markup, a new CAB file will be created.
</p>
<pre><code>
<Wix ... >
<Product ... >
<Package ... />
<Media Id="1"
Cabinet="media1.cab"
EmbedCab="yes" >
<Product>
</Wix>
</code></pre>
<p>
Each Media element gets a unique Id attribute to distinguish it in the MSI Media table. 

It must be a positive integer. 

If the files that you add to your installation package 
don't explicitly state which CAB file they wish to be packaged into,
they'll default to using a Media element with an Id value 

1. Therefore, your first Media element should always use an Id value of 1.
The Cabinet attribute sets the name of the CAB file.

You won't actually see this unless you set EmbedCab to no, 
in which case the file will be shipped alongside the MSI.

This is atypical, but might be done to split the installation files onto several disks.

If you do choose to split the installation up into several physical disks 
(or even virtual ISO images), you'll want to add the DiskPrompt and VolumeLabel attributes. 

</p>

<h3>The Directory element</h3>
<p>
So, now we've defined the identity of the product, 
set up its package properties, 
and told the installer to create a CAB file to package up the things that we'll eventually install. 

Then, how do you decide where your product will get installed to on the end user's computer? 

How do we set the default install path, for example, to some folder under Program Files?

When you want to install to C:\Program Files, you can use a sort of shorthand.

There are several directory properties provided by Windows Installer 
that will be translated to their true paths at install time. 

For example, ProgramFilesFolder usually translates to C:\Program Files

The
following is a list of these built-in directory properties:
</p>
<pre>
Directory property      Actual path
AdminToolsFolder        Full path to directory containing administrative tools
AppDataFolder           Full path to roaming folder for current user
CommonAppDataFolder     Full path to application data for all users
CommonFiles64Folder     Full path to the 64-bit Common Files folder
CommonFilesFolder       Full path to the Common Files folder for current user
DesktopFolder           Full path to the Desktop folder
FavoritesFolder         Full path to the Favorites folder for current user
FontsFolder             Full path to the Fonts folder
LocalAppDataFolder      Full path to folder containing local (non-roaming) applications
MyPicturesFolder        Full path to the Pictures folder
NetHoodFolder           Full path to the NetHood folder
PersonalFolder          Full path to the Documents folder for current user
PrintHoodFolder         Full path to the PrintHood folder
ProgramFiles64Folder    Full path to the 64-bit Program Files folder
ProgramFilesFolder      Full path to 32-bit Program Files folder
ProgramMenuFolder       Full path to Program Menu folder
RecentFolder            Full path to Recent folder
SendToFolder            Full path to the SendTo folder for current user
StartMenuFolder         Full path to the Start Menu folder
StartupFolder           Full path to the Startup folder
System16Folder          Full path to the 16-bit system DLLs folder
System64Folder          Full path to the System64 folder
SystemFolder            Full path to the System folder for current user
TempFolder              Full path to the Temp folder
TemplateFolder          Full path to the Template folder for current user
WindowsFolder           Full path to the Windows folder
</pre>

<h3>The Component element</h3>
<p>
Once you've mapped out the directories that you want to target or create during the installation, 
the next step is to copy files into them.

To really explain things, we'll need something to install. 

So let's create a simple text file and add it to our project's directory. 
We'll call it InstallMe.txt.

For our purposes, it doesn't really matter what's in the text file. 

We just need something for testing.

Windows Installer expects every file to be wrapped up in a component before it's installed.

It doesn't matter what type of file it is either. 

Each gets its own Component element.

Components, which always have a unique GUID, allow Windows to track
every file that gets installed on the end user's computer. 

During an installation, this information is stored away in the registry. 

This lets Windows find every piece of your product
during an uninstall so that your software can be completely removed. 

It also uses it to replace missing files during a repair, 
which you can trigger by right-clicking on an MSI file and selecting Repair.

Each Component element gets a unique GUID via its Guid attribute.

To create a GUID in Visual Studio, go to Tools | Create GUID and copy a new GUID using the registry format. 

The component's Id attribute is up to you. 

It will serve as the primary key for the component in the MSI database,
so each one must also be unique:
</p>
<pre><code>
<Component Id="CMP_InstallMeTXT"
Guid="E8A58B7B-F031-4548-9BDD-
7A6796C8460D">
<File Id="FILE_MyProgramDir_InstallMeTXT"
Source="InstallMe.txt"
KeyPath="yes" >
<Component>
</code></pre>
<p>
To add a component to a directory, you have several options. 

The first,which is the simplest, 
is to add your Component elements directly inside the target Directory element,
as given in the following code snippet
</p>
<Directory Id="TARGETDIR"
Name="SourceDir">
<Directory Id="ProgramFilesFolder">
<Directory Id="MyProgramDir"
Name="Install Practice">
<Component Id="CMP_InstallMeTXT"
Guid="E8A58B7B-F031-4548-9BDD-
7A6796C8460D">
<File Id="FILE_MyProgramDir_InstallMeTXT"
Source="InstallMe.txt"
KeyPath="yes" />
</Component>
</Directory>
</Directory>
</Directory>
<pre><code>

</code></pre>
<h3>The File element</h3>
<p>
the actual files inside components are declared with File elements.

The File elements can represent everything 
from simple text files to complex DLLs and executables. 

Remember, you should only place one file into each component.

The following example would add a file called SomeAssembly.dll to the installation package:
</p>
<pre><code>
<Component ... >
<File Id="FILE_MyProgramDir_SomeAssemblyDLL"
Name="Some Assembly.dll"
Source="SomeAssembly.dll"
KeyPath="yes" >
<Component>
</code></pre>
<p>
A File element should always get the Source attribute. 

Source defines the path to the file during compilation. 

Id, Name, and KeyPath are optional. 
The Id attribute becomes the primary key for a row in the MSI database. 

It should be something unique,
but you might consider starting it with FILE to make it clear that it refers to a File element.

If not set, the Id value will match the filename. 

Name gives you a chance to change the name of the file once it's been copied to the end user's computer.

By default, it will use the name in the Source attribute.

To mark a file as important 
(and that it should be replaced if it goes missing), set it as the KeyPath file for the component.

Since you should only ever place one file inside a component, 
in almost all cases that file should be the KeyPath file. 

If not set, the first file in the component will be the KeyPath file automatically.
</p>

<h3>The Feature element</h3>
<p>
After you've defined your components and the directories that they'll be copied into,
the next step is to define features. 

A feature is a group of components that the user can decide to install all at once.

You'll often see these in an installation dialog as a list of modules, 
called a feature tree , where each is included or excluded from the installation. 

Every component must be included in a feature.

Generally, you should group together components that rely on one another
or that form a complete, self-sufficient unit. 

That way, if a feature is disabled, you won't have orphaned files 
(files that aren't being used)  installed onto the computer.

In many instances, if your product doesn't have any optional parts, 
you'll only want to create one feature.

To create a new feature in your WiX file,
add a Feature element inside the Product element.

The following example installs three components under the feature MainProduct. 

Another feature called OptionalTools installs another component.

Components are included in a feature with the ComponentRef element. 

The Id attribute of ComponentRef targets the Id attribute from the corresponding Component element
</p>
<pre><code>
<Feature Id="MainProduct"
Title="Main Product"
Level="1">
<ComponentRef Id="CMP_MyAppEXE" />
<ComponentRef Id="CMP_ReadMeTXT" />
<ComponentRef Id="CMP_StartMenuShortcuts" >
<Feature>
<Feature Id="OptionalTools"
Title="Optional Tools"
Level="1">
<ComponentRef Id="CMP_ToolsEXE" >
<Feature>
</code></pre>

<h3>Start menu shortcuts</h3>
<p>
Having a working installer is good, 
but wouldn't it be nice to add some shortcuts to the Windows Start menu? 

First, add another Directory element that references the Start menu 
via the built-in ProgramMenuFolder property:
</p>
<pre><code>
<Directory Id="TARGETDIR"
Name="SourceDir">
<Directory Id="ProgramFilesFolder">
<Directory Id="MyProgramDir"
Name="Awesome Software" >
<Directory>
<Directory Id="ProgramMenuFolder">
<Directory Id="MyShortcutsDir"
Name="Awesome Software" />
</Directory>
</Directory>
</code></pre>
<p>
we're adding a new folder to the Start menu called Awesome Software. 

Now, we can use a DirectoryRef element to reference our new shortcuts folder,
as in the following code snippet:
</p>
<pre><code>
<DirectoryRef Id="MyShortcutsDir">
<Component Id="CMP_DocumentationShortcut"
Guid="33741C82-30BF-41AF-8246-
44A5DCFCF953">
<Shortcut Id="DocumentationStartMenuShortcut"
Name="Awesome Software Documentation"
Description="Read Awesome Software
Documentation"
Target="[MyProgramDir]InstallMe.txt" >
<Component>
</DirectoryRef>
</code></pre>
<p>
Two things that should accompany a shortcut are 
a RemoveFolder element 
and a RegistryValue element. 

RemoveFolder ensures that the new Start menu subdirectory will be removed during an uninstall.

It uses an Id attribute 
to uniquely identify a row in the MSI RemoveFile table
and an On attribute to specify when to remove the folder.

You can set On to install,uninstall, or both. 

You can specify a Directory attribute 
as well to set to the Id attribute of a Directory element to remove.

Without one, though,
the element will remove the directory defined by the parent DirectoryRef or ComponentGroup element.

The RegistryValue element is needed simply because every component must have a KeyPath item. 

Shortcuts aren't allowed to be KeyPath items as they aren't technically files. 

By adding a RegistryValue, a new item is added to the registry and this is marked as KeyPath. 

The actual value itself serves no other purpose. 

We will cover writing to the registry in more detail later.
</p>
<pre><code>
<DirectoryRef Id="MyShortcutsDir">
<Component Id="CMP_DocumentationShortcut"
Guid="33741C82-30BF-41AF-8246-
44A5DCFCF953">
<Shortcut Id="DocumentationStartMenuShortcut"
Name="Awesome Software Documentation"
Description="Read Awesome Software
Documentation"
Target="[MyProgramDir]InstallMe.txt" />
<RemoveFolder Id="RemoveMyShortcutsDir"
On="uninstall" />
<RegistryValue Root="HKCU"
Key="Software\Microsoft\AwesomeSoftware"
Name="installed"
Type="integer"
Value="1"
KeyPath="yes" />
</Component>
</DirectoryRef>
</code></pre>
<p>
There's actually another reason for using a RegistryValue element as KeyPath. 

The shortcut we're creating is being installed to a directory specific to the current user. 

Windows Installer requires that you always use a registry value as the KeyPath item
when doing this in order to simplify uninstalling the product 
when multiple users have installed it.

Another type of shortcut to add is one that uninstalls the product.

For this, add a second Shortcut element to the same component.

This shortcut will be different in that 
it will have its Target set to the msiexec.exe program, 
which is located in the System folder. 

The following example uses the predefined System64Folder directory name
because it will automatically map to either the 64-bit or 32-bit System folder,
depending on the end user's operating system.

By setting Target to the path of an executable,
you're telling Windows to launch that program when the user clicks the shortcut.

The msiexec program can remove software by using the /x argument 
followed by the ProductCode attribute of the product you want to uninstall. 

The ProductCode attribute is the Id attribute specified in the Product element.
</p>

<h3>putting it all together</h3>
The entire .wxs file:
<pre><code>
<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
<Product Id="3E786878-358D-43AD-82D1-1435ADF9F6EA"
Name="Awesome Software"
Language="1033"
Version="1.0.0.0"
Manufacturer="Awesome Company"
UpgradeCode="B414C827-8D81-4B4A-B3B6-
338C06DE3A11">
<Package InstallerVersion="301"
Compressed="yes"
InstallScope="perMachine"
Manufacturer="Awesome Company"
Description="Installs Awesome Software"
Keywords="Practice,Installer,MSI"
Comments="(c) 2012 Awesome Company" >
<MediaTemplate EmbedCab="yes" >
<!--Directory structure-->
<Directory Id="TARGETDIR"
Name="SourceDir">
<Directory Id="ProgramFilesFolder">
<Directory Id="MyProgramDir"
Name="Awesome Software" >
<Directory Id="ProgramMenuFolder">
<Directory Id="MyShortcutsDir"
Name="Awesome Software" >
</Directory>
</Directory>
</Directory>
<!--Components-->
<DirectoryRef Id="MyProgramDir">
<Component Id="CMP_InstallMeTXT"
Guid="E8A58B7B-F031-4548-9BDD-
7A6796C8460D">
<File Id="FILE_InstallMeTXT"
Source="InstallMe.txt"
KeyPath="yes" >
<Component>
</DirectoryRef>
<!--Start Menu Shortcuts-->
<DirectoryRef Id="MyShortcutsDir">
<Component Id="CMP_DocumentationShortcut"
Guid="33741C82-30BF-41AF-8246-
44A5DCFCF953">
<Shortcut Id="DocumentationStartMenuShortcut"
Name="Awesome Software
Documentation"
Description="Read Awesome Software
Documentation"
Target="[MyProgramDir]InstallMe.txt"
/>
<Shortcut Id="UninstallShortcut"
Name="Uninstall Awesome Software"
Description="Uninstalls Awesome
Software"
Target="[System64Folder]msiexec.exe"
Arguments="x [ProductCode]" >
<RemoveFolder Id="RemoveMyShortcutsDir"
On="uninstall" />
<RegistryValue Root="HKCU"
Key="Software\Microsoft\AwesomeSoftware"
Name="installed"
Type="integer"
Value="1"
KeyPath="yes" >
<Component>
</DirectoryRef>
<!--Features-->
<Feature Id="ProductFeature"
Title="Main Product"
Level="1">
<ComponentRef Id="CMP_InstallMeTXT" >
<ComponentRef Id="CMP_DocumentationShortcut" >
</Feature>
</Product>
</Wix>
</pre></code>
</div>

<h2>Adding a user interface</h2>
<div>
<p>
    There is WiX's built-in dialog you can use in sequences.

All of them are stored in an assembly called WixUIExtension.dll. 

You can add a reference to this file with Visual Studio's Add a Reference screen.

The file exists in WiX's Program Files folder.
 You may have to navigate to
C:\Program Files (x86)\WiX Toolset v3.6\bin

Once you've added the new reference,
 add the following line to your WiX source file.
 
It doesn't matter exactly where, as long as it's a child to the Product element:
</p>
<cl><UIRef Id="WixUI_Minimal" /></cl>
<p>
This will insert the Minimal dialog set into your installation sequence.

It shows a single dialog screen containing a license agreement and an Install button.

Feel free to try any of the other dialog sets.

Just replace WixUI_Minimal, with one of the other names in the UIRef element.

WixUI_Advanced and WixUI_InstallDir require some further setup to really work properly.

You can try out the following attributes:
</p>
<pre>
     WixUI_Advanced
    WixUI_FeatureTree
    WixUI_InstallDir
    WixUI_Mondo   
</pre>
</div>

<h2>Viewing the MSI database</h2>
<div>
<p>
an MSI file is really a sort of relational database.

WiX does all the work of creating tables,
 inserting rows, and matching up keys in this database. 
 
However, as we progress through the rest of the book, 
I encourage you to explore how it looks behind the scenes. 

For example, we discussed the File and Component elements. 

Sure enough, there are two tables called File 
and Component in the MSI package that contain the definitions you've set with your XML markup. 

To get inside the installer, you'll need a tool called Orca.
</p>
<h3>Orca.exe</h3>
<p>
Once you've compiled your project in Visual Studio,
 you'll have a working MSI package that can be installed by double-clicking on it.
 
 If you'd like to see the database inside, install the MSI viewer, Orca.exe. 
 
 Orca is provided as part of the Windows SDK and despite the icon of a whale on the shortcut, 
it stands for One Really Cool App. 

You can find versions of the SDK at Microsoft's Windows Development Center website:

http://msdn.microsoft.com/en-us/windows/bb980924.aspx

After you've installed the SDK (specifically, the .NET tools that are included), 
you can find the installer for Orca—Orca.msi—in the Microsoft
SDKs folder in Program Files. 

On my machine, it can be found in
C:\Program Files\Microsoft SDKs\Windows\v7.0\Bin.
Install Orca and then right-click on your MSI file and select Edit with Orca

Orca lets you view the database structure of your installer. 

This can be a big help in troubleshooting problems 
or just to get a better idea about how different elements work together. 

The following is a screenshot of the Component database:

If you wanted to, you could edit your MSI package directly with Orca. 

This is helpful when learning or trying out different concepts.

You'll need to know exactly which tables and rows to modify. 

Sometimes, though, you'll be able to just change a single value and check its effect.
</p>
</div>

<h2>Turning logging on during installation</h2>
<div>
<p>
If you get into trouble with your installer,
 it may help to run it with logging turned on. 
 
To do so, install your package from a command prompt using
msiexec with the arguments /l*v,
and the name of a file to write the log to. 

For example, if you had an installer called myInstaller.msi, 
you could use this command to write a log during the installation to a file called myLog.txt:

msiexec i myInstaller.msi l*v myLog.txt

Every event that occurs during installation will be recorded here. 

It works for uninstalls too. 

Simply use the /x argument instead of /i. 

The log can be pretty helpful, but also very verbose. 

If your installer fails midway through, you might try searching the log for the text return value 3. 

This indicates that an action returned a status of failure. 

Often, you'll also see a specific MSI error code. 

You can find its meaning by searching for that number in the MSI SDK Documentation help file that comes with WiX.

- You can also turn on logging for all MSI packages by editing the

HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer

key in the Windows Registry. 

This should be used with care though so as not to use too much disk space.
</p>
</div>

<h2>The Fragment element</h2>
<div>
<p>
Up to this point, we've been adding all of our WiX elements to the Product.wxs file.

When your installer packages hundreds of files,
 you'll find that having all of your code in one place makes reading it difficult.

You can split your elements up into multiple .wxs files
 for better organization and readability. 

Whereas your main source file, Product.wxs,
nests everything inside a Product element,
 your additional .wxs files will use Fragment elements as their roots.

The Fragment element doesn't need any attributes. 

It's simply a container.

You can place just about anything inside of it, 
such as all of your Directory elements or all of your Component elements.

For the next example, add a new WiX source file to your project 
and place the following markup inside it. 

Here, we're using the same ComponentGroup that we discussed earlier.

You can call the file Components.wxs, and it should look something like the following code snippet:
</p>
<pre><code>
    <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
        <Fragment>
        <ComponentGroup Id="MyComponentGroup"
        Directory="INSTALLLOCATION">
        <Component Id="CMP_MyProgramEXE"
        Guid="E8A58B7B-F031-4548-9BDD-
        7A6796C8460D">
        <File Id="FILE_MyProgramEXE"
        Source="MyProgram.exe"
        KeyPath="yes" >
        <Component>
        <Component Id="CMP_AnotherFileDLL"
        Guid="E9D74961-DF9B-4130-8FBC-
        1669A6DD288E">
        <File Id="FILE_AnotherFileDLL"
        Source="AnotherFile.dll"
        KeyPath="yes" >
        <Component>
        </ComponentGroup>
        </Fragment>
        </Wix>
        
</code></pre>
<p>
    Now, the markup for the components is contained within a separate file.
    We've used ComponentGroup to group them, 
    but of course, that's optional.

    To include this group in Product.wxs, 
    reference it with a ComponentGroupRef element in one of your Feature elements
    , as shown:
</p>
<pre><code>
    <Feature Id="ProductFeature"
    Title="Main Product"
    Level="1">
    <ComponentGroupRef Id="MyComponentGroup" >
    <Feature>
</code></pre>
<p>
Although the ComponentGroup element is optional, 
it allows us to reference our fragment back in our main source file. 

Referencing any single element from a fragment like this
 will pull all of the elements in the fragment into the scope of your project.
 
For components, this doesn't make much difference 
since you still have to reference all of them—
or at least a ComponentGroup element of them—inside a Feature element.

However, it makes more of a difference for other elements.

For example, properties, which are variables that you can use to store data, 
are represented by Property elements 
and could be stored in a separate file within a Fragment element. 

Then, by referencing just one of them in your main source file with a PropertyRef element, 
you'd pull all of them into your project.

With fragments, it's all or nothing. Referencing one element in the fragment references them all.

Other elements that don't have a corresponding Ref counterpart need a little more help. 

For example, there's no reference element for the Media element. 

There's no such thing as a "MediaRef". 

However, if you included a Property element in the same fragment as your Media elements, 
you could pull them in too by referencing that property with PropertyRef.

The Media.wxs file would look like the following code snippet:
</p>
<pre><code>
    <?xml version="1.0" encoding="UTF-8"?>
    <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
    <Fragment>
    <Property Id="MediaProperty"
    Value="1" >
    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes"
    >
    <Media Id="2" Cabinet="media2.cab" EmbedCab="yes"
    >
<Media Id="3" Cabinet="media3.cab" EmbedCab="yes"
>
</Fragment>
</Wix>

</code></pre>
<p>
To reference the Media elements in your project, 
reference the property that's with them.

This is done by adding the following code to Product.wxs:
</p>
<pre><code>
    <?xml version="1.0" encoding="UTF-8"?>
    <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
    <Product Id="3E786878-358D-43AD-82D1-1435ADF9F6EA"
    Name="Awesome Software"
    Language="1033"
    Version="1.0.0.0"
    Manufacturer="Awesome Company"
    UpgradeCode="B414C827-8D81-4B4A-B3B6-
    338C06DE3A11">
    <Package InstallerVersion="301"
    Compressed="yes" />
    <PropertyRef Id="MediaProperty" />
    <Directory Id="TARGETDIR"
    Name="SourceDir">
    <Directory Id="ProgramFilesFolder">
    <Directory Id="MyProgramDir"
    Name="Awesome Software" >
    <Directory>
    </Directory>
    <DirectoryRef Id="MyProgramDir">
    <Component Id="CMP_InstallMeTXT"
    Guid="E8A58B7B-F031-4548-9BDD-
    7A6796C8460D">
    <File Id="FILE_InstallMeTXT"
    Source="InstallMe.txt"
    KeyPath="yes" >
    <Component>
    </DirectoryRef>
    <Feature Id="ProductFeature"
    Title="Main Product"
    Level="1">
    <ComponentRef Id="CMP_InstallMeTXT" >
    <Feature>
    </Product>
    </Wix>
</code></pre>
<p>
Fragments are a great way of splitting up your code to make it more manageable.

As we've seen, it's easy to pull them into the scope of your project. 

You could even pull one fragment into another and then pull that one into your main source file. 

WiX will take care of running the validity checks to make sure that everything links together properly.

Note that it's possible to have more than one Fragment element in the same source file. 

In that case, you must use a reference element for each one.

They're sort of like islands. They're isolated from one another.

However, it's often simpler to stick to one fragment per file. The following file defines two fragments:
</p>
<pre><code>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
    <Fragment>
        <Property Id="MediaProperty"
        Value="1" >
        <Media Id="1"
        Cabinet="media1.cab"
        EmbedCab="yes" >
        </Fragment>
        <Fragment>
        <Property Id="MediaProperty2"
        Value="1" >
        <Media Id="2"
        Cabinet="media2.cab"
        EmbedCab="yes" >
    </Fragment>
</Wix>  
</code></pre>
<p>
Referencing the MediaProperty property with PropertyRef will only pull in
the elements in the first fragment. To get those in the second fragment,
you'd have to also reference the MediaProperty2 property.
The Fragment element is so helpful that the WiX team has employed its
use for an even bigger type of project organization: .wixlib files. These
are separate projects that by default contain a single fragment and
compile into a WiX library (.wixlib) that can be added as a reference in
your main WiX project. This allows other teams to handle their own WiX
code and send it to you already compiled. To try it out, create a new
project in your solution using the Setup Library Project template.
The contents of this type of project aren't anything you haven't seen
before. It's simply a fragment. You'll start off with the following markup:
</p>
<pre><code>
    <?xml version="1.0" encoding="UTF-8"?>
    <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
    <Fragment>
    <!-- TODO: Put your code here. -->
    </Fragment>
    </Wix>   
</code></pre>
<p>
You can add properties, components, and anything else
 you'd ordinarily be able to add to a fragment. 

When it's compiled, you'll have a .wixlib file that can be added as a reference
 in your main WiX project. 
 
Use the Add Reference option in your Solution Explorer window. 

Like other fragments,
 you'll be able to reference the .wixlib file's contents by using a reference element such as PropertyRef.
 
This is a great tool that allows multiple teams to work on the installer 
without stepping on one another's toes.

In the past, installation developers often used merge modules (.msm)
 to separate installation code.
 
 Merge modules, much like WiX libraries, contain compiled installer code 
 and offer a way of splitting up large projects.
 
 WiX libraries, which are easier to author, can serve as a replacement for merge modules.

WiX does provide an XML element called Merge for importing a merge module into your project. 

You'd probably only need to use this to install a third-party component.

However, even for dependencies such as Microsoft's Visual C++ Runtime,
 you may be able to avoid using a merge module and use an executable installer instead. 
 
An installer for the Visual C++ Runtime is available
 and by using WiX's new bootstrapper technology,
 Burn , it can be installed as a prerequisite before your ownsoftware is installed.

    
</p>
</div>

<h2>WiX v4</h2>
<div>
<p>
- WiX v4 doesn't have to be installed on every dev machine and build image like WiX v3. 
  Instead, WiX v4 follows the modern .NET model of using NuGet to deliver tools.

- WiX v4 MSBuild projects are SDK-style projects; 
  MSBuild and NuGet work together to bring down the WiX v4 MSBuild SDK NuGet package.

- Both .NET Framework MSBuild and dotnet build are supported.

- To build packages from the command line, 
  WiX v4 is available as a .NET tool, which is also a NuGet package.

- WiX extensions are delivered as NuGet packages, 
  which are usable from both MSBuild projects via PackageReference and the WiX .NET tool.

- For command-line afficionados, 
  most executables have been merged into a single wix.exe tool with commands.
  
  For example, in WiX v3, 
  you might build by calling Candle.exe one or more times to compile your authoring 
  and then calling Light.exe to link and bind the compiled authoring into an .msi package. 
  
  In WiX v4 using wix.exe, that's one command: wix build -o product.msi product.wxs.
</p>

<h3>Convert WiX authoring from the command line</h3>
<div>
<p>
- By default, wix convert converts the files in place, 
  overwriting the original files. 
  
  You can add the <b>--dry-run</b> switch 
   to have <b>wix convert report</b> on what changes it would make without actually making them.

- To convert WiX v3 authoring to WiX v4 from the command line, 
    first install the WiX .NET tool. 
    
    Then you can run <b>wix convert</b>
- To convert an individual WiX source file:
    <b>wix convert path\to\file.wxs</b> .

- To convert all WiX source files in a specified directory:
    <b>wix convert path\to\*.wxs</b> .

- To convert all WiX source,
   include, and localization files in a specified directory:
   <b>wix convert path\to\*.wx?</b> .

- To convert all WiX source, 
  include, and localization files in a specified directory tree: 
  <b>wix convert --recurse path\to\*.wx?</b> .
 </p>
</div>

<h3>Convert WiX projects and authoring from Visual Studio</h3>
<div>
<p>
- <b>FireGiant's HeatWave Community Edition</b> includes support for 
     converting WiX v3 authoring (like using wix convert) 
     and converting WiX v3 .wixproj MSBuild projects to SDK-style WiX v4 projects.
</p>
</div>
</div>

<h2>MSBuild</h2>
<div>
 <a href="https://wixtoolset.org/docs/tools/msbuild/">MSBuild</a>   
</div>

<h2>Wix.exe command-line reference</h2>
<div>
    <a href="https://wixtoolset.org/docs/tools/wixexe/">wix.exe reference</a>
</div>

<h2>WiX extensions and custom actions</h2>
<div>
    <a href="https://wixtoolset.org/docs/tools/wixext/">WiX extensions and custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/wixui/">WixUI dialog library</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/util/">Utility custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/quietexec/">Quiet execution custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/wininfo/">Windows information custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/dotnet/">Detecting and installing .NET</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/vs/">Visual Studio detection properties and custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/directx/">DirectX custom action</a>
</div>

<h2>Deployment Tools Foundation</h2>
<div>
<p>
    Deployment Tools Foundation is a rich set of .NET class libraries and related resources
     that together bring the Windows deployment platform technologies into the .NET world.
     including:
     &emsp;   Working with MSI Databases
     &emsp;   Working with Cabinet Files
     &emsp;   Working with Install Packages
     &emsp;   Managed Custom Actions
</p>
     <a href="https://wixtoolset.org/docs/tools/dtf/">Deployment tools</a>
</div>

<h2>Preprocessors</h2>
<div>
<p>
    The WiX preprocessor lets you 
    use variables in your WiX authoring,
     share fragments of WiX authoring, 
     and conditionally include or exclude XML elements based on conditional expressions. 
</p>
    <a href="https://wixtoolset.org/docs/tools/preprocessor/">Preprocessors</a>
</div>

<h2>Signing packages and bundles</h2>
<div>
- Windows Installer packages can be signed directly by signing tools like Signtool.exe.
- However, you can also sign cabinets that are external to the .msi file 
  and include those signatures in the .msi so Windows Installer can verify that the cabinets haven't been tampered with.

    <a href="https://wixtoolset.org/docs/tools/signing/">Details</a>
</div>

<h2>Windows Installer patches</h2>
<div>
- Windows Installer patching allows you to update an installed product without a full upgrade. 
- Patches contain the differences between an older version of a package (called the target) and the newer version (the update).
- Because they contain only the differences, patches are typically smaller than the full update package and typically install more quickly.
<a href="https://wixtoolset.org/docs/tools/patches/">Description</a>
</div>

<h2>Code Pages</h2>
<div>
When it was first developed and introduced, Windows Installer was available for Windows 95 and Windows 98. 
While the 90s were a great decade, those 16-bit versions of Windows came with some significant limitations.
 One of them is lack of support for Unicode. 
 Windows Installer inherited that limitation 
 and uses code pages to support characters outside of the traditional 7-bit ASCII we know and love.
 <a href="https://wixtoolset.org/docs/tools/codepage/">More Description</a>
</div>

<h2>Heat harvesting</h2>
<div>
    <a href="https://wixtoolset.org/docs/tools/heat/">Details</a>
</div>

<h2>WiX managed SDK</h2>
<div>
    <a href="WiX managed SDK">Api</a>
</div>

<h2>Schema reference</h2>
<div>
    https://wixtoolset.org/docs/schema/
</div>

<h2>Development</h2>
<div>
    So you want to hack on the WiX Toolset? Excellent! WiX development happens on GitHub, so you'll need an account there. 
    You'll need to create a fork of the Git repository for WiX v4 on GitHub and clone it to your development machine.
    <a href="https://wixtoolset.org/docs/development/">details</a>
</div>

</body>
