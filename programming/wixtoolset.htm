<head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1' />
    <link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/nhab/assets/css/blocks.css'>
    <script src='https://cdn.jsdelivr.net/gh/nhab/nhab/assets/js/blocks.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
    <script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
    <button onclick='toggleAll(this);'>-</button>

<h1>WiX TOOLSET</h1>
    
<h2>References</h2>
<div>
<p>
    <a href="https://wixtoolset.org/docs/intro/">Main</a>
    <a href="https://github.com/wixtoolset/">on github</a>
</p>
</div>

<h2>Overview</h2>
<div>
<h3>what?</h3> 
<div>
<p>
The WiX Toolset creates Windows installation packages from XML source code.
It lets developers create <b>installers for Windows Installer</b> ( the Windows installation engine).
To check current version of windows Installer ( msiexec.exe) type:
    <code> msiexec /? </code>
    
    -<b>benifits of installers</b>:
        . All of your executable files can be packaged into one convenient bundle, 
        simplifying deployment Your software is automatically registered with Programs and Features

        . Windows takes care of uninstalling all of the components that make up your product 
            when the user chooses to do so

        . If files for your software are accidently removed, 
        they can be replaced by right-clicking on the MSI file and selecting Repair

        . You can create different versions of your installer
        and detect which version has been installed

        . You can create patches to update only specific areas of your application

        . If something goes wrong while installing your software, 
        the end user's computer can be rolled back to a previous state

        . You can create Wizard-style dialogs to guide the user through the installation

    - <b>Toolset</b>
    It was originally a <b>set of build tools</b> that build Windows Installer packages 
    using the same build concepts as the rest of your product:
    source code is compiled and then linked to create executables;
    in this case 
     &nbsp;       .exe setup bundles, 
     &nbsp;       .msi installation packages, 
     &nbsp;       .msm merge modules, 
     &nbsp;       and .msp patches. 
    
- WiX includes several extensions that offer functionality beyond that of Windows Installer.
    For example, 
    WiX can install IIS web sites
    , create SQL Server databases
    , and register exceptions in the Windows Firewall
    , among others.

    - With <b>burn.exe</b>, the WiX bootstrapper, 
    you can create setup bundles that install prerequisites 
    like the .NET Framework and other runtimes along with your own product. 
    Burn lets you download packages or combine them into a single downloadable .exe.
    
    - <b>Votive</b> :
    The WiX toolset provides files that update Visual Studio 
    to provide new WiX IntelliSense and project templates.
    There are 7 new project templates:
    <pre>
            . Setup Project       : Creates a Windows Installer package from one or more WiX source files.
                It create a new .wxs (WiX source file) for you to add XML markup to
            . Merge Module Project: Creates a merge module (MSM) file
            . Setup Library Project: Creates a .wixlib library
            . Bootstrapper Project : Creates a prerequisite bootstrapper
            . C# Custom Action Project: Creates a .NET custom action in C#
            . C++ Custom Action Project: Creates an unmanaged C++ custom action
            . VB Custom Action Project: Creates a VB.NET custom action
     </pre>
 </p>
</div>

<h3>3 ways of using <b>WiX v4</b></h3>
<div>
   <p>
        1- Visual Studio
        <b>HeatWave Community Edition</b>is released by FireGiant to support WiX v4 SDK-style MSBuild projects in Visual Studio. 
        
        HeatWave supports:

        Conversion of WiX v3 projects and authoring
        Building of WiX v4 SDK-style projects
        Project and item templates
        Property pages to control how the project builds
        HeatWave Community Edition is available free of charge.

    2- Command-line .NET tool
        For example, 
        the build command lets you build MSI packages, bundles, and other package types.

        To install the <b>Wix.exe</b> .NET tool:  (The wix.exe tool requires the .NET SDK, version 6 or later)
        <cl>dotnet tool install --global wix --version 4.0.0</cl>
        
        To verify Wix.exe was successfully installed:
        <cl>wix --version</cl>

    3- MSBuild on the command line and CI/CD build systems( like GitHub Actions )
        SDK-style projects, have smart defaults that make for simple .wixproj project authoring.
        For example, here's a minimal .wixproj 
        that builds an MSI from the .wxs source files in the project directory:
    </p>
    <pre><code>
        <Project Sdk="WixToolset.Sdk/4.0.0">
        </Project>
    </code></pre>
</div>

</div>

<h2>In visual studio</h2>
<div>
<p>
download:
    http://www.wixtoolset.org
    https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm
    https://marketplace.visualstudio.com/items?itemName=WixToolset.WixToolsetVisualStudio2022Extension

Setup:
    After completing the installation, open Visual Studio and go to 
        File | New | Project | Windows Installer XML.

Create
    . Select the Setup Project template from the list of available project types. 
    . The version of .NET that's displayed has no bearing on the project
        since it's comprised of XML mark-up and not .NET code. 
    . Give the project a name and click on OK
    
    The project will initially include a file named <b>Product.wxs</b>  (WiX source), 
    which contains the skeleton markup you'll need to create an installer:
</p>
 <pre><code>
    <?xml version="1.0" encoding="UTF-8"?>
    <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
     <Product Id="*"
        Name="My Software"
        Language="1033"
        Version="1.0.0.0"
        Manufacturer="My Company"
        UpgradeCode="889e2707-5235-4d97-b178-cf0cb55d8ab8"
     >
        <Package InstallerVersion="200"
            Compressed="yes"
            InstallScope="perMachine"
            />
        <MajorUpgrade DowngradeErrorMessage="A newer version of
        [ProductName] is already installed." 
        />
        
        <MediaTemplate />

        <Feature Id="ProductFeature"
            Title="MyFirstWixProject" Level="1">
            <ComponentGroupRef Id="ProductComponents" />
        </Feature>
      </Product>
     
      <Fragment>
        <Directory Id="TARGETDIR" Name="SourceDir">
            <Directory Id="ProgramFilesFolder">
               <Directory Id="INSTALLFOLDER"
                Name="My Software" />
            </Directory>
        </Directory>
     </Fragment>
     <Fragment>
     <ComponentGroup Id="ProductComponents"
     Directory="INSTALLFOLDER">
     <!-- TODO: Remove the comments around this Component
     element and the ComponentRef below in order to add
     resources to this installer. -->
     <!-- <Component Id="ProductComponent"> -->
     <!-- TODO: Insert files, registry keys, and other
     resources here. -->
     <!-- </Component> -->
     </ComponentGroup>
     </Fragment>
    </Wix>
</code></pre>
<p>
 - WiX 3.9 supports Visual Studio 2013
 
- Even the most minimal installer must have the following XML elements:
   &#9; .   An XML declaration
   &#9; .   A Wix element that serves as the root element in your XML document
   &#9; .   A Product element that is a child to the Wix element,
   &#9;     but all other elements are children to it
   &#9; .   A Package element
   &#9; .   A Media or MediaTemplate element
   &#9; .   At least one Directory element with at least one child Component element
   &#9; .   A Feature element
</p>
</div>

<h2>Concepts</h2>
<div>
<h3>Burn bundles</h3>
<div>
 <p>
- The Bundle element is the top-level element for a Burn bundle. 
   It contains child elements that let you specify 
   the chain of packages to be installed, 
   the bootstrapper application that provides the user experience, 
   custom and built-in variables, 
   system searches, 
   and all the other goodies that let you define a bundle.
</P>
<pre><code>
    <Wix
    xmlns="http://wixtoolset.org/schemas/v4/wxs"
    xmlns:bal="http://wixtoolset.org/schemas/v4/wxs/bal">

    <Bundle
        Name="$(BundleName)"
        Version="$(Version)"
        UpgradeCode="$(UpgradeCode)"
        Compressed="no"
        SplashScreenSourceFile="splashscreen.bmp">

        <BootstrapperApplication>
            <bal:WixStandardBootstrapperApplication
                LicenseUrl=""
                Theme="hyperlinkLicense" />
        </BootstrapperApplication>

        <Chain>
            <PackageGroupRef Id="BundlePackages" />
        </Chain>
    </Bundle>
</Wix>
</code></pre>
    
<h3>Bundle package chains</h3>
<div>
<p>
- Burn supports the following kinds of packages:

Package	        Description
-------------------------------------------------------
BundlePackage	Another Burn bundle .exe
ExePackage	    An executable .exe installer
MsiPackage	    A Windows Installer .msi package
MspPackage	    A Windows Installer .msp patch package
MsuPackage	    A Windows update .msu package

- To include a package in a bundle's chain of packages:

    . Include the package element as a child of the Chain element.
    . Include the package element as a child of a PackageGroup element 
      and include that package group in the chain with a PackageGroupRef element as a child of the Chain element.
 </p>
 <pre><code>
    <Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
        <Bundle>
            <Chain>
                <PackageGroupRef Id="BundlePackages" />
    
                <ExePackage
                    DetectCondition="DetectedSomethingVariable"
                    UninstallArguments="-uninstall"
                    SourceFile="EndOfChain.exe" />
            </Chain>
        </Bundle>
    
        <Fragment>
            <PackageGroup Id="BundlePackages">
                <PackageGroupRef Id="PrereqPackages" />
                <MsiPackage Id="PackageA" SourceFile="PackageA.msi" />
                <MsiPackage Id="PackageB" SourceFile="PackageB.msi" />
            </PackageGroup>
        </Fragment>
    
        <Fragment>
            <PackageGroup Id="PrereqPackages">
                <MsiPackage SourceFile="Prereqs.msi">
                    <MsiProperty Name="PREREQSONLY" Value="1" />
                </MsiPackage>
            </PackageGroup>
        </Fragment>
    </Wix>
</code></pre>
</div>
    
<h3>Bootstrapper applications</h3>
<div>
<p>
- Each bundle needs a bootstrapper application to implement the user experience,
  including business logic and UI. 
  
- WiX includes two BAs:
    .<b>WixStandardBootstrapperApplication (WixStdBA) </b> 
      provides a simple, wizard-like UI and typical BA behavior.
      
      The UI is provided by XML files that let you change the appearance 
      without needing to change the code of the BA. 
      
      WixStdBA is written in C++, so has no additional system requirements.
    .<b>WixInternalUIBootstrapperApplication (WixIUIBA) </b>
     provides typical BA behavior and defers the UI to the UI defined in the primary MSI package. 
     
     WixIUIBA is useful when you have a complex UI defined in an MSI package and don't want to convert it to a BA.

- Here's how you might add a built-in BA to a bundle:
</p>
<pre><code>
    <Wix
    xmlns="http://wixtoolset.org/schemas/v4/wxs"
    xmlns:bal="http://wixtoolset.org/schemas/v4/wxs/bal">

    <Bundle>

        <BootstrapperApplication>
            <bal:WixStandardBootstrapperApplication
                LicenseUrl=""
                Theme="hyperlinkLicense" />
        </BootstrapperApplication>
</code></pre>
<p>
- You can also create an entirely custom bootstrapper application,
 either in native code or managed code. 
 Here's how you might reference a custom native-code BA:
</p>
<pre><code>
<Wix xmlns="http://wixtoolset.org/schemas/v4/wxs">
    <Bundle>
        <BootstrapperApplication>
            <BootstrapperApplicationDll
                Id="MyStandardBootstrapperApplication"
                SourceFile="bobstdba.dll" />
            <PayloadGroupRef
                Id="MyStandardBootstrapperApplicationPayloads" />
        </BootstrapperApplication>
</code></pre>
- Here's how you might reference a custom managed-code BA written in .NET 6:
<pre><code>
<Wix
    xmlns="http://wixtoolset.org/schemas/v4/wxs"
    xmlns:bal="http://wixtoolset.org/schemas/v4/wxs/bal">

    <Bundle>
        <BootstrapperApplication>
            <Payload SourceFile="MyBA.EarliestCoreMBA.deps.json" />
            <Payload SourceFile="MyBA.EarliestCoreMBA.dll"
                bal:BAFactoryAssembly="yes" />
            <Payload SourceFile="MyBA.EarliestCoreMBA.runtimeconfig.json" />
            <Payload SourceFile="mbanative.dll" />
            <Payload SourceFile="WixToolset.Mba.Core.dll" />
            <bal:WixDotNetCoreBootstrapperApplicationHost />
        </BootstrapperApplication>
</code></pre>
</div>

<h3><a href="https://wixtoolset.org/docs/tools/burn/builtin-variables/">Burn built-in variables</a> </h3>
<div></div>

<h3><a href="https://wixtoolset.org/docs/tools/burn/searches/">Burn system searches</a></h3>
<div></div>

<h3><a href="https://wixtoolset.org/docs/tools/burn/wixstdba/">WixStandardBootstrapperApplication</a></h3>
<div></div>

</div>
</div>

<h2>WiX v4</h2>
<div>
<p>
- WiX v4 doesn't have to be installed on every dev machine and build image like WiX v3. 
  Instead, WiX v4 follows the modern .NET model of using NuGet to deliver tools.

- WiX v4 MSBuild projects are SDK-style projects; 
  MSBuild and NuGet work together to bring down the WiX v4 MSBuild SDK NuGet package.

- Both .NET Framework MSBuild and dotnet build are supported.

- To build packages from the command line, 
  WiX v4 is available as a .NET tool, which is also a NuGet package.

- WiX extensions are delivered as NuGet packages, 
  which are usable from both MSBuild projects via PackageReference and the WiX .NET tool.

- For command-line afficionados, 
  most executables have been merged into a single wix.exe tool with commands.
  
  For example, in WiX v3, 
  you might build by calling Candle.exe one or more times to compile your authoring 
  and then calling Light.exe to link and bind the compiled authoring into an .msi package. 
  
  In WiX v4 using wix.exe, that's one command: wix build -o product.msi product.wxs.
</p>

<h3>Convert WiX authoring from the command line</h3>
<div>
<p>
- By default, wix convert converts the files in place, 
  overwriting the original files. 
  
  You can add the <b>--dry-run</b> switch 
   to have <b>wix convert report</b> on what changes it would make without actually making them.

- To convert WiX v3 authoring to WiX v4 from the command line, 
    first install the WiX .NET tool. 
    
    Then you can run <b>wix convert</b>
- To convert an individual WiX source file:
    <b>wix convert path\to\file.wxs</b> .

- To convert all WiX source files in a specified directory:
    <b>wix convert path\to\*.wxs</b> .

- To convert all WiX source,
   include, and localization files in a specified directory:
   <b>wix convert path\to\*.wx?</b> .

- To convert all WiX source, 
  include, and localization files in a specified directory tree: 
  <b>wix convert --recurse path\to\*.wx?</b> .
 </p>
</div>

<h3>Convert WiX projects and authoring from Visual Studio</h3>
<div>
<p>
- <b>FireGiant's HeatWave Community Edition</b> includes support for 
     converting WiX v3 authoring (like using wix convert) 
     and converting WiX v3 .wixproj MSBuild projects to SDK-style WiX v4 projects.
</p>
</div>
</div>

<h2>MSBuild</h2>
<div>
 <a href="https://wixtoolset.org/docs/tools/msbuild/">MSBuild</a>   
</div>

<h2>Wix.exe command-line reference</h2>
<div>
    <a href="https://wixtoolset.org/docs/tools/wixexe/">wix.exe reference</a>
</div>

<h2>WiX extensions and custom actions</h2>
<div>
    <a href="https://wixtoolset.org/docs/tools/wixext/">WiX extensions and custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/wixui/">WixUI dialog library</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/util/">Utility custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/quietexec/">Quiet execution custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/wininfo/">Windows information custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/dotnet/">Detecting and installing .NET</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/vs/">Visual Studio detection properties and custom actions</a>
    <a href="https://wixtoolset.org/docs/tools/wixext/directx/">DirectX custom action</a>
</div>

<h2>Deployment Tools Foundation</h2>
<div>
<p>
    Deployment Tools Foundation is a rich set of .NET class libraries and related resources
     that together bring the Windows deployment platform technologies into the .NET world.
     including:
        Working with MSI Databases
        Working with Cabinet Files
        Working with Install Packages
        Managed Custom Actions
</p>
     <a href="https://wixtoolset.org/docs/tools/dtf/">Deployment tools</a>
</div>

<h2>Preprocessors</h2>
<div>
<p>
    The WiX preprocessor lets you 
    use variables in your WiX authoring,
     share fragments of WiX authoring, 
     and conditionally include or exclude XML elements based on conditional expressions. 
</p>
    <a href="https://wixtoolset.org/docs/tools/preprocessor/">Preprocessors</a>
</div>

<h2>Signing packages and bundles</h2>
<div>
- Windows Installer packages can be signed directly by signing tools like Signtool.exe.
- However, you can also sign cabinets that are external to the .msi file 
  and include those signatures in the .msi so Windows Installer can verify that the cabinets haven't been tampered with.

    <a href="https://wixtoolset.org/docs/tools/signing/">Details</a>
</div>

<h2>Windows Installer patches</h2>
<div>
- Windows Installer patching allows you to update an installed product without a full upgrade. 
- Patches contain the differences between an older version of a package (called the target) and the newer version (the update).
- Because they contain only the differences, patches are typically smaller than the full update package and typically install more quickly.
<a href="https://wixtoolset.org/docs/tools/patches/">Description</a>
</div>

<h2>Code Pages</h2>
<div>
When it was first developed and introduced, Windows Installer was available for Windows 95 and Windows 98. 
While the 90s were a great decade, those 16-bit versions of Windows came with some significant limitations.
 One of them is lack of support for Unicode. 
 Windows Installer inherited that limitation 
 and uses code pages to support characters outside of the traditional 7-bit ASCII we know and love.
 <a href="https://wixtoolset.org/docs/tools/codepage/">More Description</a>
</div>

<h2>Heat harvesting</h2>
<div>
    <a href="https://wixtoolset.org/docs/tools/heat/">Details</a>
</div>

<h2>WiX managed SDK</h2>
<div>
    <a href="WiX managed SDK">Api</a>
</div>

<h2>Schema reference</h2>
<div>
    https://wixtoolset.org/docs/schema/
</div>

<h2>Development</h2>
<div>
    So you want to hack on the WiX Toolset? Excellent! WiX development happens on GitHub, so you'll need an account there. 
    You'll need to create a fork of the Git repository for WiX v4 on GitHub and clone it to your development machine.
    <a href="https://wixtoolset.org/docs/development/">details</a>
</div>

</body>
