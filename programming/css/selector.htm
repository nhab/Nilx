<html>
<head>
        <link rel="stylesheet" href="..\main.css">
</head>
<body>
    <h3 id="the-id-selector">The id Selector</h3>
    <p>:uses the id attribute of an HTML element to select a specific element.
    :X</p>
    <pre><code class="lang-html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
    <span class="hljs-selector-id">#para1</span> {
        <span class="hljs-attribute">text-align</span>: center;
        <span class="hljs-attribute">color</span>: red;
    }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"para1"</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This paragraph is not affected by the style.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>

    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
    </code></pre>

    <h3 id="the-class-selector">The class Selector</h3>
    <p>
        <p>: selects elements with a specific class attribute.
        Example</p>
        <pre><code class="lang-css"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
        <span class="hljs-selector-class">.center</span> {
            <span class="hljs-attribute">text-align</span>: center;
            <span class="hljs-attribute">color</span>: red;
        }
        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> 
        <span class="hljs-attr">class</span>=<span class="hljs-string">"center"</span>&gt;</span>
        Red and center-aligned heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>
        =<span class="hljs-string">"center"</span>&gt;</span>Red and center-aligned paragraph.
        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> 

        <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
        </code></pre>
        
        you can specify that only specific HTML elements should be affected by a class
        In the example below, only <p> elements with class="center" will be center-aligned:

        <b>Example</b>
        <code>
        p.center {
            text-align: center;
            color: red;
        }
        </code>
    </p>
    <h4 id="other-selectors">other selectors</h4>
    <table>
    <thead>
    <tr>
    <th>syntax</th>
    <th>Example</th>
    <th>Description</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>element element</td>
    <td>div p</td>
    <td>Selects all <code>&lt;p&gt;</code> elements inside <code>&lt;div&gt;</code> elements     </td>
    </tr>
    <tr>
    <td>element&gt;element</td>
    <td>div &gt; p</td>
    <td>Selects all <code>&lt;p&gt;</code> elements where the parent is a <code>&lt;div&gt;</code> element     </td>
    </tr>
    <tr>
    <td>element+element</td>
    <td>div + p</td>
    <td>Selects all <code>&lt;p&gt;</code> elements that are placed immediately after <code>&lt;div&gt;</code> elements     </td>
    </tr>
    <tr>
    <td>element1~element2</td>
    <td>p ~ ul</td>
    <td>Selects every <code>&lt;ul&gt;</code> element that are preceded by a <code>&lt;p&gt;</code> element     </td>
    </tr>
    <tr>
    <td>[attribute]</td>
    <td>[target]</td>
    <td>Selects all elements with a target attribute     </td>
    </tr>
    <tr>
    <td>[attribute=value]</td>
    <td>[target=_blank]</td>
    <td>Selects all elements with target=&quot;_blank&quot;     </td>
    </tr>
    <tr>
    <td>[attribute~=value]</td>
    <td>[title~=flower]</td>
    <td>Selects all elements with a title attribute containing the word &quot;flower&quot;     </td>
    </tr>
    <tr>
    <td>[attribute\</td>
    <td>=value]</td>
    <td>[lang\</td>
    <td>=en]</td>
    <td>Selects all elements with a lang attribute value starting with &quot;en&quot;     </td>
    </tr>
    <tr>
    <td>[attribute^=value]</td>
    <td>a[href^=&quot;https&quot;]</td>
    <td>Selects every <code>&lt;a&gt;</code> element whose href attribute value begins with &quot;https&quot;     </td>
    </tr>
    <tr>
    <td>[attribute$=value]</td>
    <td>a[href$=&quot;.pdf&quot;]</td>
    <td>Selects every <code>&lt;a&gt;</code> element whose href attribute value ends with &quot;.pdf&quot;     </td>
    </tr>
    <tr>
    <td>[attribute*=value]</td>
    <td>a[href*=&quot;w3schools&quot;]</td>
    <td>Selects every <code>&lt;a&gt;</code> element whose href attribute value contains the substring &quot;w3schools&quot;     </td>
    </tr>
    <tr>
    <td>:active</td>
    <td>a:active</td>
    <td>Selects the active link     </td>
    </tr>
    <tr>
    <td>::after</td>
    <td>p::after</td>
    <td>Insert something after the content of each <code>&lt;p</code>&gt; element </td>
    </tr>
    <tr>
    <td>::before</td>
    <td>p::before</td>
    <td>Insert something before the content of each <code>&lt;p&gt;</code> element     </td>
    </tr>
    <tr>
    <td>:checked</td>
    <td>input:checked</td>
    <td>Selects every checked <code>&lt;input&gt;</code> element     </td>
    </tr>
    <tr>
    <td>:disabled</td>
    <td>input:disabled</td>
    <td>Selects every disabled <code>&lt;input&gt;</code> element     </td>
    </tr>
    <tr>
    <td>:empty</td>
    <td>p:empty</td>
    <td>Selects every <code>&lt;p&gt;</code> element that has no children (including text nodes)     </td>
    </tr>
    <tr>
    <td>:enabled</td>
    <td>input:enabled</td>
    <td>Selects every enabled <code>&lt;input&gt;</code> element     </td>
    </tr>
    <tr>
    <td>:first-child</td>
    <td>p:first-child</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the first child of its parent     </td>
    </tr>
    <tr>
    <td>::first-letter</td>
    <td>p::first-letter</td>
    <td>Selects the first letter of every <code>&lt;p&gt;</code> element     </td>
    </tr>
    <tr>
    <td>::first-line</td>
    <td>p::first-line</td>
    <td>Selects the first line of every <code>&lt;p&gt;</code> element     </td>
    </tr>
    <tr>
    <td>:first-of-type</td>
    <td>p:first-of-type</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the first <code>&lt;p&gt;</code> element of its parent     </td>
    </tr>
    <tr>
    <td>:focus</td>
    <td>input:focus</td>
    <td>Selects the input element which has focus     </td>
    </tr>
    <tr>
    <td>:hover</td>
    <td>a:hover</td>
    <td>Selects links on mouse over     </td>
    </tr>
    <tr>
    <td>:in-range</td>
    <td>input:in-range</td>
    <td>Selects input elements with a value within a specified range     </td>
    </tr>
    <tr>
    <td>:invalid</td>
    <td>input:invalid</td>
    <td>Selects all input elements with an invalid value     </td>
    </tr>
    <tr>
    <td>:lang(language)</td>
    <td>p:lang(it)</td>
    <td>Selects every <code>&lt;p&gt;</code> element with a lang attribute equal to &quot;it&quot; (Italian)     </td>
    </tr>
    <tr>
    <td>:last-child</td>
    <td>p:last-child</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the last child of its parent     </td>
    </tr>
    <tr>
    <td>:last-of-type</td>
    <td>p:last-of-type</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the last <code>&lt;p&gt;</code> element of its parent     </td>
    </tr>
    <tr>
    <td>:link</td>
    <td>a:link</td>
    <td>Selects all unvisited links     </td>
    </tr>
    <tr>
    <td>:not(selector)</td>
    <td>:not(p)</td>
    <td>Selects every element that is not a <code>&lt;p&gt;</code> element     </td>
    </tr>
    <tr>
    <td>:nth-child(n)</td>
    <td>p:nth-child(2)</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the second child of its parent     </td>
    </tr>
    <tr>
    <td>:nth-last-child(n)</td>
    <td>p:nth-last-child(2)</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the second child of its parent, counting from the last child     </td>
    </tr>
    <tr>
    <td>:nth-last-of-type(n)</td>
    <td>p:nth-last-of-type(2)</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the second <code>&lt;p&gt;</code> element of its parent, counting from the last child     </td>
    </tr>
    <tr>
    <td>:nth-of-type(n)</td>
    <td>p:nth-of-type(2)</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the second <code>&lt;p&gt;</code> element of its parent     </td>
    </tr>
    <tr>
    <td>:only-of-type</td>
    <td>p:only-of-type</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the only <code>&lt;p&gt;</code> element of its parent     </td>
    </tr>
    <tr>
    <td>:only-child</td>
    <td>p:only-child</td>
    <td>Selects every <code>&lt;p&gt;</code> element that is the only child of its parent     </td>
    </tr>
    <tr>
    <td>:optional</td>
    <td>input:optional</td>
    <td>Selects input elements with no &quot;required&quot; attribute </td>
    </tr>
    <tr>
    <td>:out-of-range</td>
    <td>input:out-of-range</td>
    <td>Selects input elements with a value outside a specified range     </td>
    </tr>
    <tr>
    <td>:read-only</td>
    <td>input:read-only</td>
    <td>Selects input elements with the &quot;readonly&quot; attribute specified     </td>
    </tr>
    <tr>
    <td>:read-write</td>
    <td>input:read-write</td>
    <td>Selects input elements with the &quot;readonly&quot; attribute NOT specified     </td>
    </tr>
    <tr>
    <td>:required</td>
    <td>input:required</td>
    <td>Selects input elements with the &quot;required&quot; attribute specified     </td>
    </tr>
    <tr>
    <td>:root</td>
    <td>:root</td>
    <td>Selects the root element of thedocument     </td>
    </tr>
    <tr>
    <td>::selection</td>
    <td>::selection</td>
    <td>Selects the portion of an element that is selected by a user      </td>
    </tr>
    <tr>
    <td>:target</td>
    <td>#news:target</td>
    <td>Selects the current active #news element (clicked on a URL containing that anchor name)     </td>
    </tr>
    <tr>
    <td>:valid</td>
    <td>input:valid</td>
    <td>Selects all input elements with a valid value     </td>
    </tr>
    <tr>
    <td>:visited</td>
    <td>a:visited</td>
    <td>Selects all visited links     </td>
    </tr>
    </tbody>
    </table>
</body>
</html>