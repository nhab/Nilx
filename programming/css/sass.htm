<html>
<head> 
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="stylesheet" href="/nhab/assets/css/blocks.css">	
	<script src='/nhab/assets/js/blocks.js'></script>
	<link rel="stylesheet" href="/nhab/libs/highlight/androidstudio2.css">
    <script src="/nhab/libs/highlight/highlight.min.js"></script>
	<script>hljs.initHighlightingOnLoad()</script>
</head>
<body>
<button onclick="toggleAll(this);" >-</button>

<h2><input type="button" value="-"
			style="font-size:20px;margin-right:5px;vertical-align: middle;"  
			onclick="toggle(this)" />References</h2>
<div>
    <a href="https://sass-lang.com/guide">sass-lang</a>
</div>
<h2>Installing sass</h2>
npm install -g sass
(you also use 
sass --watch input.scss output.css
or the 'live sass compiler' vscode extention instead)
<h2>syntax</h2>
<div>
<pre><code>
//----------- Variables ----------------
//Scss:
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
//compiles to css:
body {
    font: 100% Helvetica, sans-serif;
    color: #333;
  }

//----------- Nesting ------------------
//scss:
nav {
    ul {
      margin: 0;
      padding: 0;
      list-style: none;
    }
}
//Compiles to:  
nav ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

 //----------- Modules ------------------
 //scss:
 // _base.scss
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
// styles.scss
@use 'base';

.inverse {
  background-color: base.$primary-color;
  color: white;
}

//compiles to css:
body {
    font: 100% Helvetica, sans-serif;
    color: #333;
  }
  
  .inverse {
    background-color: #333;
    color: white;
  }
  //-------------Import -------------
  //@import filename;
@import "variables";
@import "colors";
@import "reset";
  //------------ Mmixin ----------------
 //scss:
 @mixin theme($theme: DarkGray) {
    background: $theme;
    box-shadow: 0 0 1px rgba($theme, .25);
    color: #fff;
  }
  
  .info {
    @include theme;
  }
  .alert {
    @include theme($theme: DarkRed);
  }
  .success {
    @include theme($theme: DarkGreen);
  }
//compiles to css: 
.info {
    background: DarkGray;
    box-shadow: 0 0 1px rgba(169, 169, 169, 0.25);
    color: #fff;
  }
  
  .alert {
    background: DarkRed;
    box-shadow: 0 0 1px rgba(139, 0, 0, 0.25);
    color: #fff;
  }
  
  .success {
    background: DarkGreen;
    box-shadow: 0 0 1px rgba(0, 100, 0, 0.25);
    color: #fff;
  }
//------------ Inheritance ---------------
  //scss:
  %message-shared {
    border: 1px solid #ccc;
    padding: 10px;
    color: #333;
  }
  .success {
    @extend %message-shared;
    border-color: green;
  }
  //compiles to css:
  .success{
    border: 1px solid #ccc;
    padding: 10px;
    color: #333;
    border-color: green;
  }
//------------ extends --------------------
//scss:
.button-basic  {
    border: none;
    padding: 15px 30px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
  }
  
  .button-report  {
    @extend .button-basic;
    background-color: red;
  }
//compiles to css:
.button-basic, .button-report {
    border: none;
    padding: 15px 30px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
  }
  
  .button-report  {
    background-color: red;
  }
//------------ Operators ------------------
// scss:
@use "sass:math";

article[role="main"] {
  width: math.div(600px, 960px) * 100%;
}
//compiles to:
article[role="main"] {
    width: 62.5%;
  }
//---------- string fuunctions ---------------
//quote(string)	Adds quotes to string, and returns the result.
//Example:
quote(Hello world!)
//Result: "Hello world!"

//str-index(string, substring)	Returns the index of the first occurrence of the substring within string.
//Example:
str-index("Hello world!", "H")
//Result: 1

//str-insert(string, insert, index)	Returns string with insert inserted at the specified index position.
//Example:
str-insert("Hello world!", " wonderful", 6)
//Result: "Hello wonderful world!"

str-length(string)	Returns the length of string (in characters).
//Example:
str-length("Hello world!")
//Result: 12

str-slice(string, start, end)	Extracts characters from string; start at start and end at end, and returns the slice.
//Example:
str-slice("Hello world!", 2, 5)
//Result: "ello"

//to-lower-case(string)	Returns a copy of string converted to lower case.
//Example:
to-lower-case("Hello World!")
//Result: "hello world!"

//to-upper-case(string)	Returns a copy of string converted to upper case.
//Example:
to-upper-case("Hello World!")
//Result: "HELLO WORLD!"

//unique-id()	Returns a unique randomly generated unquoted string (guaranteed to be unique within the current sass session).
//Example:
unique-id()
//Result: tyghefnsv

//unquote(string)	Removes quotes around string (if any), and returns the result.
//Example:
unquote("Hello world!")
//Result: Hello world!

//---------- Numeric functions ------------
//abs(number)	Returns the absolute value of number.
//Example:
abs(15)
//Result: 15
abs(-15)
//Result: 15

//ceil(number)	Rounds number up to the nearest integer.
//Example:
ceil(15.20)
//Result: 16

//comparable(num1, num2)	Returns whether num1 and num2 are comparable.
//Example:
comparable(15px, 10px)
/Result: true
comparable(20mm, 1cm)
//Result: true
comparable(35px, 2em)
//Result: false

//floor(number)	Rounds number down to the nearest integer.
//Example:
floor(15.80)
//Result: 15

//max(number...)	Returns the highest value of several numbers.
//Example:
max(5, 7, 9, 0, -3, -7)
//Result: 9

//min(number...)	Returns the lowest value of several numbers.
//Example:
min(5, 7, 9, 0, -3, -7)
//Result: -7

//percentage(number)	Converts number to a percentage (multiplies the number with 100).
//Example:
percentage(1.2)
//Result: 120

//random()	Returns a random number between 0 and 1.
//Example:
random()
//Result: 0.45673

//random(number)	Returns a random integer between 1 and number.
//Example:
random(6)
//Result: 4

//round(number)	Rounds number to the nearest integer.
//Example:

round(15.20)
//Result: 15

round(15.80)
//Result: 16

//--------------  List Functions ---------------
append(list, value, [separator])	Adds a single value to the end of the list. separator can be auto, comma, or space. auto is default.

Example:
append((a b c), d)
Result: a b c d
append((a b c), (d), comma)
Result: a, b, c, d
index(list, value)	Returns the index position for the value in list.

Example:
index(a b c, b)
Result: 2
index(a b c, f)
Result: null
is-bracketed(list)	Checks whether the list has square brackets.

Example:
is-bracketed([a b c])
Result: true
is-bracketed(a b c)
Result: false
join(list1, list2, [separator, bracketed])	Appends list2 to the end of list1. separator can be auto, comma, or space. auto is default (will use the separator in the first list). bracketed can be auto, true, or false. auto is default.

Example:
join(a b c, d e f)
Result: a b c d e f
join((a b c), (d e f), comma)
Result: a, b, c, d, e, f
join(a b c, d e f, $bracketed: true)
Result: [a b c d e f]
length(list)	Returns the length of the list.

Example:
length(a b c)
Result: 3
list-separator(list)	Returns the list separator used, as a string. Can be either space or comma.

Example:
list-separator(a b c)
Result: "space"
list-separator(a, b, c)
Result: "comma"
nth(list, n)	Returns the nth element in the list.

Example:
nth(a b c, 3)
Result: c
set-nth(list, n, value)	Sets the nth list element to the value specified.

Example:
set-nth(a b c, 2, x)
Result: a x c
zip(lists)	Combines lists into a single multidimensional list.

Example:
zip(1px 2px 3px, solid dashed dotted, red green blue)
Result: 1px solid red, 2px dashed green, 3px dotted blue

//-------------Map Functions -----------
map-get(map, key)	Returns the value for the specified key in the map.

Example:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-get($font-sizes, "small")
Result: 12px
map-has-key(map, key)	Checks whether map has the specified key. Returns true or false.

Example:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-has-key($font-sizes, "big")
Result: false
map-keys(map)	Returns a list of all keys in map.

Example:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-keys($font-sizes)
Result: "small", "normal, "large"
map-merge(map1, map2)	Appends map2 to the end of map1.

Example:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
$font-sizes2: ("x-large": 30px, "xx-large": 36px)
map-merge($font-sizes, $font-sizes2)
Result: "small": 12px, "normal": 18px, "large": 24px, "x-large": 30px, "xx-large": 36px
map-remove(map, keys...)	Removes the specified keys from map.

Example:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-remove($font-sizes, "small")
Result: ("normal": 18px, "large": 24px)
map-remove($font-sizes, "small", "large")
Result: ("normal": 18px)
map-values(map)	Returns a list of all values in map.

Example:
$font-sizes: ("small": 12px, "normal": 18px, "large": 24px)
map-values($font-sizes)
Result: 12px, 18px, 24px

//----------- Selector functions ------------------
is-superselector(super, sub)	Checks whether the super selector matches all the elements that sub matches.

Example:
is-superselector("div", "div.myInput")
Result: true
is-superselector("div.myInput", "div")
Result: false
is-superselector("div", "div")
Result: true
selector-append(selectors)	Appends the second (and third/fourth etc.) selector to the first selector.

Example:
selector-append("div", ".myInput")
Result: div.myInput
selector-append(".warning", "__a")
Result: .warning__a
selector-extend(selector, extendee, extender)	 
selector-nest(selectors)	Returns a new selector containing a nested list of CSS selectors based on the list provided.

Example:
selector-nest("ul", "li")
Result: ul li
selector-nest(".warning", "alert", "div")
Result: .warning div, alert div
selector-parse(selector)	Returns a list of strings contained in selector using the same format as the parent selector.

Example:
selector-parse("h1 .myInput .warning")
Result: ('h1' '.myInput' '.warning')
selector-replace(selector, original, replacement)	Returns a new selector with the selectors specified in replacement in place of selectors specified in original.

Example:
selector-replace("p.warning", "p", "div")
Result: div.warning
selector-unify(selector1, selector2)	Returns a new selector that matches only elements matched by both selector1 and selector2.

Example:
selector-unify("myInput", ".disabled")
Result: myInput.disabled
selector-unify("p", "h1")
Result: null
simple-selectors(selectors)	Returns a list of the individual selectors in selectors.

Example:
simple-selectors("div.myInput")
Result: div, .myInput
simple-selectors("div.myInput:before")
Result: div, .myInput, :before

//----------- Introspection Functions ---------------
call(function, arguments...)	Calls a function with arguments, and returns the result.
content-exists()	Checks whether the current mixin was passed a @content block.
feature-exists(feature)	Checks whether feature is supported by the current Sass implementation.

Example:
feature-exists("at-error");
Result: true
function-exists(functionname)	Checks whether the specified function exists.

Example:
function-exists("nonsense")
Result: false
get-function(functionname, css: false)	Returns the specified function. If css is true, it returns a plain CSS function instead.
global-variable-exists(variablename)	Checks whether the specified global variable exists.

Example:
variable-exists(a)
Result: true
inspect(value)	Returns a string representation of value.
mixin-exists(mixinname)	Checks whether the specified mixin exists.

Example:
mixin-exists("important-text")
Result: true
type-of(value)	Returns the type of value. Can be number, string, color, list, map, bool, null, function, arglist.

Example:
type-of(15px)
Result: number
type-of(#ff0000)
Result: color
unit(number)	Returns the unit associated with a number.

Example:
unit(15px)
Result: px
unitless(number)	Checks whether the specified number has a unit associated with it.

Example:
unitless(15px)
Result: false
unitless(15)
Result: true
variable-exists(variablename)	Checks whether the specified variable exists in the current scope.

Example:
variable-exists(b)
Result: true

//--------------- color functions ------------------rgb(red, green, blue)	Sets a color using the Red-Green-Blue (RGB) model. An RGB color value is specified with: rgb(red, green, blue). Each parameter defines the intensity of that color and can be an integer between 0 and 255, or a percentage value (from 0% to 100%).

Example:
rgb(0, 0, 255); // rendered as blue because the blue parameter is set to its highest value (255) and the others are set to 0
rgba(red, green, blue, alpha)	Sets a color using the Red-Green-Blue-Alpha (RGBA) model. RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity of the color. The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).

Example:
rgba(0, 0, 255, 0.3); // rendered as blue with opacity
hsl(hue, saturation, lightness)	Sets a color using the Hue-Saturation-Lightness (HSL) model - and represents a cylindrical-coordinate representation of colors. Hue is a degree on the color wheel (from 0 to 360) - 0 or 360 is red, 120 is green, 240 is blue. Saturation is a percentage value; 0% means a shade of gray and 100% is the full color. Lightness is also a percentage; 0% is black, 100% is white.

Example:
hsl(120, 100%, 50%); // green
hsl(120, 100%, 75%); // light green
hsl(120, 100%, 25%); // dark green
hsl(120, 60%, 70%); // pastel green
hsla(hue, saturation, lightness, alpha)	Sets a color using the Hue-Saturation-Lightness-Alpha (HSLA) model. HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity of the color. The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).

Example:
hsl(120, 100%, 50%, 0.3); // green with opacity
hsl(120, 100%, 75%, 0.3); // light green with opacity
grayscale(color)	Sets a gray color with the same lightness as color.

Example:
grayscale(#7fffd4);
Result: #c6c6c6
complement(color)	Sets a color that is the complementary color of color.

Example:
complement(#7fffd4);
Result: #ff7faa
invert(color, weight)	Sets a color that is the inverse or negative color of color. The weight parameter is optional and must be a number between 0% and 100%. Default is 100%.

Example:
invert(white);
Result: black

//------------------------ Logic -------------------------
//@if elements
$type: monster;  
p {  
  @if $type == ocean {  
    color: blue;  
  } @else if $type == matador {  
    color: red;  
  } @else if $type == monster {  
    color: green;  
  } @else {  
    color: black;  
  }  
}  

//@for :
@for $i from 1 through 4 {  
    .p#{$i} { padding-left : $i * 10px; }  
  }   

//@each :
@each $color in pink, violet, yellow, blue {  
    .p_#{$color} {  
      background-color: #{$color};  
    }  
  }  

//@each:
@each $color, $border in (aqua, dotted),  
                        (red, solid),  
                        (green, double){  
  .#{$color} {  
    background-color : $color;  
    border: $border;  
  }  
}  

// @while :
$i: 100;  
@while $i > 0 {  
  .paddding-#{$i} { padding-left: 1px * $i; }  
  $i: $i - 20;  
}   

// @ debug :
$font-sizes: 10px + 20px;  
$style: (  
  color: #bdc3c7  
);  
.container{  
  @debug $style;  
  @debug $font-sizes;  
}   
// Now, open command prompt and run the watch command to tell SASS to watch the file and update the CSS whenever SASS file is changed.

</code></pre>
</div>
<h2>Theme Example</h2>
<div>
<pre><code>
// The layout:
&lt;body class="theme-1">
&lt;div class="container">
&lt;div class="left">
Left
&lt;/div>
&lt;div class="right">
Right
&lt;button class="button">Button</button>
&lt;/div>
&lt;/div>
&lt;/body>
&lt;/html>    

// The Sass:
@mixin themable($theme-name, $container-bg, $left-bg, $right-bg, $innertext, $button-bg) {
    .#{$theme-name} {
        .container {
            background-color: $container-bg;
            border: 1px solid #000;
            display: flex;
            height: 500px;
            justify-content: space-between;
            margin: 0 auto;
            padding: 1em;
            width: 50%;
 
            * {
                color: $innertext;
                font-size: 2rem;
            }
 
            .left {
                background-color: $left-bg;
                height: 100%;
                width: 69%;
            }
 
            .right {
                background-color: $right-bg;
                height: 100%;
                position: relative;
                width: 29%;
            }
 
            .button {
                background-color: $button-bg;
                border: 0;
                border-radius: 10px;
                bottom: 10px;
                cursor: pointer;
                font-size: 1rem;
                font-weight: bold;
                padding: 1em 2em;
                position: absolute;
                right: 10px;
            }
        }
    }
 }

 // To Change Theme :
 @include themable(theme-1, #f7eb80, #497265, #82aa91, #fff, #bc6a49);
@include themable(theme-2, #e4ada7, #d88880, #cc6359, #fff, #481b16);
</code></pre>
</div>
</body>
</html>