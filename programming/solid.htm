<head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/nhab/assets/css/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>

 <script></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
<button onclick='toggleAll(this);'>-</button>



<h2>References<h2>
<div>
<a href="https://www.freecodecamp.org/news/solid-design-principles-in-software-development/#:~:text=SOLID%20is%20a%20set%20of,while%20developing%20the%20software%20systems.">Examples </a>
</div>
<h2>solid procipals</h2>
<div>
- <b>S</b>ingle-Responsibility Principle : 
	A class should have one and only one reason to change, meaning that a class should have only one job.

-<b>O</b>pen-Closed Principle :
	Objects or entities should be open for extension but closed for modification.

-<b>L</b>iskov Substitution Principle :
	Let q(x) be a property provable about objects of x of type T. 
	Then q(y) should be provable for objects y of type S where S is a subtype of T.

-<b>I</b>nterface Segregation Principle :
	A client should never be forced to implement an interface that it doesn’t use, 
	or clients shouldn’t be forced to depend on methods they do not use.

-<b>D</b>ependency Inversion Principle :
	Entities must depend on abstractions, not on concretions. 
	It states that the high-level module must not depend on the low-level module, 
	but they should depend on abstractions.
</div>

</body>
