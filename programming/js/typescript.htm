
<head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1' />
    <link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.css'>
    <script src='https://cdn.jsdelivr.net/gh/nhab/blocks@latest/blocks.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js'></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/dark.min.css">
    <script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
    </head>
    <body onload='AddToggleButtonsToH(7);ReplaceLtGt();hljs.highlightAll();'>
     <button onclick="toggleAll(this);" >-</button>
     <h2>References</h2>
    <div>
    <pre>
        <a href="https://www.javatpoint.com/typescript-installation">Installation</a>
        </pre>
    </div>
<h2>Installing using node.js npm</h2>
<div>
<p>
Make sure node.js and npm are installed
$node -v                     // Make sure node.js is installed
$ npm -v                     // Make sure npm is installed
$ npm install typescript -g  // Install as a global module  
$ tsc -v                     // Make sure Typescript is installed
</p>
</div>

<h2>Hello world!</h2>
<div>
add following code in vscode and save the file as hello.ts:
<pre><code>
let message: string = 'Hello World';
console.log(message);
</code></pre>
<p>
- press (ctl+`) and type 
    <pre><code>tsc hello.ts </code></pre>
- This will compile and create a new helloworld.js JavaScript file.
- If you have Node.js installed, you can run 
  <pre><code>node helloworld.js </code></pre>

</p>
</div>
<h2>tsconfig.json</h2>
<div>
<pre><code>
    {
        "compilerOptions": {
          "target": "es5",
          "module": "commonjs",
          "outDir": "out"
        }
      }      
</code></pre>
 the outDir make and out folder for generated js files 
</div>
<h2>Debugging</h2>
<div>
    <p>
    VS Code has built-in support for TypeScript debugging.    
    VS Code relies on source maps for the debugger to map between the original TypeScript source code and the running JavaScript. You can create source maps during the build by setting "sourceMap": true in your tsconfig.json.
</p>
<pre><code>
    {
      "compilerOptions": {
        "target": "es5",
        "module": "commonjs",
        "outDir": "out",
        "sourceMap": true
      }
    }
</code></pre>    
<p>
With helloworld.ts open in the editor, press F5
The debugger will start a session, run your code,
 and display the "Hello World" message in the Debug console panel.

if debugging the code generates error with a message "tsc.ps1 is not digitally signed"
you can run these powershell command as administrator:
</p> 
<ore><code>
  Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
</code></ore>
</div>
<h2>Language features</h2>
<div>
 <pre><code>

//Static Typing:
//TypeScript adds static typing to JavaScript, allowing you to define variable types during development.

let num: number = 5;

//Interfaces:
//Define the structure of objects and classes.

interface Person {
  name: string;
  age: number;
}

function greet(person: Person): string {
  return `Hello, ${person.name}!`;
}

// Classes:
//Object-oriented programming with class-based syntax.

class Animal {
  constructor(public name: string) {}

  makeSound() {
    console.log("Some generic sound");
  }
}

const dog = new Animal("Dog");

// Inheritance:
// Extend classes to create hierarchical relationships.

class Dog extends Animal {
  makeSound() {
    console.log("Bark!");
  }
}

const myDog = new Dog("Buddy");

// Generics:
// Write reusable and flexible code with generics.

function identity<T>(arg: T): T {
  return arg;
}

let result = identity<string>("Hello");

// Enums:
// Create named constant values.

enum Direction {
  Up,
  Down,
  Left,
  Right,
}

let playerDirection: Direction = Direction.Right;

// Union and Intersection Types:
// Combine types for flexibility.

type StringOrNumber = string | number;

let item: StringOrNumber = "text";

// Type Assertion:
// Explicitly specify a type.

let value: any = "Hello, TypeScript!";
let length: number = (value as string).length;

// Type Inference:
// TypeScript infers types based on values.

let x = 10; // TypeScript infers x as number

// Modules:
// Organize code into reusable and maintainable files.

// math.ts
export function add(a: number, b: number): number {
  return a + b;
}

// app.ts
import { add } from './math';


// Type Guards:
// Check and narrow down types at runtime.

function isNumber(value: any): value is number {
  return typeof value === 'number';
}

let result: number | string = 5;

if (isNumber(result)) {
  // result is now treated as a number
  console.log(result + 10);
}

// Decorators:
// Add metadata and modify classes/methods at design time.

function log(target: any, key: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;
  descriptor.value = function (...args: any[]) {
    console.log(`Calling ${key} with`, args);
    const result = originalMethod.apply(this, args);
    console.log(`Result is`, result);
    return result;
  };
}

class Example {
  @log
  add(a: number, b: number): number {
    return a + b;
  }

// Intersection Types:
// Combine multiple types into one.

type Admin = {
  name: string;
  privileges: string[];
};

type Employee = {
  name: string;
  startDate: Date;
};

type AdminEmployee = Admin & Employee;

let adminEmployee: AdminEmployee = {
  name: "John",
  privileges: ["create", "edit"],
  startDate: new Date(),
};

// Mapped Types:
// Dynamically create new types based on existing ones.

type Flags = {
  option1: boolean;
  option2: boolean;
};

type NullableFlags = { [K in keyof Flags]: boolean | null };

let nullableFlags: NullableFlags = {
  option1: true,
  option2: null,
};

// Tuple Types:
// Represent an array with a fixed number of elements and each element can have its own type.

let coordinate: [number, number] = [10, 20];

// String Literal Types:
// Specify exact string values.

type Direction = "up" | "down" | "left" | "right";

let playerDirection: Direction = "right";

// Readonly Properties:
// Ensure that properties cannot be modified after initialization.

interface Point {
  readonly x: number;
  readonly y: number;
}

let point: Point = { x: 10, y: 20 };
// point.x = 5; // Error: Cannot assign to 'x' because it is a read-only property.

// Optional Chaining:
// Handle potentially undefined properties without causing runtime errors.

let user = {
  address: {
    city: "New York",
  },
};

let cityName = user?.address?.city;

// Nullish Coalescing:
// Provide a default value only when a variable is null or undefined.

let defaultValue = user.address?.city ?? "Default City";
Declaration Merging:
Combine multiple declarations into a single one.

interface Car {
  brand: string;
  speed: number;
}

interface Car {
  model: string;
}

let myCar: Car = {
  brand: "Toyota",
  speed: 120,
  model: "Camry",
};
 </code></pre>
</div>



