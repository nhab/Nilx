<html>
<head> 
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="stylesheet" href="/nhab/assets/css/blocks.css">	
    <link rel="stylesheet" href="/nhab/libs/highlight/androidstudio2.css">
    <script src="/nhab/libs/highlight/highlight.pack.js"></script>    
    <script src="/nhab/libs/jquery-3.3.1.slim.min.js" ></script>
	<script src='/nhab/assets/js/blocks.js'></script>
    <script src="../../../libs/jquery-3.3.1.slim.min.js" ></script>
    <script src="../../../libs/highlight/highlight.pack.js"></script>
  </head>
  <body>
  
      <script>
          $('code').each(function() {
          var that = $(this);
          // cache the content of 'code'
          var html = that.html().trim();
          that.empty();
          // escape the content
          that.text(html);
        });
        
        hljs.initHighlightingOnLoad();
    </script>
  
  <button onclick="toggleAll(this);" >-</button>

 <h2>
  <input type="button" value="-"
  class="toggleButton"  onclick="toggle(this)" />Resources</h2>
<div>
	izimodal: https://www.jqueryscript.net/lightbox/Responsive-CSS3-Animated-jQuery-Modal-Plugin-iziModal.html
jquery plugins:https://www.jqueryscript.net/lightbox/Responsive-CSS3-Animated-jQuery-Modal-Plugin-iziModal.html

  <a href="https://oscarotero.com/jquery/">oscarotero</a>
  <a href='https://learn2torials.com/a/what-is-ajaxwhat-is-ajax'>ajax</a>
</div> 
<h2>
<input type="button" value="-"
        class="toggleButton"  onclick="toggle(this)" />What is jquery</h2>
<div>
Is a javascript library to find and and manipulate HTML elements.  
The dollar function, $(), is used as shorthand for the getElementBy... function.  
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" /><b>1.Element Selection</b></h2>
<div>Selectors in jQuery are used to select an element
  <pre><code>
 var page = $(window);   // Selects the whole viewport     
  </code></pre>
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />Tag selector</h2>
<div>
  <pre><code>
$("someElement") : Selects all HTML elements with the given tag name. 		
 for example:
	$( "div" )
another example:
	$(document).ready(function(){
		$("button").click(function(){
			$("p").hide();
		});
	});    
  </code></pre>
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />id selector #</h2>
<div>
  <pre><code>
 var   table1   =   $  (  '#table1'  );   // Selects element with id 'table1' 
 $("#someId")	: Selects a single element with the given id attribute. 	:x  $( "#myDiv" ).
  </code></pre>
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />class selector .</h2>
<div>
  <pre><code>
var   squares   =   $  (  '.square'  );   // Selects all elements with the class 'square'
 $(".someClass")	// Selects all elements with the given class attribute. for example  $( ".myClass" ).
 var   square_p   =   $  (  'p.square'  )   // Selects paragraphs with the 'square' class     
  </code></pre>
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />multiple: selector1, selectorN, ...</h2>
<div>
  <pre><code>
    $( "div, span, p.myClass" ).
  </code></pre>
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />Combined selection</h2>
<div>
  <pre><code>
$("p.intro")	Selects all < p> elements with class="intro"
	$("p:first")	Selects the first < p > element
	$("ul li:first")	Selects the first < li > element of the first < ul >	
	$("ul li:first-child")	Selects the first < li > element of every < ul >	
	$("[href]")	Selects all elements with an href attribute
	$("a[target='_blank']")	Selects all < a > elements with a target attribute value equal to "_blank"
	$(":button")	Selects all < button > elements and < input > elements of type="button"
	$("tr:even")	Selects all even < tr > elements    
  </code></pre>
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />Hierarchy selection</h2>
<div>
  <pre><code>
//Child Selector		: 
		(“parent > child”)		// for example: $( "ul.topnav > li" ).
	//Descendant Selector 		:
		(“ancestor descendant”)		// for example: $( "form fieldset input" ).
	//Next Adjacent Selector 	: 
		(“prev + next”)			// for example: $( "label + input" ).
	//Next Siblings Selector	:
		(“prev ~ siblings”)		// for example: $( "#prev ~ div" ).    
  </code></pre>
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />filtered selection</h2>
<div>
  <pre><code>
-filter (by colon)
-Basic Filters 
	:animated
	:eq()
	:even
	:first
	:gt()
	:header
	:lang()
	:last
	:lt()
	:not()
	:odd
	:root
	:ta
-Content Filters
	:contains()
	:empty
	:has()
	:parent
-Visibility Filters
	:hidden
	:visible    : Selects all elements that are visible    :x $( "div:visible" ).
-Child Filters
	:first-child
	:first-of-type
	:last-child
	:last-of-type
	:nth-child()
	:nth-last-child()
	:nth-last-of-type()
	:nth-of-type()
	:only-child
	:only-of-type()
Forms
	:button
	:checkbox
	:checked
	:disabled
	:enabled
	:file
	:focus
	:image
	:input
	:password
	:radio
	:reset
	:selected
	:submit
	:text
-Attribute (by brackets)
[name|="value"]
[name*="value"]
[name~="value"]
[name$="value"]
[name="value"]
[name!="value"]
[name^="value"]
[name]
[name="value"][name2="value2"]    
  </code></pre>
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" /><b>2. Events and Effects</b></h2>
<div>
  <pre><code>
 // A very common event used is the <b>ready event</b> on the document 
 // You can use the 'ready' method to wait until the element has finished loading `,
 $  (  document  ).  ready  (  function  (){ 
   // Code won't execute until the document is loaded 
 }); 


 // Using defined functions :
 function   onAction  ()   { 
   // This is executed when the event is triggered 
 } 
 $  (  '#btn'  ).  click  (  onAction  );   // Invokes onAction on click 

 // Some other common events are: 
 $  (  '#btn'  ).  dblclick  (  onAction  );   // Double click 
 $  (  '#btn'  ).  hover  (  onAction  );   // Hovering over 
 $  (  '#btn'  ).  focus  (  onAction  );   // On focus 
 $  (  '#btn'  ).  blur  (  onAction  );   // Losses focus 
 $  (  '#btn'  ).  submit  (  onAction  );   // On submit 
 $  (  '#btn'  ).  select  (  onAction  );   // When an element is selected 
 $  (  '#btn'  ).  keydown  (  onAction  );   // When a key is pushed down 
 $  (  '#btn'  ).  keyup  (  onAction  );   // When a key is released 
 $  (  '#btn'  ).  keypress  (  onAction  );   // When a key is pressed 
 $  (  '#btn'  ).  mousemove  (  onAction  );   // When the mouse is moved 
 $  (  '#btn'  ).  mouseenter  (  onAction  );   // Mouse enters the element 
 $  (  '#btn'  ).  mouseleave  (  onAction  );   // Mouse leaves the element 


 // These can all also trigger the event instead of handling it 
 // by simply not giving any parameters 
 $  (  '#btn'  ).  dblclick  ();   // Fires double click on the element 

 // You can handle multiple events while only using the selector once 
 $  (  '#btn'  ).  on  ( 
   {  dblclick  :   myFunction1  }   // Triggered on double click 
   {  blur  :   myFunction1  }   // Triggered on blur 
 ); 

 // You can move and hide elements with some effect methods 
 $  (  '.table'  ).  hide  ();   // Hides the element(s) 

 // Note: calling a function in these methods will still hide the element 
 $  (  '.table'  ).  hide  (  function  (){ 
     // Element hidden then function executed 
 }); 

 // You can store selectors in variables 
 var   tables   =   $  (  '.table'  ); 

 // Some basic document manipulation methods are: 
 tables  .  hide  ();   // Hides element(s) 
 tables  .  show  ();   // Shows (un-hides) element(s) 
 tables  .  toggle  ();   // Changes the hide/show state 
 tables  .  fadeOut  ();   // Fades out 
 tables  .  fadeIn  ();   // Fades in 
 tables  .  fadeToggle  ();   // Fades in or out 
 tables  .  fadeTo  (  0.5  );   // Fades to an opacity (between 0 and 1) 
 tables  .  slideUp  ();   // Slides up 
 tables  .  slideDown  ();   // Slides down 
 tables  .  slideToggle  ();   // Slides up or down 

 // All of the above take a speed (milliseconds) and callback function 
 tables  .  hide  (  1000  ,   myFunction  );   // 1 second hide animation then function 

 // fadeTo has a required opacity as its second parameter 
 tables  .  fadeTo  (  2000  ,   0.1  ,   myFunction  );   // 2 sec. fade to 0.1 opacity then function 

 // You can get slightly more advanced with the animate method 
 tables  .  animate  ({  margin  -  top  :  "+=50"  ,   height  :   "100px"  },   500  ,   myFunction  ); 
 // The animate method takes an object of css and values to end with, 
 // optional options parameter to tune the animation, 
 // and of course the callback function     
  </code></pre>
  

  Types of events:
  <pre><code>
	  //Browser Events
		  .error()
		  .resize()
		  .scroll()

	  //Document Loading
		  .load()
		  .ready()
			  $(document).ready(function(){
				  // jQuery methods go here...
			  });
			  
			  //or shorter method:
			  $(function(){...}
				  .unload()

	 //Event Handler Attachment

		  .bind()
		  .delegate()
		  .die()
		  .live()
		  .off()
		  .on()
		  .one()
		  .trigger()
		  .triggerHandler()
		  .unbind()
		  .undelegate()

	  //Form Events

		  .blur()
		  .change()
		  .focus()
			  $("input").focus(function(){
				  $(this).css("background-color", "#cccccc");
			  });

		  .focusin()
		  .focusout()
		  .select()
		  .submit()

	  //Keyboard Events

		  .keydown()
		  .keypress()
		  .keyup()

	  //Mouse Events

		  .click()
			  $("p").click(function(){
				  $(this).hide();
			  });
		  .contextMenu()
		  .dblclick()
		  
		  .mousedown()
		  mouseenter()
			  $("#p1").mouseenter(function(){
				  alert("You entered p1!");
			  });

		  hover()
			  $("#p1").hover(function(){
				  alert("You entered p1!");
			  },
			  function(){
				  alert("Bye! You now leave p1!");
			  });

		  .mouseleave()
		  .mousemove()
		  .mouseout()
		  .mouseover()
		  .mouseup()
		  .toggle()
	</code></pre>
	
	Event Object

		  event.currentTarget
		  event.data
		  event.delegateTarget
		  event.isDefaultPrevented()
		  event.isImmediatePropagationStopped()
		  event.isPropagationStopped()
		  event.metaKey
		  event.namespace
		  event.pageX
		  event.pageY
		  event.preventDefault()
		  event.relatedTarget
		  event.result
		  event.stopImmediatePropagation()
		  event.stopPropagation()
		  event.target
		  event.timeStamp
		  event.type
		  event.which	
  
</div>

<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />Ajax</h2>
<div>
	<pre><code>
//Shorthand Methods
//.load(URL,data,callback)
//	:loads data from a server and puts the returned data into the selected element.

		$("#div1").load("demo_test.txt");

//jQuery.get(URL,callback)
//	:Requests data from the server with an HTTP GET request.
	
		$("button").click(function(){
			$.get("demo_test.asp", function(data, status){
				alert("Data: " + data + "\nStatus: " + status);
			});
		}); 

//jQuery.getJSON()
//jQuery.getScript()
//jQuery.post(URL,data,callback)
	requests data from the server using an HTTP POST request.
	
		$("button").click(function(){
			$.post("demo_test_post.asp",
			{
				name: "Donald Duck",
				city: "Duckburg"
			},
			function(data, status){
				alert("Data: " + data + "\nStatus: " + status);
			});
		});

//jQuery.ajax(url[, options])
	//is used to perform an asynchronous HTTP request
	//-The list of the options accepted by this function is very long
	// ( retrieve data )
		$.ajax({
			url: 'http://api.joind.in/v2.1/talks/10889',
			data: {
				format: 'json'
			},
			error: function() {
				$('#info').html('<p>An error has occurred</p>');
			},
			dataType: 'jsonp',
			success: function(data) {
				var $title = $('<h1>').text(data.talks[0].talk_title);
				var $description = $('<p>').text(data.talks[0].talk_description);
				$('#info')
					.append($title)
					.append($description);
			},
			type: 'GET'
		});

	// Passing data to the Server
		$( 'form' ).submit(function( event ) {
			event.preventDefault();

			var form = $( this );

			$.ajax({
				type: 'POST',
				url: '/data/save',
				data: form.serialize(),
				dataType: 'json',
				success: function( resp ) {
					console.log( resp );
					}
			});
		});
	
		&lt;!DOCTYPE html>
		&lt;html>
			&lt;head>
				&lt;title>jQuery AJAX POST Form&lt;/title>
				&lt;meta charset="utf-8">
			&lt;/head>
		&lt;body>
			&lt;div id="response">
				&lt;pre>&lt;/pre>
			&lt;/div>

			&lt;form id="my-form">
				&lt;input type="text" id="first-name" name="first-name" placeholder="First Name" />
				&lt;input type="text" id="last-name" name="last-name" placeholder="Last Name" />

				&lt;button type="submit">Submit&lt;/button>
			&lt;/form>

			&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js">&lt;/script>
			&lt;script>
				(function($){
					function processForm( e ){
						$.ajax({
							url: 'users.php',
							dataType: 'text',
							type: 'post',
							contentType: 'application/x-www-form-urlencoded',
							data: $(this).serialize(),
							success: function( data, textStatus, jQxhr ){
								$('#response pre').html( data );
							},
							error: function( jqXhr, textStatus, errorThrown ){
								console.log( errorThrown );
							}
						});

						e.preventDefault();
					}

					$('#my-form').submit( processForm );
				})(jQuery);
			&lt;/script>
		&lt;/body>
		&lt;/html>

jQuery.ajaxSetup()
jQuery.ajaxTransport()
jQuery.prefilter()



Global Ajax Event Handlers

	.ajaxComplete()
	.ajaxError()
	.ajaxSend()
	.ajaxStart()
	.ajaxStop()
	.ajaxSuccess()

Helper Functions

	.serialize()
	.serializeArray()
	jQuery.param()

	</code></pre>
	

	

</div>
<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" /><b>3. Manipulation</b></h2>
<div>These are similar to effects but can do more
  <pre><code>
 $  (  'div'  ).  addClass  (  'taming-slim-20'  );   // Adds class taming-slim-20 to all div  

 // Common manipulation methods 
 $  (  'p'  ).  append  (  'Hello world'  );          // Adds to end of element 
 $  (  'p'  ).  attr  (  'class'  );                  // Gets attribute 
 $  (  'p'  ).  attr  (  'class'  ,   'content'  );   // Sets attribute 
 $  (  'p'  ).  hasClass  (  'taming-slim-20'  );     // Returns true if it has the class 
 $  (  'p'  ).  height  ();                          // Gets height of element or sets height    
 $  (  'p'  ). .clone()                              //Copying
DOM Insertion
	DOM Insertion, Around
		.wrap()
		.wrapAll()
		.wrapInner()

	DOM Insertion, Inside
		.append()
			:X
				$( ".inner" ).append( "<p>Test</p>" );
		.appendTo()
		.html()
		.prepend()
		.prependTo()
		.text()

	DOM Insertion, Outside
		.after()
		.before()
		.insertAfter()
		.insertBefore()

DOM Removal
	.detach()
	.empty()
	.remove()
	.unwrap()

DOM Replacement
	.replaceAll()
	.replaceWith()

  </code></pre>
</div>
<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" /><b>4.Traversing</b></h2>
<div>
	<pre><code>
Filtering
		.eq()
		.filter()
		.first()
		.has()
		.is()
		.last()
		.map()
		.not()
		.slice()

	Miscellaneous Traversing
		.add()
		.addBack()
		.andSelf()
		.contents()
		.each()
		.end()

	Tree Traversal
		.children()
		.closest()
		.find()
		.next()
		.nextAll()
		.nextUntil()
		.parent()
		.parents()
		.parentsUntil()
		.prev()
		.prevAll()
		.prevUntil()
		.siblings()
	</code></pre>
</div>
<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" /><b>5.Functions</b></h2>
<div>
	
	<b>getJSON</b>
		:Load JSON-encoded data from the server using a GET HTTP request.
		<pre><code>
			//we have this json file:
			//	{  "one": "Singular sensation",  "two": "Beady little eyes",  "three": "Little birds pitch by my doorstep"}
			
			$.getJSON( "ajax/test.json", function( data ) {
				var items = [];
				$.each( data, function( key, val ) {
					items.push( "&lt;li id='" + key + "'>" + val + "&lt;/li>" );
				});
				
				$( "&lt;ul/>", {
					"class": "my-new-list",
					html: items.join( "" )
				}).appendTo( "body" );
			});
			</code>
		</pre>
	<b>html</b>
		text() - Sets or returns the text content of selected elements
		html() - Sets or returns the content of selected elements (including HTML markup)
			<pre><code>
				$("#btn2").click(function(){
					alert("HTML: " + $("#test").html());
				});				
			</code></pre>

		val() - Sets or returns the value of form fields
		attr() method is used to get attribute values.
			<pre><code>
				$("button").click(function(){
					alert($("#w3s").attr("href"));
				});
			</code></pre>	
		append() - Inserts content at the end of the selected elements
		prepend() - Inserts content at the beginning of the selected elements
		after() - Inserts content after the selected elements
		before() - Inserts content before the selected elements
			X:
				function afterText() {
					var txt1 = "&lt;b>I &lt;/b>";                    // Create element with HTML  
					var txt2 = $("&lt;i>&lt;/i>").text("love ");     // Create with jQuery
					var txt3 = document.createElement("b");    // Create with DOM
					txt3.innerHTML = "jQuery!";
					$("img").after(txt1, txt2, txt3);          // Insert new elements after &lt;img>
				}
		remove() - Removes the selected element (and its child elements)
		empty() - Removes the child elements from the selected element
		addClass() - Adds one or more classes to the selected elements
		removeClass() - Removes one or more classes from the selected elements
		toggleClass() - Toggles between adding/removing classes from the selected elements
		css() - Sets or returns the style attribute
		The css() method sets or returns one or more style properties for the selected elements.
			X:
				//The following example will return the background-color value of the FIRST matched element:
				$("p").css("background-color");
	effects
		hide() , show() and toggle()
		animate() 
	callback function
		: is executed after the current effect is finished.
		(call back means "when it comes back call it")
		Typical syntax:		$(selector).hide(speed,callback);
		X:	
			$("button").click(function(){
				$("p").hide("slow", function(){
					alert("The paragraph is now hidden");
				});
			});
	dimensions
		width()
		height()
		innerWidth()
		innerHeight()
		outerWidth()
		outerHeight()
	
	Traversing
		:jQuery traversing, which means "move through", are used to "find" (or select) HTML elements based on 
		their relation to other elements. Start with one selection and move through that 
		selection until you reach the elements you desire.
		parent()
		parents()
		parentsUntil()
			x:
				$(document).ready(function(){
					$("span").parent();
				});
		first(), last() and eq()
		filter() and not() allow you to select elements that match, or do not match, a certain criteria.
	
	AJAX
		: is exchanging data with a server, and updating parts of a web page  without reloading the whole page.
		load() 
			:method loads data from a server and puts the returned data into the selected element.
			syntax
				$(selector).load(URL,data,callback);
			:x
				&lt;body>
					&lt;div id="div1">&lt;/div>
					&lt;script >
						$("#div1").load("http://api.propertyclicks.net/General/Province/GetByCountry/65");
					&lt;/script>
				&lt;/body>
			:x 2
				$("button").click(function(){
					$("#div1").load("demo_test.txt", function(responseTxt, statusTxt, xhr){
						if(statusTxt == "success")
							alert("External content loaded successfully!");
						if(statusTxt == "error")
							alert("Error: " + xhr.status + ": " + xhr.statusText);
					});
				});
			-Adding selector to url
				It is also possible to add a jQuery selector to the URL parameter.
				:X	$("#div1").load("demo_test.txt #p1");
		
		GET 
			: Requests data from a specified resource
			Syntax:
				$.get(URL,callback);
			:x
				$("button").click(function(){
					$.get("demo_test.asp", function(data, status){
						alert("Data: " + data + "\nStatus: " + status);
					});
				}); 
		POST : Submits data to be processed to a specified resource
				ajax calls for working with database
		$.ajax is a special method to perform the AJAX request .properties:
			• url: 
				This is the URL address for the request;

			• cache: 
				a false value will force the requested page to not be
				cached by the browser

			• type: 
				we perform the GET request to get some data	from the server

			• contentType:
				we want to get data in the JSON format with the UTF-8 charset

			• data: 
				This is the data that transforms to the server;

				it is empty in this case

			• success: 
				This is the callback function for
				the success case; after performing a request, 

				• error:
					function(exception){alert('Exeption:'+exception);}
</div>
<h2> <input type="button" value="-" class="toggleButton"  onclick="toggle(this)" />Commmon Practices</h2>
<div>
  <pre><code>
	//Referencing
	//			by embening in project:
					&lt;head>
						&lt;script src="jquery-1.12.2.min.js">&lt;/script>
					&lt;/head>
	//			by jQuery CDN
					&lt;head>
						&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js">&lt;/script>
					&lt;/head>
	//			by Microsoft CDN:
					&lt;head>
					&lt;script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.2.min.js">&lt;/script>
					&lt;/head>

	//Putting jqueries in seperate file
	//	If your website contains a lot of pages, and you want your jQuery functions to be easy to maintain,
	//	you can put your jQuery functions in a separate .js file.
				
					&lt;head>
					&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js">
					&lt;/script>
					&lt;script src="my_jquery_functions.js">&lt;/script>
					&lt;/head>    

  
	// For many manipulation methods, getting info on an element 
	// will ONLY get the first matching element 
	$  (  'p'  ).  height  ();   // Gets only the first 'p' tag's height 

	// You can use each to loop through all the elements 
	var   heights   =   []; 
	$  (  'p'  ).  each  (  function  ()   { 
	heights  .  push  (  $  (  this  ).  height  ());   // Adds all 'p' tag heights to array 
	});             
  </code></pre>
</div>


</body>
</html>