<head>  
    <link rel="stylesheet" href="../../assets/css/block.css">
    <script src="../../assets/js/block.js"></script>
    <link rel="stylesheet" href="../../libs/highlight/androidstudio2.css">
    <script src="../../libs/highlight/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>
<body>


<script>
PageHeaderRow("Symfony");
NewLine();
NewLine();
var grpSymfony=BlockGroup("Symfony",null);

var options=[];
var i=0;
options[i++]={title:"symfony",
body:`Symfony is a php web framework which is set of reusable <b>components</b> and <b>bundles</b>. `,codetype:"javascript",parent:grpSymfony
}

    

options[i++]={title:"The application structure",
body:`A <b>Symfony application</b> itself <b>is a bundle composed of other bundles</b> which is called <b>AppBundle</b>.

Symfony core web-framework is <b>FrameworkBundle</b>
 and there is a bundle called  <b>FrameworkExtraBundle</b> for furthur options.
`,parent:grpSymfony
}
options=RenderBlocks(options);

//------------------------------------------------------------------------------
const blk1=new BlockGroup("Setting up a Hello symfony! project from scrach");
var i=0;
options[i++]={title:"Creating the project ( by flex is recommended )",
body:`The use of the Symfony Installer to create new applications 
 is no  longer recommended since Symfony 3.3.
 
Use the <code>Composer create-project</code> command instead

Make sure you've installed Composer and have PHP 7.1.3 
or higher. Run in terminal:
(This creates a new quick_tour/ directory with 
a Symfony application)`,
code:`composer create-project symfony/skeleton quick_tour`,parent:blk1};

options[i++]={title:"Install the web-server",
body:`Run one of the following commands to 
install webserver bundle into the project:`,
code:`>composer req webserver
or
>composer require symfony/ web-server-bundle  --dev`,parent:blk1};
options[i++]=
{title:" run symfony server",
body:`Run one of these commandlines, 
based on your symfony version`,
 code:` >php bin/console server:run
or
 >php bin/console server:start
or
 >php -S 127.0.0.1:8000 -t public
 `,codetype:"php",parent:blk1};
 
 options[i++]={title:"Try your new app",
 body:`Enter this url in a browser:`,
 code:`http://localhost:8000`,imagWidth:"40%", imageSrc: "https://symfony.com/doc/current/_images/no_routes_page.png",
 parent:blk1};
 
 options[i++]={title:"<h7>Rout</h7>: Define the URL to our new page ",
 code:`Start in config/routes.yaml.
rout is the URL to your page (/) 
and the "controller": the function that will be called
by going to the URL.
the controller must return a Symfony Response object`,
code:`# config/routes.yaml
# the "app_lucky_number" route name is not important yet
app_lucky_number:
    path: /lucky/number
    controller: App\Controller\LuckyController::number`,parent:blk1};

options[i++]={title:"<h7>Controller</h7>: Create the controller",
body:`A <h7>controller</h7>  is just a <h7>normal function</h7> with one rule: 
it must return a Symfony Response object.
So, In src/Controller, create a new <b>LuckyController</b>
 class and an index method inside.
 That's it! Try the page out by going to 
 <b>http://localhost:8000/lucky/number</b>`,
 code:`&lt;?php
// src/Controller/LuckyController.php
namespace App\\Controller;

use Symfony\\Component\\HttpFoundation\\Response;

class LuckyController
{
    public function number()
    {
        $number = random_int(0, 100);

        return new Response(
            '<html><body>Lucky number: '.$number.'</body></html>'
        );
    }
} `,parent:blk1};

options[i++]={
    title:"{parametric} rout and controller Example",
    body:
`using '{parameter}' paramerter can be added to rout and useed in the controller:
<pre> <code>
# config/routes.yaml
index:
-     path: /
+     path: /hello/{name}
    controller: 'App\Controller\DefaultController::index'</code></pre>
and the controller would be:
<pre><code>
&lt;?php
// src/Controller/DefaultController.php
namespace App\\Controller;

use Symfony\\Component\\HttpFoundation\\Response;

class DefaultController
{
     public function index()
     public function index($name)
    {
         return new Response('Hello!');
         return new Response("Hello $name!");
    }
}</code></pre>`,parent:blk1
}

options[i++]={
    title:"<h7>annotations</h7> instead of <b>routes file</b>",
body:`You can comment the rout defined in routes.yaml and
use annotation inside the controller itself.

just remember to add annotations before using it:
<pre><code>composer require annotations</code></pre>
and the controller would be:`,
code:`&lt;?php
// src/Controller/DefaultController.php
namespace App\\Controller;

use Symfony\\Component\\HttpFoundation\\Response;
use Symfony\\Component\\Routing\\Annotation\\Route;

class DefaultController
{
    \/**
     * @Route("/hello/{name}")
     *\/
     public function index($name) {
        return new Response("Hello ".$name);
     }
}
//Now, request the url “http://localhost:8000/hello/john”`,parent:blk1
}

options[i++]={
    title:"Redirecting to page",body:"",
code:`public function homeAction() { 
   // redirect to the "homepage" route 
   return $this-> redirectToRoute('homepage');    
   // redirect externally 
   \\return $this->redirect('http://example.com/doc'); 
}`,codetype:"php",parent:blk1};

options[i++]={
    title:"Controller returning json",
    code:`src/Controller/MovieController.php:

&lt;?php
namespace App\\Controller;

use Symfony\\Component\\HttpFoundation\\JsonResponse;
use Symfony\\Component\\Routing\\Annotation\\Route;

class MovieController
{
    \/**
    * @Route("/movies")
    *\/
    public function moviesAction()
    {
        return new JsonResponse([
            [
                'title' => 'The Princess Bride',
                'count' => 0
            ]
        ]);
    }
}`,parent:blk1
};
options=RenderBlocks(options);
//----------------------------------------------------------
BlockGroup("View Engine");
Block("What is twig",
`Unless you're building a pure API , you'll probably want to render HTML. 
To do that, you'll use Twig. Twig is a template engine for PHP.`);
Block("Installing twig into the project",
`By running the following command,Symfony Flex, a Composer plugin ,
use 'twing' as an alis  that points to symfony/twig-bundle
and install and configure it into the project:
<pre><code>composer require twig</code></pre>
Thanks to 'recipe' ,the command  enables the twig feature in 
<pre><code>config/bundles.php</code></pre>,
  and it added 3 other things:  <pre><code>  config/packages/twig.yaml</code></pre>
 (A configuration file that sets up Twig with sensible defaults.)
 <pre><code>config/routes/dev/twig.yaml</code><pre>
 (A route that helps you debug your error pages.)
 <pre><code>templates/</code></pre>
(This is the directory where template files will live.)
 The recipe also added a <pre><code>base.html.twig</code></pre> layout file.`);
Block("Templates",
`Templates are basically text files used to generate any text-based documents 
such as HTML, XML, etc. 
they reside in 2 different locations ,by default:
 -app/Resources/views/<br>-vendor path to Bundle/Resources/views
 `,``,"php");

 Block("Twig Engine and how to render it form controller",
`Twig contains three types of special syntax :
{{ ... }} − Prints a variable or the result of an expression to the template.

{% ... %} − A tag that controls the logic of the template.
         &nbsp; It is mainly used to execute a function.

{# ... #} − Comment syntax. It is used to add a single or multi-line comments.

The twig base template is located at “app/Resources/views/base.html.twig”.
`,
`//StudentController.php  
namespace AppBundle\Controller;  
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route; 
use Symfony\Component\HttpFoundation\Response; 
use Symfony\Bundle\FrameworkBundle\Controller\Controller;  

class StudentController extends Controller { 
   /** 
      * @Route("/student/home") 
   */ 
   public function homeAction() { 
      return $this->render('student/home.html.twig', [
            'name' => $name,
        ]); 
   } 
}`,"php");

Block("home.html.twig file","twig file are in view directory",
`//app/Resources/views/student/home.html.twig  
&lth3>Student {{ name }} application!&lt/h3>`,"php");

Block("Extend the page","Give the page an HTML layout",
`{# templates/default/index.html.twig #}
{% extends 'base.html.twig' %}

{% block body %}
    &lt;h1>Hello {{ name }}&lt/h1>
{% endblock %}`);

Block("Read more",
`<a href="https://www.tutorialspoint.com/symfony/symfony_view_engine.htm">
Read more about swig tags here</a>
<br><a href="https://www.tutorialspoint.com/symfony/symfony_doctrine_orm.htm">
And Doctorine ORM here</a>`);

//-------------------------------------------------------
var grpEnvironment=BlockGroup("Environment");
var i=0;
options[i++]={title:`SandBox`,
body:`The sandbox is an easy-to-install
<b>pre-packaged symfony project</b>,already 
configured with some sensible defaults.
 It is a great way to practice symfony.

Following example initializing bundle
"SteveBundle" 
in "Sites/sandbox/src/Spf13":
`,
code:`> app/console init:bundle Spf13/SteveBundle`,codetype:"php",
parent:grpEnvironment};

options[i++]={
    title:"env Configurator",
    body:`Adds the given list of environment variables 
to the .env and .env.dist files stored in 
the root of the Symfony project:`
,code:`{
    "env": {
        "APP_ENV": "dev"
    }
}` ,parent:grpEnvironment
}

options[i++]={
   title: "Requirements for Running Symfony",
  body:`Symfony 4.0 requires PHP 7.1.3 or higher to run.,
Symfony 3.4 requires PHP 5.5.9 or higher to run.
to know more requirements,Run:`,
 code:` cd my-project/
 php bin/symfony_requirements`,
 parent:grpEnvironment
};

options[i++]={
    title:"downloding installler(Windows)",
    body:`First download symfony:
<pre><code>
php -r "file_put_contents('symfony', 
 file_get_contents('https://symfony.com/installer'));"
</code></pre>
and execute the following:
<pre><code>c:\> 
(echo @ECHO OFF & echo php "%~dp0symfony" %*) 
   > symfony.bat
</code></pre>
Then, move both files (symfony and
symfony.bat)to any location included 
in your execution path.
Now you can run the symfony command
anywhere on your system.`,
 parent:grpEnvironment
};
options=RenderBlocks(options);
//-------------------------------------------------------------------
var grpBundle=BlockGroup("Bundle");
var i=0;
options[i++]={title:"Bundle",
body:`A bundle is a  set of all related <b>files within a directory</b> that implement a single feature, including:
  PHP files, templates,stylesheets,JavaScript and tests.
See the 4 bundles In the <b>config\ bundles.php</b> of the following sample :`,
code:`return [
Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle::class =>['all' => true],
Symfony\\Bundle\\WebServerBundle\\ WebServerBundle::class =>['dev' => true],
Symfony\\Bundle\\TwigBundle\\ TwigBundle::class =>['all' => true],
Symfony\\Bundle\\MonologBundle\\ MonologBundle::class =>['all' => true],
];`,
codetype:"php",parent:grpBundle,codeOnRight:true
};

options[i++]={
    title:"bundles Configurator",
    body:`Enables one or more bundles in the Symfony application by
 appending them to the <b>bundles.php</b> file.
Its value is an associative array where the key is the 
bundle class name and the value is an array of environments 
where it must be enabled.`,
    code:`{
    "bundles": {
        "Symfony\\Bundle\\DebugBundle\\DebugBundle": ["dev", "test"],
        "Symfony\\Bundle\\MonologBundle\\MonologBundle": ["all"]
    }
}`,parent:grpBundle
};

options[i++]={
title:"Creating a Bundle",
body:`1-Choose a namespace. Namespace of a bundle 
should include vendor name and bundle name.
 In our case, it is Acme\\TestBundle.
 2-create the folder <b>src/Acme/TestBundle/</b> 
 3- add a new file called <b>AcmeTestBundle.php</b>`,
code:`
// src/Acme/TestBundle/AcmeTestBundle.php
namespace App\\Acme\\TestBundle;
use Symfony\\Component\\HttpKernel\\Bundle\\Bundle;
class AcmeTestBundle extends Bundle{}`,codetype:"php", parent:grpBundle};

options[i++]={
title:"Enabling bundle",
body:`After enabling it,AcmeTestBundle 
doesn't do anything yet, 
but is now ready to be used.
`,
code:`// config/bundles.php
return [
    // ...
    App\\Acme\\TestBundle
     \\AcmeTestBundle::class =>
      ['all' => true],
];
`,codetype:"php",parent:grpBundle};
options[i++]={
title:"Registering a bundle",body:" "
,code:`public function registerBundles() { 
$bundles = array( 
// ... 
// register your bundle 
new Tutorialspoint\\DemoBundle
 \\TutorialspointDemoBundle(), 
); 
return $bundles; }`,codetype:"php",parent:grpBundle};

options[i++]={
title:"Bundle`s most common Directories"
,body:`<b>Controller/</b>
Contains the controllers of the bundle (e.g. RandomController.php).
<br><b>DependencyInjection/</b>
Holds certain Dependency Injection
Extension classes, which may import 
service configuration, 
register compiler passes or more
(this directory is not necessary).
<b>Resources/config/</b>
Houses configuration, including 
routing configuration (e.g. routing.yaml).
<b>Resources/views/</b>
Holds templates organized by controller 
name (e.g. Random/index.html.twig).
<br><b>Resources/public/</b>
Contains web assets (images, stylesheets, 
etc) and is copied or symbolically 
linked into the project public/ directory
via the assets:install console command.
<b>Tests/</b>
Holds all tests for the bundle.
`,parent:grpBundle};
options=RenderBlocks(options);
//---------------------------------------------------------

var grpService=BlockGroup("Services");
Block("Services and service containers",
`<b>Services</b> are useful objects 
to do special tasks. 
and each service lives inside a 
special object called
<b>the service container</b>.
The container is just a simple object
that holds all of the services
<br> in your project, including
Symfony’s core objects. The container 
allows you to centralize the way objects
are constructed.`,"",null);

Block("Building Container"
,`Symfony provides <h7>ContainerBuilder
</h7> to create a new container.
Once the container is created, Greeter
class can be registered into it 
using the container's <h7>register method</h7>.
`,
`use Symfony\\Component\\
 DependencyInjection\\ContainerBuilder; 
$container = new ContainerBuilder(); 
$container 
   ->register('greeter', 'Greeter') 
   ->addArgument('Hi');
   `
);
Block("using Services",
`your application container already
contains many services.
For example to log something:`
,
`// src/Controller/ProductController.php
// ...
use Psr\Log\LoggerInterface;
/** @Route("/products") */
public function list(LoggerInterface $logger)
{
    $logger->info('Look! I just used a service');
    // ...
}`,"php");

Block("List of available services",
`Find out available service by running :`,
`php bin/console debug:autowiring

=========================================================== 
Class/Interface Type                                            Alias Service ID
===========================================================
Psr\Cache\CacheItemPoolInterface                            alias for "cache.app.recorder"
Psr\Log\LoggerInterface                                     alias for "monolog.logger"
Symfony\Component\EventDispatcher\EventDispatcherInterface  alias for "debug.event_dispatcher"
Symfony\Component\HttpFoundation\RequestStack               alias for "request_stack"
Symfony\Component\HttpFoundation\Session\SessionInterface   alias for "session"
Symfony\Component\Routing\RouterInterface                   alias for "router.default"`,"php");//,"65%","455px");

Block("Creating Services in the Container",
`To create reusable code,you can put it 
in a service(instead of controller):`
,
`// src/Service/MessageGenerator.php
namespace App\Service;
class MessageGenerator
{
    public function getHappyMessage()   {
        $messages = [
            'You did it! You updated the system!',
            'That was one of the coolest updates!'
        ];
        $index = array_rand($messages);
        return $messages[$index];
    }
}
`,"php");
Block("Using the service",
`You can use it immediately inside your controller:`,
`use App\Service\MessageGenerator;
public function new
   ( MessageGenerator $messageGenerator )
{
 // thanks to the type-hint, the container will 
 // instantiate a new MessageGenerator for you!
 $message = $messageGenerator->getHappyMessage();
 $this->addFlash('success', $message);
 // ...
}`,"php");//,"35%","400px");

var grpComponents=BlockGroup("Components");
Block("Installing Components",
`cd /path/to/project/dir 
<br>composer require symfony/<component_name>`
,
`composer require symfony/filesystem `,"php");//,"30%");

Block("Using Components"
," ",
`  require_once __DIR__ . '/vendor/autoload.php'; 
   use Symfony\\Component\\Filesystem\\Filesystem; 
   use Symfony\\Component\\Filesystem\\Exception\\IOExceptionInterface;  
   $fs = new Filesystem(); 
   try { 
      $fs->mkdir('./sample-dir'); 
      $fs->touch('./sample-dir/text.txt'); 
   } catch (IOExceptionInterface $e) { 
      echo $e; 
   } 
`
,"php");

Block("Details of Symfony Components"
,
`<b>Filesystem</b> component provides a basic system command <h7>related to files and directories</h7> such as file creation, folder creation, file existence, etc
<br><b>Console</b> component provides various options to easily <h7>create commands, which can be executed in a terminal</h7>
<br><b>Application</b> class sets up the necessary functionality of a bare-bone <h7>console application</h7>.
<br><b>Process</b> component provides options to <h7>run any system command in a sub-process</h7>, in a safe and efficient manner
<br><b>ClassLoader</b> component provides implementation for both PSR-0 and PSR-4 class loader standard. It can be used to auto-load the classes. 
<br><b>PropertyAccess</b> component provides various options to <h7>read and write an object and array details</h7> using the string notation.
<br><b>PropertyInfo</b> component is similar to PropertyAccess component, however <h7>it only works with PHP objects</h7> and provides much more functionality.
<br><b>EventDispatcher</b> component <h7>provides an event-based programming</h7> in PHP. It enables the objects to communicate with each other by dispatching events and listening to them.
<br><b>DependencyInjection</b> component provides a container to handle the dependency.
<br><b>Serializer</b> component provides an option <h7>to convert a PHP object into a specific format such as XML, JSON, Binary and vice versa</h7>.
<br><b>Config</b> component provides options to <h7>load, parse, read, and validate configurations of type XML, YAML, PHP and ini.</h7>and from database as well. it is useful forconfiguring web application.
<br><b>ExpessionLanguage</b> component enables to easily compile,<h7> parse, and get the value from an expression</h7>. It enables one or more expression to be used in a configuration environment (file) by a non-PHP programmer, say a system administrator. 
<br><b>OptionsResolver</b> component provides a way to validate the option system used in our system. For example, database setting is placed in an array, dboption with host, username, password, etc., as keys. You need to validate the entries before using it to connect to a database. OptionsResolver simplifies this task by providing a simple class OptionsResolver and a method resolver, which resolves the database setting and if there is any validation issue, it will report it.
<br><b>Dotenv</b> component provides various options to <h7>parse .env files </h7>and the variable defined in them to be accessible via getenv(), $_ENV, or $_SERVER.
<br><b>Cache</b> component provides an extended PSR-6 implementation. It can be used to <h7>add cache functionality to our web application.</h7> Since it follows PSR-6, it can be easily used in place of another PSR-6 based cache component.
<br><b>Intl</b> component is the replacement library for C Intl extension.
<br><b>Translation</b> component provides various options to <h7>internationalize</h7> our application. Normally, the translation details of different languages will be stored in a file, one file per language, and it will be loaded dynamically during runtime of the application. There are different formats to write a translation file. Translation component provides various options to load any type of format, such as plain PHP file, CSV, ini, Json, Yaml, ICU Resource file, etc. 
<br><b>Workflow</b> component provides advanced tools to <h7>process a finite state machine</h7>. By providing this functionality.
<br><b>Yaml</b> component provides an option that parses the <h7>YAML file format</h7> and converts it into PHP arrays.
<br><b>Ldap</b> component provides PHP classes to <h7>connect to a LDAP or Active directory server</h7> and authenticate the user against it. It provides an option to connect to a Windows domain controller.
<br><b>Debug</b> component provides various options to enable <h7>debugging in PHP environment</h7>. Normally, debugging PHP code is hard but the debug component provides simple classes to ease the process of debugging and make it clean and structured.
<br><b>Stopwatch</b> component provides Stopwatch class to profile our PHP code.
<br><b>VarDumper</b> component provides <h7>better dump() function</h7>. Just include the VarDumper component and use the dump function to get the improved functionality.
<br><b>BrowserKit</b> component provides an <h7>abstract browser client interface</h7>. It can be used to test web application programmatically. For example, it can request a form, enter the sample data and submit it to find any issue in the form programmatically.
<br><b>PHPUnit Bridge</b> component provides many options to <h7>improve the PHPUnit testing environment</h7>.
<br><b>Asset</b> component provides a generic asset handling in a web application. It <h7>generates URL for the assets such as CSS, HTML, JavaScript</h7> and also performs version maintenance.
<br><b>CssSelector</b> component provides an <h7>option to convert CSS based Selectors into XPath expression</h7>. A web developer knows the CSS based Selectors expression more than XPath expression, but the most efficient expression to find an element in HTML and XML document is XPath Expression.
it enables the developer to write the expression in CSS Selectors, however, the component converts it to XPath expression before executing it. Thus, the developer has an advantage of simplicity of CSS Selectors and efficiency of XPath expression.
<br><b>DomCrawler</b> component provides various options <h7>to find the element in HTML and XML document using DOM concept</h7>. It also provides option to use XPath expression to find an element. DomCrawler component can be used along with CssSelector component to use CSS selectors instead of XPath expression. 
<br><b>HttpFoundation</b> component provides an object-oriented layer to the HTTP specification. By default, PHP provides HTTP request and response details as array-based object such as $_GET, $_POST, $_FILES, $_SESSION, etc. HTTP based functionality such as setting a cookie can be done using simple, plain old function setCookie().
  HttpFoundation provides <h7>all HTTP related functionality in a small set of classes like Request, Response, RedirectResponse</h7>, etc.
<br><b>HttpKernel</b> component is the <h7>core component in the Symfony web setup</h7>.
  It provides all the functionalities required for a web application -
   from receiving the Request object to sending back the Response object. 
   The complete architecture of the Symfony web application is provided by HttpKernel 
<br><b>Routing</b> component <h7>maps the HTTP request to a pre-defined set of configuration variables</h7>.
 Routing decides which part of our application should handle a request.

 <br><b>Templating</b> component provides the necessary infrastructure to build an <h7>template system</h7>.
  Symfony uses the Templating component for its View engine implementation.
<br><b>Validator</b> component provides an implementation of JSR-303 Bean Validation Specification.
n be <h7>used to validate a form</h7> in a web environment.
<br><b>Security</b> component provides complete <h7>security system for our web application</h7>,
 be it HTTP basic authentication, HTTP digest authentication, interactive form based authentication, X.509 certification login, etc. It also provides authorization mechanism based on the user role through in-built ACL system. 
`);//,null,null,"95%","1850px");
//-----------------------------------------------------------------------
var blkgrpEvents=   BlockGroup("Events and EventListener");
Block("Step 1: Create a project","event-dispatcher-example"
,`cd /path/to/dir 
mkdir event-dispatcher-example 
cd event-dispatcher-example 
composer require symfony/event-dispatcher
`,"php");

Block("Step 2: Create a class",".User",
`class User { 
   public $name; 
   public $age; 
}  
$user = new User(); 
$user->name = "Jon"; 
$user->age = 25`,"php");

Block("Step 3 : Create an event","UserRegisteredEvent"
,`use Symfony\\Component\\EventDispatcher\\Event;  
class UserRegisteredEvent extends Event {
   const NAME = \'user.registered\';  
   protected $user;  
   
   public function __construct(User $user) { 
      $this-< user = $user; 
   }  
   public function getUser() { 
      return $this-< user; 
   } 
}  
$event = new UserRegisteredEvent($user);
`,"php");

Block("Step 4: Create a listener","UserListener",
`class UserListener { 
   public function onUserRegistrationAction
                  (Event $event) { 
      $user = $event->getUser(); 
         echo $user->name . "\\r\\n"; 
         echo $user->age . "\\r\\n"; 
   } 
}  
$listener = new UserListener();`
,"php");

Block("Step 5: Create an event","dispatcher object",
`use Symfony\\Component\\EventDispatcher
       \\EventDispatcher;  
$dispatcher = new EventDispatcher();`,"PHP");

Block("Step 6: Connect listener and event",
" using dispatcher object and its method, addListener",
`$dispatcher 
   ->addListener( 
      UserRegisteredEvent::NAME,  
      array($listener, 'onUserRegistrationAction'));`,"php");

Block("Step 7: fire/dispatch the event",
"using event dispatcher's method, dispatch.",
`$dispatcher->dispatch(UserRegisteredEvent::NAME, $event);`
,"php");

Block("The Complete listing",
"main.php"
,`<?php  
   require __DIR__ . '/vendor/autoload.php';  
   use Symfony\\Component\\EventDispatcher\\EventDispatcher; 
   use Symfony\\Component\\EventDispatcher\\Event;  

   class User { 
      public $name; 
      public $age; 
   }  
   class UserRegisteredEvent extends Event { 
      const NAME = 'user.registered';  
      protected $user;  
      
      public function __construct(User $user) { 
         $this-> user = $user; 
      }  
      public function getUser() { 
         return $this-> user; 
      } 
   }  
   class UserListener { 
      public function onUserRegistrationAction(Event $event) { 
         $user = $event-> getUser(); 
         echo $user-> name . "\r\n"; 
         echo $user-> age . "\r\n"; 
      } 
   } 
   $user = new User(); 
   $user-> name = "Jon"; 
   $user-> age = 25;  

   $event = new UserRegisteredEvent($user); 
   $listener = new UserListener();  

   $dispatcher = new EventDispatcher();  
   $dispatcher 
      ->addListener( 
         UserRegisteredEvent::NAME, 
         
         function(Event $event) { 
            $user = $event-> getUser(); 
            echo $user-> name . "\r\n"; 
         });  
   $dispatcher 
      -> addListener( 
         UserRegisteredEvent::NAME, array($listener, 'onUserRegistrationAction'));

   $dispatcher-> dispatch(UserRegisteredEvent::NAME, $event); 
?>
//Result
//Jon 
//Jon 
//25`
,"php");//,"50%","1200px");
//-------------------------------------------------------------------------------
BlockGroup("Expression");
Block("Expression",
`It enables a non-programmer to configure 
the web application with little effort.`);
Block("Step 1 - Create a project"," expression-language-example"
,`cd /path/to/dir 
mkdir expression-language-example 
cd expression-language-example 
composer require symfony/expression-language`,"php");

Block("Step 2 Create an expression object"," ",
`use Symfony\\Component\\ExpressionLanguage
         \\ExpressionLanguage; 
$language = new ExpressionLanguage();
`,"php");

Block("Step 3  Test a simple expression"," "
,`echo "Evaluated Value: " 
   . $language->evaluate('10 + 12') . "\\r\\n" ; 
echo "Compiled Code: " 
   . $language->compile('130 % 34') . "\\r\\n" ;
`,"php");

Block("Step 4 ",
`Symfony expression is powerful such
that it can intercept a PHP object and 
its property as well in the expression 
language.`
,`class Product { 
   public $name; 
   public $price; 
} 
$product = new Product(); 
$product-> name = 'Cake'; 
$product-> price = 10;  

echo "Product price is " . $language 
   ->evaluate('product.price', array('product' => $product,)) . "\\r\\n";  
echo "Is Product price higher than 5: " . $language 
   ->evaluate('product.price > 5', array('product' => $product,)) . "\\r\\n"; 
//Here, the expression product.price and product.price > 5 
//intercept $product object's property price and evaluate the result.`,"php");

Block("The complete code",`main.php
the result of the following code will be:

Result
Evaluated Value: 22 
Compiled Code: (130 % 34) 
Product price is 10 
Is Product price higher than 5: 1
`
,`<?php 
   require __DIR__ . '/vendor/autoload.php'; 
   use Symfony\Component\ExpressionLanguage\ExpressionLanguage; 
   $language = new ExpressionLanguage();  

   echo "Evaluated Value: " . $language->evaluate('10 + 12') . "\r\n" ; 
   echo "Compiled Code: " . $language->compile('130 % 34') . "\r\n" ;  
   
   class Product { 
      public $name; 
      public $price; 
   }  
   $product = new Product(); 
   $product->name = 'Cake'; 
   $product->price = 10;  

   echo "Product price is " . $language 
      ->evaluate('product.price', array('product' => $product,)) . "\r\n"; 
   echo "Is Product price higher than 5: " . $language 
      ->evaluate('product.price > 5', array('product' => $product,)) . "\r\n"; 
?>
` ,"html");
Block("Additional resources",
`<a href="https://stackoverflow.com/tags/symfony/info">symfony on stack overflow</a>`);
//------------------------------------------------------------------------

</script>

</body>
