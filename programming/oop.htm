<html>
   <head>
<meta charset='UTF-8' />
<meta name='viewport' content='width=device-width, initial-scale=1' />
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/css/blocks.css'>
<script src='https://cdn.jsdelivr.net/gh/nhab/nhab@latest/assets/js/blocks.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'></script>
<script src='https://code.jquery.com/jquery-3.6.3.min.js'></script>
</head>
<body onload='AddToggleButtons();ReplaceLtGt();hljs.highlightAll();'>
 <button onclick="toggleAll(this);" >-</button>
	
    
<h2>all</h2>
<div>
<h3>What is OOP?</h3>
OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.

<h3>Why oop?</h3>

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the C# code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time

<h3>What are Classes and Objects ?</h3>
a class is a template for objects, and an object is an instance of a class.
An object is a software bundle of related variable and methods.

<h3>main 3 concepts?</h3>

Encapsulation
Inheritance
Polymorphism

<h3>Abstraction ?</h3>

Abstraction is "To represent the essential feature without representing the background details.(main properties and funnctionality neede for our software)

<h3>Encapsulation ?</h3>

Wrapping up a data member and a method together into a single unit (in other words class) is called Encapsulation.
Encapsulation is like enclosing in a capsule. That is enclosing the related operations and data related to an object into that object.
Encapsulation means hiding the internal details of an object, in other words how an object does something.
Encapsulation prevents clients from seeing its inside view, where the behaviour of the abstraction is implemented.

<h3>Inheritance ?</h3>
When a class includes a property of another class it is known as inheritance.
Inheritance is a process of object reusability.

<h3>Polymorphism ?</h3>
Polymorphism means one name, many forms.
One function behaves in different forms.
Example: A person behaves the son in a house at the same time that the person behaves an employee in an office.

<h3></h3>Differences between Abstraction and Encapsulation ?
1. Abstraction solves the problem at the design level.	        
1. Encapsulation solves the problem in the implementation level.
2. Abstraction hides unwanted data and provides relevant data.	
2. Encapsulation means hiding the code and data into a single unit to protect the data from the outside world.
3. Abstraction lets you focus on what the object does instead of how it does it	
3. Encapsulation means hiding the internal details or mechanics of how an object does something.
4. Abstraction: Outer layout, used in terms of design.
For example:
An external of a Mobile Phone, like it has a display screen and keypad buttons to dial a number.	
4. Encapsulation- Inner layout, used in terms of implementation.
For example: the internal details of a Mobile Phone, how the keypad button and display screen are connected with each other using circuits.

<h3>overloading ?</h3>
a function with <b>different accepted parmeters</b>.
an operator which can operate on different types of perands

<h3>overriding ?</h3>
An override method provides a <b>new implementation</b> of the method inherited from a base class.

<h3>abstract class?</h3>
a class which cannot be <b>instantiated</b>.

<h3>sealed ?</h3>
preventing a class from being <b>inherited</b> by another class 
or preventing a method from being <b>overridden</b> in a child class. 

<h3>virtual and override</h3>
declare a base class method as virtual to override it in a derived class  
and define the derived class method as override

<h3>access modifers ?</h3>
public	    The code is accessible for all classes
private	    The code is only accessible within the same class
protected	The code is accessible within the same class, or in a class that is inherited from that class. 
internal	The code is only accessible within its own assembly, but not from another assembly
By Default, access modifier of Class is 'Internal' 
and for Data Member n Member Function of Class is 'Private'.

<h3>base</h3> 
We can use the base keyword to access the fields of the base class within derived class. 
If derived class doesn't define same field, there is no need to use base keyword.
Base class field can be directly accessed by the derived class.

<h3>this</h3>
current instance 

<h3>this()</h3>
nvoke the constructor in same class

</div>
